{
  "docs": [
    {
      "comment": "/** A simple container for a list of timelines and a name. */",
      "meta": {
        "range": [
          1955,
          3596
        ],
        "filename": "Animation.js",
        "lineno": 33,
        "columnno": 0,
        "path": "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist",
        "code": {
          "id": "astnode100000020",
          "name": "exports.Animation",
          "type": "ClassDeclaration"
        }
      },
      "name": "Animation",
      "longname": "Animation",
      "kind": "class",
      "classdesc": "<p>A simple container for a list of timelines and a name.</p>",
      "scope": "global",
      "memberof": "Animation"
    },
    {
      "comment": "/** Applies all the animation's timelines to the specified skeleton.\n     *\n     * See Timeline {@link Timeline#apply(Skeleton, float, float, Array, float, MixBlend, MixDirection)}.\n     * @param loop If true, the animation repeats after {@link #getDuration()}.\n     * @param events May be null to ignore fired events. */",
      "meta": {
        "range": [
          3087,
          3594
        ],
        "filename": "Animation.js",
        "lineno": 62,
        "columnno": 4,
        "path": "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist",
        "code": {
          "id": "astnode100000150",
          "name": "Animation#apply",
          "type": "MethodDefinition",
          "paramnames": [
            "skeleton",
            "lastTime",
            "time",
            "loop",
            "events",
            "alpha",
            "blend",
            "direction"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "<p>Applies all the animation's timelines to the specified skeleton.</p>\n<p>See Timeline {@link Timeline#apply(Skeleton, float, float, Array, float, MixBlend, MixDirection)}.</p>",
      "params": [
        {
          "description": "<p>If true, the animation repeats after {@link #getDuration()}.</p>",
          "name": "loop"
        },
        {
          "description": "<p>May be null to ignore fired events.</p>",
          "name": "events"
        }
      ],
      "name": "apply",
      "longname": "Animation#apply",
      "kind": "function",
      "memberof": "Animation",
      "scope": "instance"
    },
    {
      "comment": "/** Controls how a timeline value is mixed with the setup pose value or current pose value when a timeline's `alpha`\n * < 1.\n *\n * See Timeline {@link Timeline#apply(Skeleton, float, float, Array, float, MixBlend, MixDirection)}. */",
      "meta": {
        "range": [
          3830,
          3850
        ],
        "filename": "Animation.js",
        "lineno": 79,
        "columnno": 0,
        "path": "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist",
        "code": {
          "id": "astnode100000229",
          "name": "exports.MixBlend",
          "type": "VariableDeclaration"
        }
      },
      "description": "<p>Controls how a timeline value is mixed with the setup pose value or current pose value when a timeline's <code>alpha</code>\n&lt; 1.</p>\n<p>See Timeline {@link Timeline#apply(Skeleton, float, float, Array, float, MixBlend, MixDirection)}.</p>",
      "name": "MixBlend",
      "longname": "MixBlend",
      "kind": "member",
      "scope": "global"
    },
    {
      "comment": "/** Transitions from the setup value to the timeline value (the current value is not used). Before the first key, the setup\n     * value is set. */",
      "meta": {
        "range": [
          4030,
          4071
        ],
        "filename": "Animation.js",
        "lineno": 83,
        "columnno": 4,
        "path": "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist",
        "code": {
          "id": "astnode100000239",
          "name": "MixBlend[undefined]",
          "type": "Literal",
          "value": "setup",
          "paramnames": []
        }
      },
      "description": "<p>Transitions from the setup value to the timeline value (the current value is not used). Before the first key, the setup\nvalue is set.</p>",
      "name": "MixBlend[undefined]",
      "longname": "MixBlend[undefined]",
      "kind": "member",
      "scope": "global"
    },
    {
      "comment": "/** Transitions from the current value to the timeline value. Before the first key, transitions from the current value to\n     * the setup value. Timelines which perform instant transitions, such as {@link DrawOrderTimeline} or\n     * {@link AttachmentTimeline}, use the setup value before the first key.\n     *\n     * `first` is intended for the first animations applied, not for animations layered on top of those. */",
      "meta": {
        "range": [
          4501,
          4542
        ],
        "filename": "Animation.js",
        "lineno": 89,
        "columnno": 4,
        "path": "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist",
        "code": {
          "id": "astnode100000249",
          "name": "MixBlend[undefined]",
          "type": "Literal",
          "value": "first",
          "paramnames": []
        }
      },
      "description": "<p>Transitions from the current value to the timeline value. Before the first key, transitions from the current value to\nthe setup value. Timelines which perform instant transitions, such as {@link DrawOrderTimeline} or\n{@link AttachmentTimeline}, use the setup value before the first key.</p>\n<p><code>first</code> is intended for the first animations applied, not for animations layered on top of those.</p>",
      "name": "MixBlend[undefined]",
      "longname": "MixBlend[undefined]",
      "kind": "member",
      "scope": "global"
    },
    {
      "comment": "/** Transitions from the current value to the timeline value. No change is made before the first key (the current value is\n     * kept until the first key).\n     *\n     * `replace` is intended for animations layered on top of others, not for the first animations applied. */",
      "meta": {
        "range": [
          4827,
          4872
        ],
        "filename": "Animation.js",
        "lineno": 94,
        "columnno": 4,
        "path": "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist",
        "code": {
          "id": "astnode100000259",
          "name": "MixBlend[undefined]",
          "type": "Literal",
          "value": "replace",
          "paramnames": []
        }
      },
      "description": "<p>Transitions from the current value to the timeline value. No change is made before the first key (the current value is\nkept until the first key).</p>\n<p><code>replace</code> is intended for animations layered on top of others, not for the first animations applied.</p>",
      "name": "MixBlend[undefined]",
      "longname": "MixBlend[undefined]",
      "kind": "member",
      "scope": "global"
    },
    {
      "comment": "/** Transitions from the current value to the current value plus the timeline value. No change is made before the first key\n     * (the current value is kept until the first key).\n     *\n     * `add` is intended for animations layered on top of others, not for the first animations applied. Properties\n     * keyed by additive animations must be set manually or by another animation before applying the additive animations, else\n     * the property values will increase continually. */",
      "meta": {
        "range": [
          5368,
          5405
        ],
        "filename": "Animation.js",
        "lineno": 101,
        "columnno": 4,
        "path": "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist",
        "code": {
          "id": "astnode100000269",
          "name": "MixBlend[undefined]",
          "type": "Literal",
          "value": "add",
          "paramnames": []
        }
      },
      "description": "<p>Transitions from the current value to the current value plus the timeline value. No change is made before the first key\n(the current value is kept until the first key).</p>\n<p><code>add</code> is intended for animations layered on top of others, not for the first animations applied. Properties\nkeyed by additive animations must be set manually or by another animation before applying the additive animations, else\nthe property values will increase continually.</p>",
      "name": "MixBlend[undefined]",
      "longname": "MixBlend[undefined]",
      "kind": "member",
      "scope": "global"
    },
    {
      "comment": "/** Indicates whether a timeline's `alpha` is mixing out over time toward 0 (the setup or current pose value) or\n * mixing in toward 1 (the timeline's value).\n *\n * See Timeline {@link Timeline#apply(Skeleton, float, float, Array, float, MixBlend, MixDirection)}. */",
      "meta": {
        "range": [
          5707,
          5731
        ],
        "filename": "Animation.js",
        "lineno": 107,
        "columnno": 0,
        "path": "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist",
        "code": {
          "id": "astnode100000283",
          "name": "exports.MixDirection",
          "type": "VariableDeclaration"
        }
      },
      "description": "<p>Indicates whether a timeline's <code>alpha</code> is mixing out over time toward 0 (the setup or current pose value) or\nmixing in toward 1 (the timeline's value).</p>\n<p>See Timeline {@link Timeline#apply(Skeleton, float, float, Array, float, MixBlend, MixDirection)}.</p>",
      "name": "MixDirection",
      "longname": "MixDirection",
      "kind": "member",
      "scope": "global"
    },
    {
      "comment": "/** The interface for all timelines. */",
      "meta": {
        "range": [
          6336,
          7235
        ],
        "filename": "Animation.js",
        "lineno": 135,
        "columnno": 0,
        "path": "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist",
        "code": {
          "id": "astnode100000361",
          "name": "exports.Timeline",
          "type": "ClassDeclaration"
        }
      },
      "name": "Timeline",
      "longname": "Timeline",
      "kind": "class",
      "classdesc": "<p>The interface for all timelines.</p>",
      "scope": "global",
      "memberof": "Timeline"
    },
    {
      "comment": "/** The base class for timelines that use interpolation between key frame values. */",
      "meta": {
        "range": [
          7321,
          11418
        ],
        "filename": "Animation.js",
        "lineno": 168,
        "columnno": 0,
        "path": "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist",
        "code": {
          "id": "astnode100000514",
          "name": "exports.CurveTimeline",
          "type": "ClassDeclaration"
        }
      },
      "name": "CurveTimeline",
      "longname": "CurveTimeline",
      "kind": "class",
      "classdesc": "<p>The base class for timelines that use interpolation between key frame values.</p>",
      "scope": "global",
      "memberof": "CurveTimeline"
    },
    {
      "comment": "/** Sets the specified key frame to linear interpolation. */",
      "meta": {
        "range": [
          7681,
          7748
        ],
        "filename": "Animation.js",
        "lineno": 175,
        "columnno": 4,
        "path": "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist",
        "code": {
          "id": "astnode100000555",
          "name": "CurveTimeline#setLinear",
          "type": "MethodDefinition",
          "paramnames": [
            "frame"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "<p>Sets the specified key frame to linear interpolation.</p>",
      "name": "setLinear",
      "longname": "CurveTimeline#setLinear",
      "kind": "function",
      "memberof": "CurveTimeline",
      "scope": "instance",
      "params": []
    },
    {
      "comment": "/** Sets the specified key frame to stepped interpolation. */",
      "meta": {
        "range": [
          7819,
          7888
        ],
        "filename": "Animation.js",
        "lineno": 179,
        "columnno": 4,
        "path": "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist",
        "code": {
          "id": "astnode100000568",
          "name": "CurveTimeline#setStepped",
          "type": "MethodDefinition",
          "paramnames": [
            "frame"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "<p>Sets the specified key frame to stepped interpolation.</p>",
      "name": "setStepped",
      "longname": "CurveTimeline#setStepped",
      "kind": "function",
      "memberof": "CurveTimeline",
      "scope": "instance",
      "params": []
    },
    {
      "comment": "/** Shrinks the storage for Bezier curves, for use when <code>bezierCount</code> (specified in the constructor) was larger\n     * than the actual number of Bezier curves. */",
      "meta": {
        "range": [
          8071,
          8382
        ],
        "filename": "Animation.js",
        "lineno": 184,
        "columnno": 4,
        "path": "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist",
        "code": {
          "id": "astnode100000581",
          "name": "CurveTimeline#shrink",
          "type": "MethodDefinition",
          "paramnames": [
            "bezierCount"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "<p>Shrinks the storage for Bezier curves, for use when <code>bezierCount</code> (specified in the constructor) was larger\nthan the actual number of Bezier curves.</p>",
      "name": "shrink",
      "longname": "CurveTimeline#shrink",
      "kind": "function",
      "memberof": "CurveTimeline",
      "scope": "instance",
      "params": []
    },
    {
      "comment": "/** Stores the segments for the specified Bezier curve. For timelines that modify multiple values, there may be more than\n     * one curve per frame.\n     * @param bezier The ordinal of this Bezier curve for this timeline, between 0 and <code>bezierCount - 1</code> (specified\n     *           in the constructor), inclusive.\n     * @param frame Between 0 and <code>frameCount - 1</code>, inclusive.\n     * @param value The index of the value for this frame that this curve is used for.\n     * @param time1 The time for the first key.\n     * @param value1 The value for the first key.\n     * @param cx1 The time for the first Bezier handle.\n     * @param cy1 The value for the first Bezier handle.\n     * @param cx2 The time of the second Bezier handle.\n     * @param cy2 The value for the second Bezier handle.\n     * @param time2 The time for the second key.\n     * @param value2 The value for the second key. */",
      "meta": {
        "range": [
          9306,
          10262
        ],
        "filename": "Animation.js",
        "lineno": 206,
        "columnno": 4,
        "path": "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist",
        "code": {
          "id": "astnode100000632",
          "name": "CurveTimeline#setBezier",
          "type": "MethodDefinition",
          "paramnames": [
            "bezier",
            "frame",
            "value",
            "time1",
            "value1",
            "cx1",
            "cy1",
            "cx2",
            "cy2",
            "time2",
            "value2"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "<p>Stores the segments for the specified Bezier curve. For timelines that modify multiple values, there may be more than\none curve per frame.</p>",
      "params": [
        {
          "description": "<p>The ordinal of this Bezier curve for this timeline, between 0 and <code>bezierCount - 1</code> (specified\nin the constructor), inclusive.</p>",
          "name": "bezier"
        },
        {
          "description": "<p>Between 0 and <code>frameCount - 1</code>, inclusive.</p>",
          "name": "frame"
        },
        {
          "description": "<p>The index of the value for this frame that this curve is used for.</p>",
          "name": "value"
        },
        {
          "description": "<p>The time for the first key.</p>",
          "name": "time1"
        },
        {
          "description": "<p>The value for the first key.</p>",
          "name": "value1"
        },
        {
          "description": "<p>The time for the first Bezier handle.</p>",
          "name": "cx1"
        },
        {
          "description": "<p>The value for the first Bezier handle.</p>",
          "name": "cy1"
        },
        {
          "description": "<p>The time of the second Bezier handle.</p>",
          "name": "cx2"
        },
        {
          "description": "<p>The value for the second Bezier handle.</p>",
          "name": "cy2"
        },
        {
          "description": "<p>The time for the second key.</p>",
          "name": "time2"
        },
        {
          "description": "<p>The value for the second key.</p>",
          "name": "value2"
        }
      ],
      "name": "setBezier",
      "longname": "CurveTimeline#setBezier",
      "kind": "function",
      "memberof": "CurveTimeline",
      "scope": "instance"
    },
    {
      "comment": "/** Returns the Bezier interpolated value for the specified time.\n     * @param frameIndex The index into {@link #getFrames()} for the values of the frame before <code>time</code>.\n     * @param valueOffset The offset from <code>frameIndex</code> to the value this curve is used for.\n     * @param i The index of the Bezier segments. See {@link #getCurveType(int)}. */",
      "meta": {
        "range": [
          10640,
          11416
        ],
        "filename": "Animation.js",
        "lineno": 231,
        "columnno": 4,
        "path": "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist",
        "code": {
          "id": "astnode100000831",
          "name": "CurveTimeline#getBezierValue",
          "type": "MethodDefinition",
          "paramnames": [
            "time",
            "frameIndex",
            "valueOffset",
            "i"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "<p>Returns the Bezier interpolated value for the specified time.</p>",
      "params": [
        {
          "description": "<p>The index into {@link #getFrames()} for the values of the frame before <code>time</code>.</p>",
          "name": "frameIndex"
        },
        {
          "description": "<p>The offset from <code>frameIndex</code> to the value this curve is used for.</p>",
          "name": "valueOffset"
        },
        {
          "description": "<p>The index of the Bezier segments. See {@link #getCurveType(int)}.</p>",
          "name": "i"
        }
      ],
      "name": "getBezierValue",
      "longname": "CurveTimeline#getBezierValue",
      "kind": "function",
      "memberof": "CurveTimeline",
      "scope": "instance"
    },
    {
      "comment": "/** Sets the time and value for the specified frame.\n     * @param frame Between 0 and <code>frameCount</code>, inclusive.\n     * @param time The frame time in seconds. */",
      "meta": {
        "range": [
          11826,
          11968
        ],
        "filename": "Animation.js",
        "lineno": 259,
        "columnno": 4,
        "path": "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist",
        "code": {
          "id": "astnode100001019",
          "name": "CurveTimeline1#setFrame",
          "type": "MethodDefinition",
          "paramnames": [
            "frame",
            "time",
            "value"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "<p>Sets the time and value for the specified frame.</p>",
      "params": [
        {
          "description": "<p>Between 0 and <code>frameCount</code>, inclusive.</p>",
          "name": "frame"
        },
        {
          "description": "<p>The frame time in seconds.</p>",
          "name": "time"
        }
      ],
      "name": "setFrame",
      "longname": "CurveTimeline1#setFrame",
      "kind": "function",
      "memberof": "CurveTimeline1",
      "scope": "instance"
    },
    {
      "comment": "/** Returns the interpolated value for the specified time. */",
      "meta": {
        "range": [
          12039,
          12783
        ],
        "filename": "Animation.js",
        "lineno": 265,
        "columnno": 4,
        "path": "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist",
        "code": {
          "id": "astnode100001048",
          "name": "CurveTimeline1#getCurveValue",
          "type": "MethodDefinition",
          "paramnames": [
            "time"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "<p>Returns the interpolated value for the specified time.</p>",
      "name": "getCurveValue",
      "longname": "CurveTimeline1#getCurveValue",
      "kind": "function",
      "memberof": "CurveTimeline1",
      "scope": "instance",
      "params": []
    },
    {
      "comment": "/** The base class for a {@link CurveTimeline} which sets two properties. */",
      "meta": {
        "range": [
          12863,
          13697
        ],
        "filename": "Animation.js",
        "lineno": 286,
        "columnno": 0,
        "path": "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist",
        "code": {
          "id": "astnode100001163",
          "name": "exports.CurveTimeline2",
          "type": "ClassDeclaration"
        }
      },
      "name": "CurveTimeline2",
      "longname": "CurveTimeline2",
      "kind": "class",
      "classdesc": "<p>The base class for a {@link CurveTimeline} which sets two properties.</p>",
      "scope": "global",
      "memberof": "CurveTimeline2",
      "params": [
        {
          "description": "<p>The maximum number of Bezier curves. See {@link #shrink(int)}.</p>",
          "name": "bezierCount"
        },
        {
          "description": "<p>Unique identifiers for the properties the timeline modifies.</p>",
          "name": "propertyIds"
        }
      ]
    },
    {
      "comment": "/** Sets the time and values for the specified frame.\n     * @param frame Between 0 and <code>frameCount</code>, inclusive.\n     * @param time The frame time in seconds. */",
      "meta": {
        "range": [
          13479,
          13695
        ],
        "filename": "Animation.js",
        "lineno": 298,
        "columnno": 4,
        "path": "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist",
        "code": {
          "id": "astnode100001190",
          "name": "CurveTimeline2#setFrame",
          "type": "MethodDefinition",
          "paramnames": [
            "frame",
            "time",
            "value1",
            "value2"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "<p>Sets the time and values for the specified frame.</p>",
      "params": [
        {
          "description": "<p>Between 0 and <code>frameCount</code>, inclusive.</p>",
          "name": "frame"
        },
        {
          "description": "<p>The frame time in seconds.</p>",
          "name": "time"
        }
      ],
      "name": "setFrame",
      "longname": "CurveTimeline2#setFrame",
      "kind": "function",
      "memberof": "CurveTimeline2",
      "scope": "instance"
    },
    {
      "comment": "/** Changes a bone's local {@link Bone#rotation}. */",
      "meta": {
        "range": [
          13751,
          14955
        ],
        "filename": "Animation.js",
        "lineno": 306,
        "columnno": 0,
        "path": "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist",
        "code": {
          "id": "astnode100001230",
          "name": "exports.RotateTimeline",
          "type": "ClassDeclaration"
        }
      },
      "name": "RotateTimeline",
      "longname": "RotateTimeline",
      "kind": "class",
      "classdesc": "<p>Changes a bone's local {@link Bone#rotation}.</p>",
      "scope": "global",
      "memberof": "RotateTimeline"
    },
    {
      "comment": "/** Changes a bone's local {@link Bone#x} and {@link Bone#y}. */",
      "meta": {
        "range": [
          15021,
          17400
        ],
        "filename": "Animation.js",
        "lineno": 341,
        "columnno": 0,
        "path": "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist",
        "code": {
          "id": "astnode100001405",
          "name": "exports.TranslateTimeline",
          "type": "ClassDeclaration"
        }
      },
      "name": "TranslateTimeline",
      "longname": "TranslateTimeline",
      "kind": "class",
      "classdesc": "<p>Changes a bone's local {@link Bone#x} and {@link Bone#y}.</p>",
      "scope": "global",
      "memberof": "TranslateTimeline"
    },
    {
      "comment": "/** Changes a bone's local {@link Bone#x}. */",
      "meta": {
        "range": [
          17447,
          18622
        ],
        "filename": "Animation.js",
        "lineno": 401,
        "columnno": 0,
        "path": "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist",
        "code": {
          "id": "astnode100001796",
          "name": "exports.TranslateXTimeline",
          "type": "ClassDeclaration"
        }
      },
      "name": "TranslateXTimeline",
      "longname": "TranslateXTimeline",
      "kind": "class",
      "classdesc": "<p>Changes a bone's local {@link Bone#x}.</p>",
      "scope": "global",
      "memberof": "TranslateXTimeline"
    },
    {
      "comment": "/** Changes a bone's local {@link Bone#x}. */",
      "meta": {
        "range": [
          18669,
          19844
        ],
        "filename": "Animation.js",
        "lineno": 437,
        "columnno": 0,
        "path": "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist",
        "code": {
          "id": "astnode100001978",
          "name": "exports.TranslateYTimeline",
          "type": "ClassDeclaration"
        }
      },
      "name": "TranslateYTimeline",
      "longname": "TranslateYTimeline",
      "kind": "class",
      "classdesc": "<p>Changes a bone's local {@link Bone#x}.</p>",
      "scope": "global",
      "memberof": "TranslateYTimeline"
    },
    {
      "comment": "/** Changes a bone's local {@link Bone#scaleX)} and {@link Bone#scaleY}. */",
      "meta": {
        "range": [
          19921,
          24293
        ],
        "filename": "Animation.js",
        "lineno": 473,
        "columnno": 0,
        "path": "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist",
        "code": {
          "id": "astnode100002160",
          "name": "exports.ScaleTimeline",
          "type": "ClassDeclaration"
        }
      },
      "name": "ScaleTimeline",
      "longname": "ScaleTimeline",
      "kind": "class",
      "classdesc": "<p>Changes a bone's local {@link Bone#scaleX)} and {@link Bone#scaleY}.</p>",
      "scope": "global",
      "memberof": "ScaleTimeline"
    },
    {
      "comment": "/** Changes a bone's local {@link Bone#scaleX)} and {@link Bone#scaleY}. */",
      "meta": {
        "range": [
          24370,
          26886
        ],
        "filename": "Animation.js",
        "lineno": 574,
        "columnno": 0,
        "path": "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist",
        "code": {
          "id": "astnode100002858",
          "name": "exports.ScaleXTimeline",
          "type": "ClassDeclaration"
        }
      },
      "name": "ScaleXTimeline",
      "longname": "ScaleXTimeline",
      "kind": "class",
      "classdesc": "<p>Changes a bone's local {@link Bone#scaleX)} and {@link Bone#scaleY}.</p>",
      "scope": "global",
      "memberof": "ScaleXTimeline"
    },
    {
      "comment": "/** Changes a bone's local {@link Bone#scaleX)} and {@link Bone#scaleY}. */",
      "meta": {
        "range": [
          26963,
          29479
        ],
        "filename": "Animation.js",
        "lineno": 639,
        "columnno": 0,
        "path": "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist",
        "code": {
          "id": "astnode100003212",
          "name": "exports.ScaleYTimeline",
          "type": "ClassDeclaration"
        }
      },
      "name": "ScaleYTimeline",
      "longname": "ScaleYTimeline",
      "kind": "class",
      "classdesc": "<p>Changes a bone's local {@link Bone#scaleX)} and {@link Bone#scaleY}.</p>",
      "scope": "global",
      "memberof": "ScaleYTimeline"
    },
    {
      "comment": "/** Changes a bone's local {@link Bone#shearX} and {@link Bone#shearY}. */",
      "meta": {
        "range": [
          29555,
          32050
        ],
        "filename": "Animation.js",
        "lineno": 704,
        "columnno": 0,
        "path": "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist",
        "code": {
          "id": "astnode100003566",
          "name": "exports.ShearTimeline",
          "type": "ClassDeclaration"
        }
      },
      "name": "ShearTimeline",
      "longname": "ShearTimeline",
      "kind": "class",
      "classdesc": "<p>Changes a bone's local {@link Bone#shearX} and {@link Bone#shearY}.</p>",
      "scope": "global",
      "memberof": "ShearTimeline"
    },
    {
      "comment": "/** Changes a bone's local {@link Bone#shearX} and {@link Bone#shearY}. */",
      "meta": {
        "range": [
          32126,
          33357
        ],
        "filename": "Animation.js",
        "lineno": 764,
        "columnno": 0,
        "path": "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist",
        "code": {
          "id": "astnode100003957",
          "name": "exports.ShearXTimeline",
          "type": "ClassDeclaration"
        }
      },
      "name": "ShearXTimeline",
      "longname": "ShearXTimeline",
      "kind": "class",
      "classdesc": "<p>Changes a bone's local {@link Bone#shearX} and {@link Bone#shearY}.</p>",
      "scope": "global",
      "memberof": "ShearXTimeline"
    },
    {
      "comment": "/** Changes a bone's local {@link Bone#shearX} and {@link Bone#shearY}. */",
      "meta": {
        "range": [
          33433,
          34664
        ],
        "filename": "Animation.js",
        "lineno": 800,
        "columnno": 0,
        "path": "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist",
        "code": {
          "id": "astnode100004139",
          "name": "exports.ShearYTimeline",
          "type": "ClassDeclaration"
        }
      },
      "name": "ShearYTimeline",
      "longname": "ShearYTimeline",
      "kind": "class",
      "classdesc": "<p>Changes a bone's local {@link Bone#shearX} and {@link Bone#shearY}.</p>",
      "scope": "global",
      "memberof": "ShearYTimeline"
    },
    {
      "comment": "/** Changes a slot's {@link Slot#color}. */",
      "meta": {
        "range": [
          34709,
          37899
        ],
        "filename": "Animation.js",
        "lineno": 836,
        "columnno": 0,
        "path": "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist",
        "code": {
          "id": "astnode100004321",
          "name": "exports.RGBATimeline",
          "type": "ClassDeclaration"
        }
      },
      "name": "RGBATimeline",
      "longname": "RGBATimeline",
      "kind": "class",
      "classdesc": "<p>Changes a slot's {@link Slot#color}.</p>",
      "scope": "global",
      "memberof": "RGBATimeline"
    },
    {
      "comment": "/** Sets the time in seconds, red, green, blue, and alpha for the specified key frame. */",
      "meta": {
        "range": [
          35183,
          35459
        ],
        "filename": "Animation.js",
        "lineno": 849,
        "columnno": 4,
        "path": "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist",
        "code": {
          "id": "astnode100004371",
          "name": "RGBATimeline#setFrame",
          "type": "MethodDefinition",
          "paramnames": [
            "frame",
            "time",
            "r",
            "g",
            "b",
            "a"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "<p>Sets the time in seconds, red, green, blue, and alpha for the specified key frame.</p>",
      "name": "setFrame",
      "longname": "RGBATimeline#setFrame",
      "kind": "function",
      "memberof": "RGBATimeline",
      "scope": "instance",
      "params": []
    },
    {
      "comment": "/** Changes a slot's {@link Slot#color}. */",
      "meta": {
        "range": [
          37944,
          41044
        ],
        "filename": "Animation.js",
        "lineno": 912,
        "columnno": 0,
        "path": "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist",
        "code": {
          "id": "astnode100004855",
          "name": "exports.RGBTimeline",
          "type": "ClassDeclaration"
        }
      },
      "name": "RGBTimeline",
      "longname": "RGBTimeline",
      "kind": "class",
      "classdesc": "<p>Changes a slot's {@link Slot#color}.</p>",
      "scope": "global",
      "memberof": "RGBTimeline"
    },
    {
      "comment": "/** Sets the time in seconds, red, green, blue, and alpha for the specified key frame. */",
      "meta": {
        "range": [
          38371,
          38591
        ],
        "filename": "Animation.js",
        "lineno": 924,
        "columnno": 4,
        "path": "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist",
        "code": {
          "id": "astnode100004898",
          "name": "RGBTimeline#setFrame",
          "type": "MethodDefinition",
          "paramnames": [
            "frame",
            "time",
            "r",
            "g",
            "b"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "<p>Sets the time in seconds, red, green, blue, and alpha for the specified key frame.</p>",
      "name": "setFrame",
      "longname": "RGBTimeline#setFrame",
      "kind": "function",
      "memberof": "RGBTimeline",
      "scope": "instance",
      "params": []
    },
    {
      "comment": "/** Changes a bone's local {@link Bone#shearX} and {@link Bone#shearY}. */",
      "meta": {
        "range": [
          41120,
          42213
        ],
        "filename": "Animation.js",
        "lineno": 995,
        "columnno": 0,
        "path": "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist",
        "code": {
          "id": "astnode100005376",
          "name": "exports.AlphaTimeline",
          "type": "ClassDeclaration"
        }
      },
      "name": "AlphaTimeline",
      "longname": "AlphaTimeline",
      "kind": "class",
      "classdesc": "<p>Changes a bone's local {@link Bone#shearX} and {@link Bone#shearY}.</p>",
      "scope": "global",
      "memberof": "AlphaTimeline"
    },
    {
      "comment": "/** Changes a slot's {@link Slot#color} and {@link Slot#darkColor} for two color tinting. */",
      "meta": {
        "range": [
          42307,
          47294
        ],
        "filename": "Animation.js",
        "lineno": 1028,
        "columnno": 0,
        "path": "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist",
        "code": {
          "id": "astnode100005547",
          "name": "exports.RGBA2Timeline",
          "type": "ClassDeclaration"
        }
      },
      "name": "RGBA2Timeline",
      "longname": "RGBA2Timeline",
      "kind": "class",
      "classdesc": "<p>Changes a slot's {@link Slot#color} and {@link Slot#darkColor} for two color tinting.</p>",
      "scope": "global",
      "memberof": "RGBA2Timeline"
    },
    {
      "comment": "/** Sets the time in seconds, light, and dark colors for the specified key frame. */",
      "meta": {
        "range": [
          42822,
          43231
        ],
        "filename": "Animation.js",
        "lineno": 1042,
        "columnno": 4,
        "path": "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist",
        "code": {
          "id": "astnode100005604",
          "name": "RGBA2Timeline#setFrame",
          "type": "MethodDefinition",
          "paramnames": [
            "frame",
            "time",
            "r",
            "g",
            "b",
            "a",
            "r2",
            "g2",
            "b2"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "<p>Sets the time in seconds, light, and dark colors for the specified key frame.</p>",
      "name": "setFrame",
      "longname": "RGBA2Timeline#setFrame",
      "kind": "function",
      "memberof": "RGBA2Timeline",
      "scope": "instance",
      "params": []
    },
    {
      "comment": "/** Changes a slot's {@link Slot#color} and {@link Slot#darkColor} for two color tinting. */",
      "meta": {
        "range": [
          47388,
          52313
        ],
        "filename": "Animation.js",
        "lineno": 1138,
        "columnno": 0,
        "path": "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist",
        "code": {
          "id": "astnode100006437",
          "name": "exports.RGB2Timeline",
          "type": "ClassDeclaration"
        }
      },
      "name": "RGB2Timeline",
      "longname": "RGB2Timeline",
      "kind": "class",
      "classdesc": "<p>Changes a slot's {@link Slot#color} and {@link Slot#darkColor} for two color tinting.</p>",
      "scope": "global",
      "memberof": "RGB2Timeline"
    },
    {
      "comment": "/** Sets the time in seconds, light, and dark colors for the specified key frame. */",
      "meta": {
        "range": [
          47856,
          48231
        ],
        "filename": "Animation.js",
        "lineno": 1151,
        "columnno": 4,
        "path": "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist",
        "code": {
          "id": "astnode100006487",
          "name": "RGB2Timeline#setFrame",
          "type": "MethodDefinition",
          "paramnames": [
            "frame",
            "time",
            "r",
            "g",
            "b",
            "r2",
            "g2",
            "b2"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "<p>Sets the time in seconds, light, and dark colors for the specified key frame.</p>",
      "name": "setFrame",
      "longname": "RGB2Timeline#setFrame",
      "kind": "function",
      "memberof": "RGB2Timeline",
      "scope": "instance",
      "params": []
    },
    {
      "comment": "/** Changes a slot's {@link Slot#attachment}. */",
      "meta": {
        "range": [
          52363,
          53820
        ],
        "filename": "Animation.js",
        "lineno": 1252,
        "columnno": 0,
        "path": "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist",
        "code": {
          "id": "astnode100007314",
          "name": "exports.AttachmentTimeline",
          "type": "ClassDeclaration"
        }
      },
      "name": "AttachmentTimeline",
      "longname": "AttachmentTimeline",
      "kind": "class",
      "classdesc": "<p>Changes a slot's {@link Slot#attachment}.</p>",
      "scope": "global",
      "memberof": "AttachmentTimeline"
    },
    {
      "comment": "/** Sets the time in seconds and the attachment name for the specified key frame. */",
      "meta": {
        "range": [
          52825,
          52959
        ],
        "filename": "Animation.js",
        "lineno": 1265,
        "columnno": 4,
        "path": "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist",
        "code": {
          "id": "astnode100007367",
          "name": "AttachmentTimeline#setFrame",
          "type": "MethodDefinition",
          "paramnames": [
            "frame",
            "time",
            "attachmentName"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "<p>Sets the time in seconds and the attachment name for the specified key frame.</p>",
      "name": "setFrame",
      "longname": "AttachmentTimeline#setFrame",
      "kind": "function",
      "memberof": "AttachmentTimeline",
      "scope": "instance",
      "params": []
    },
    {
      "comment": "/** Changes a slot's {@link Slot#deform} to deform a {@link VertexAttachment}. */",
      "meta": {
        "range": [
          53903,
          65149
        ],
        "filename": "Animation.js",
        "lineno": 1290,
        "columnno": 0,
        "path": "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist",
        "code": {
          "id": "astnode100007522",
          "name": "exports.DeformTimeline",
          "type": "ClassDeclaration"
        }
      },
      "name": "DeformTimeline",
      "longname": "DeformTimeline",
      "kind": "class",
      "classdesc": "<p>Changes a slot's {@link Slot#deform} to deform a {@link VertexAttachment}.</p>",
      "scope": "global",
      "memberof": "DeformTimeline"
    },
    {
      "comment": "/** Sets the time in seconds and the vertices for the specified key frame.\n     * @param vertices Vertex positions for an unweighted VertexAttachment, or deform offsets if it has weights. */",
      "meta": {
        "range": [
          54559,
          54674
        ],
        "filename": "Animation.js",
        "lineno": 1305,
        "columnno": 4,
        "path": "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist",
        "code": {
          "id": "astnode100007590",
          "name": "DeformTimeline#setFrame",
          "type": "MethodDefinition",
          "paramnames": [
            "frame",
            "time",
            "vertices"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "<p>Sets the time in seconds and the vertices for the specified key frame.</p>",
      "params": [
        {
          "description": "<p>Vertex positions for an unweighted VertexAttachment, or deform offsets if it has weights.</p>",
          "name": "vertices"
        }
      ],
      "name": "setFrame",
      "longname": "DeformTimeline#setFrame",
      "kind": "function",
      "memberof": "DeformTimeline",
      "scope": "instance"
    },
    {
      "comment": "/** @param value1 Ignored (0 is used for a deform timeline).\n     * @param value2 Ignored (1 is used for a deform timeline). */",
      "meta": {
        "range": [
          54811,
          55728
        ],
        "filename": "Animation.js",
        "lineno": 1311,
        "columnno": 4,
        "path": "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist",
        "code": {
          "id": "astnode100007613",
          "name": "DeformTimeline#setBezier",
          "type": "MethodDefinition",
          "paramnames": [
            "bezier",
            "frame",
            "value",
            "time1",
            "value1",
            "cx1",
            "cy1",
            "cx2",
            "cy2",
            "time2",
            "value2"
          ]
        },
        "vars": {
          "": null
        }
      },
      "params": [
        {
          "description": "<p>Ignored (0 is used for a deform timeline).</p>",
          "name": "value1"
        },
        {
          "description": "<p>Ignored (1 is used for a deform timeline).</p>",
          "name": "value2"
        }
      ],
      "name": "setBezier",
      "longname": "DeformTimeline#setBezier",
      "kind": "function",
      "memberof": "DeformTimeline",
      "scope": "instance"
    },
    {
      "comment": "/** Fires an {@link Event} when specific animation times are reached. */",
      "meta": {
        "range": [
          65223,
          66817
        ],
        "filename": "Animation.js",
        "lineno": 1542,
        "columnno": 0,
        "path": "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist",
        "code": {
          "id": "astnode100008862",
          "name": "exports.EventTimeline",
          "type": "ClassDeclaration"
        }
      },
      "name": "EventTimeline",
      "longname": "EventTimeline",
      "kind": "class",
      "classdesc": "<p>Fires an {@link Event} when specific animation times are reached.</p>",
      "scope": "global",
      "memberof": "EventTimeline"
    },
    {
      "comment": "/** Sets the time in seconds and the event for the specified key frame. */",
      "meta": {
        "range": [
          65550,
          65657
        ],
        "filename": "Animation.js",
        "lineno": 1551,
        "columnno": 4,
        "path": "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist",
        "code": {
          "id": "astnode100008897",
          "name": "EventTimeline#setFrame",
          "type": "MethodDefinition",
          "paramnames": [
            "frame",
            "event"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "<p>Sets the time in seconds and the event for the specified key frame.</p>",
      "name": "setFrame",
      "longname": "EventTimeline#setFrame",
      "kind": "function",
      "memberof": "EventTimeline",
      "scope": "instance",
      "params": []
    },
    {
      "comment": "/** Fires events for frames > `lastTime` and <= `time`. */",
      "meta": {
        "range": [
          65725,
          66815
        ],
        "filename": "Animation.js",
        "lineno": 1556,
        "columnno": 4,
        "path": "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist",
        "code": {
          "id": "astnode100008921",
          "name": "EventTimeline#apply",
          "type": "MethodDefinition",
          "paramnames": [
            "skeleton",
            "lastTime",
            "time",
            "firedEvents",
            "alpha",
            "blend",
            "direction"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "<p>Fires events for frames &gt; <code>lastTime</code> and &lt;= <code>time</code>.</p>",
      "name": "apply",
      "longname": "EventTimeline#apply",
      "kind": "function",
      "memberof": "EventTimeline",
      "scope": "instance",
      "params": []
    },
    {
      "comment": "/** Changes a skeleton's {@link Skeleton#drawOrder}. */",
      "meta": {
        "range": [
          66925,
          68573
        ],
        "filename": "Animation.js",
        "lineno": 1587,
        "columnno": 0,
        "path": "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist",
        "code": {
          "id": "astnode100009072",
          "name": "exports.DrawOrderTimeline",
          "type": "ClassDeclaration"
        }
      },
      "name": "DrawOrderTimeline",
      "longname": "DrawOrderTimeline",
      "kind": "class",
      "classdesc": "<p>Changes a skeleton's {@link Skeleton#drawOrder}.</p>",
      "scope": "global",
      "memberof": "DrawOrderTimeline"
    },
    {
      "comment": "/** Sets the time in seconds and the draw order for the specified key frame.\n     * @param drawOrder For each slot in {@link Skeleton#slots}, the index of the new draw order. May be null to use setup pose\n     *           draw order. */",
      "meta": {
        "range": [
          67426,
          67545
        ],
        "filename": "Animation.js",
        "lineno": 1598,
        "columnno": 4,
        "path": "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist",
        "code": {
          "id": "astnode100009107",
          "name": "DrawOrderTimeline#setFrame",
          "type": "MethodDefinition",
          "paramnames": [
            "frame",
            "time",
            "drawOrder"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "<p>Sets the time in seconds and the draw order for the specified key frame.</p>",
      "params": [
        {
          "description": "<p>For each slot in {@link Skeleton#slots}, the index of the new draw order. May be null to use setup pose\ndraw order.</p>",
          "name": "drawOrder"
        }
      ],
      "name": "setFrame",
      "longname": "DrawOrderTimeline#setFrame",
      "kind": "function",
      "memberof": "DrawOrderTimeline",
      "scope": "instance"
    },
    {
      "comment": "/** Changes an IK constraint's {@link IkConstraint#mix}, {@link IkConstraint#softness},\n * {@link IkConstraint#bendDirection}, {@link IkConstraint#stretch}, and {@link IkConstraint#compress}. */",
      "meta": {
        "range": [
          68828,
          73293
        ],
        "filename": "Animation.js",
        "lineno": 1628,
        "columnno": 0,
        "path": "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist",
        "code": {
          "id": "astnode100009302",
          "name": "exports.IkConstraintTimeline",
          "type": "ClassDeclaration"
        }
      },
      "name": "IkConstraintTimeline",
      "longname": "IkConstraintTimeline",
      "kind": "class",
      "classdesc": "<p>Changes an IK constraint's {@link IkConstraint#mix}, {@link IkConstraint#softness},\n{@link IkConstraint#bendDirection}, {@link IkConstraint#stretch}, and {@link IkConstraint#compress}.</p>",
      "scope": "global",
      "memberof": "IkConstraintTimeline"
    },
    {
      "comment": "/** The index of the IK constraint slot in {@link Skeleton#ikConstraints} that will be changed. */",
      "meta": {
        "range": [
          69176,
          69202
        ],
        "filename": "Animation.js",
        "lineno": 1634,
        "columnno": 8,
        "path": "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist",
        "code": {
          "id": "astnode100009328",
          "name": "this.ikConstraintIndex",
          "type": "Literal",
          "value": 0,
          "paramnames": []
        }
      },
      "description": "<p>The index of the IK constraint slot in {@link Skeleton#ikConstraints} that will be changed.</p>",
      "name": "ikConstraintIndex",
      "longname": "IkConstraintTimeline#ikConstraintIndex",
      "kind": "member",
      "memberof": "IkConstraintTimeline",
      "scope": "instance"
    },
    {
      "comment": "/** Sets the time in seconds, mix, softness, bend direction, compress, and stretch for the specified key frame. */",
      "meta": {
        "range": [
          69445,
          69885
        ],
        "filename": "Animation.js",
        "lineno": 1641,
        "columnno": 4,
        "path": "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist",
        "code": {
          "id": "astnode100009345",
          "name": "IkConstraintTimeline#setFrame",
          "type": "MethodDefinition",
          "paramnames": [
            "frame",
            "time",
            "mix",
            "softness",
            "bendDirection",
            "compress",
            "stretch"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "<p>Sets the time in seconds, mix, softness, bend direction, compress, and stretch for the specified key frame.</p>",
      "name": "setFrame",
      "longname": "IkConstraintTimeline#setFrame",
      "kind": "function",
      "memberof": "IkConstraintTimeline",
      "scope": "instance",
      "params": []
    },
    {
      "comment": "/** Changes a transform constraint's {@link TransformConstraint#rotateMix}, {@link TransformConstraint#translateMix},\n * {@link TransformConstraint#scaleMix}, and {@link TransformConstraint#shearMix}. */",
      "meta": {
        "range": [
          73498,
          79195
        ],
        "filename": "Animation.js",
        "lineno": 1720,
        "columnno": 0,
        "path": "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist",
        "code": {
          "id": "astnode100009917",
          "name": "exports.TransformConstraintTimeline",
          "type": "ClassDeclaration"
        }
      },
      "name": "TransformConstraintTimeline",
      "longname": "TransformConstraintTimeline",
      "kind": "class",
      "classdesc": "<p>Changes a transform constraint's {@link TransformConstraint#rotateMix}, {@link TransformConstraint#translateMix},\n{@link TransformConstraint#scaleMix}, and {@link TransformConstraint#shearMix}.</p>",
      "scope": "global",
      "memberof": "TransformConstraintTimeline"
    },
    {
      "comment": "/** The index of the transform constraint slot in {@link Skeleton#transformConstraints} that will be changed. */",
      "meta": {
        "range": [
          73888,
          73921
        ],
        "filename": "Animation.js",
        "lineno": 1726,
        "columnno": 8,
        "path": "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist",
        "code": {
          "id": "astnode100009943",
          "name": "this.transformConstraintIndex",
          "type": "Literal",
          "value": 0,
          "paramnames": []
        }
      },
      "description": "<p>The index of the transform constraint slot in {@link Skeleton#transformConstraints} that will be changed.</p>",
      "name": "transformConstraintIndex",
      "longname": "TransformConstraintTimeline#transformConstraintIndex",
      "kind": "member",
      "memberof": "TransformConstraintTimeline",
      "scope": "instance"
    },
    {
      "comment": "/** The time in seconds, rotate mix, translate mix, scale mix, and shear mix for the specified key frame. */",
      "meta": {
        "range": [
          74172,
          74633
        ],
        "filename": "Animation.js",
        "lineno": 1733,
        "columnno": 4,
        "path": "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist",
        "code": {
          "id": "astnode100009960",
          "name": "TransformConstraintTimeline#setFrame",
          "type": "MethodDefinition",
          "paramnames": [
            "frame",
            "time",
            "mixRotate",
            "mixX",
            "mixY",
            "mixScaleX",
            "mixScaleY",
            "mixShearY"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "<p>The time in seconds, rotate mix, translate mix, scale mix, and shear mix for the specified key frame.</p>",
      "name": "setFrame",
      "longname": "TransformConstraintTimeline#setFrame",
      "kind": "function",
      "memberof": "TransformConstraintTimeline",
      "scope": "instance",
      "params": []
    },
    {
      "comment": "/** Changes a path constraint's {@link PathConstraint#position}. */",
      "meta": {
        "range": [
          79264,
          80615
        ],
        "filename": "Animation.js",
        "lineno": 1826,
        "columnno": 0,
        "path": "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist",
        "code": {
          "id": "astnode100010746",
          "name": "exports.PathConstraintPositionTimeline",
          "type": "ClassDeclaration"
        }
      },
      "name": "PathConstraintPositionTimeline",
      "longname": "PathConstraintPositionTimeline",
      "kind": "class",
      "classdesc": "<p>Changes a path constraint's {@link PathConstraint#position}.</p>",
      "scope": "global",
      "memberof": "PathConstraintPositionTimeline"
    },
    {
      "comment": "/** The index of the path constraint slot in {@link Skeleton#pathConstraints} that will be changed. */",
      "meta": {
        "range": [
          79617,
          79645
        ],
        "filename": "Animation.js",
        "lineno": 1830,
        "columnno": 8,
        "path": "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist",
        "code": {
          "id": "astnode100010771",
          "name": "this.pathConstraintIndex",
          "type": "Literal",
          "value": 0,
          "paramnames": []
        }
      },
      "description": "<p>The index of the path constraint slot in {@link Skeleton#pathConstraints} that will be changed.</p>",
      "name": "pathConstraintIndex",
      "longname": "PathConstraintPositionTimeline#pathConstraintIndex",
      "kind": "member",
      "memberof": "PathConstraintPositionTimeline",
      "scope": "instance"
    },
    {
      "comment": "/** Changes a path constraint's {@link PathConstraint#spacing}. */",
      "meta": {
        "range": [
          80683,
          82024
        ],
        "filename": "Animation.js",
        "lineno": 1856,
        "columnno": 0,
        "path": "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist",
        "code": {
          "id": "astnode100010906",
          "name": "exports.PathConstraintSpacingTimeline",
          "type": "ClassDeclaration"
        }
      },
      "name": "PathConstraintSpacingTimeline",
      "longname": "PathConstraintSpacingTimeline",
      "kind": "class",
      "classdesc": "<p>Changes a path constraint's {@link PathConstraint#spacing}.</p>",
      "scope": "global",
      "memberof": "PathConstraintSpacingTimeline"
    },
    {
      "comment": "/** The index of the path constraint slot in {@link Skeleton#getPathConstraints()} that will be changed. */",
      "meta": {
        "range": [
          81039,
          81067
        ],
        "filename": "Animation.js",
        "lineno": 1860,
        "columnno": 8,
        "path": "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist",
        "code": {
          "id": "astnode100010931",
          "name": "this.pathConstraintIndex",
          "type": "Literal",
          "value": 0,
          "paramnames": []
        }
      },
      "description": "<p>The index of the path constraint slot in {@link Skeleton#getPathConstraints()} that will be changed.</p>",
      "name": "pathConstraintIndex",
      "longname": "PathConstraintSpacingTimeline#pathConstraintIndex",
      "kind": "member",
      "memberof": "PathConstraintSpacingTimeline",
      "scope": "instance"
    },
    {
      "comment": "/** Changes a transform constraint's {@link PathConstraint#getMixRotate()}, {@link PathConstraint#getMixX()}, and\n * {@link PathConstraint#getMixY()}. */",
      "meta": {
        "range": [
          82179,
          85653
        ],
        "filename": "Animation.js",
        "lineno": 1887,
        "columnno": 0,
        "path": "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist",
        "code": {
          "id": "astnode100011066",
          "name": "exports.PathConstraintMixTimeline",
          "type": "ClassDeclaration"
        }
      },
      "name": "PathConstraintMixTimeline",
      "longname": "PathConstraintMixTimeline",
      "kind": "class",
      "classdesc": "<p>Changes a transform constraint's {@link PathConstraint#getMixRotate()}, {@link PathConstraint#getMixX()}, and\n{@link PathConstraint#getMixY()}.</p>",
      "scope": "global",
      "memberof": "PathConstraintMixTimeline"
    },
    {
      "comment": "/** The index of the path constraint slot in {@link Skeleton#getPathConstraints()} that will be changed. */",
      "meta": {
        "range": [
          82550,
          82578
        ],
        "filename": "Animation.js",
        "lineno": 1893,
        "columnno": 8,
        "path": "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist",
        "code": {
          "id": "astnode100011092",
          "name": "this.pathConstraintIndex",
          "type": "Literal",
          "value": 0,
          "paramnames": []
        }
      },
      "description": "<p>The index of the path constraint slot in {@link Skeleton#getPathConstraints()} that will be changed.</p>",
      "name": "pathConstraintIndex",
      "longname": "PathConstraintMixTimeline#pathConstraintIndex",
      "kind": "member",
      "memberof": "PathConstraintMixTimeline",
      "scope": "instance"
    },
    {
      "comment": "/** Changes a slot's {@link Slot#getSequenceIndex()} for an attachment's {@link Sequence}. */",
      "meta": {
        "range": [
          85748,
          89079
        ],
        "filename": "Animation.js",
        "lineno": 1964,
        "columnno": 0,
        "path": "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist",
        "code": {
          "id": "astnode100011577",
          "name": "exports.SequenceTimeline",
          "type": "ClassDeclaration"
        }
      },
      "name": "SequenceTimeline",
      "longname": "SequenceTimeline",
      "kind": "class",
      "classdesc": "<p>Changes a slot's {@link Slot#getSequenceIndex()} for an attachment's {@link Sequence}.</p>",
      "scope": "global",
      "memberof": "SequenceTimeline"
    },
    {
      "comment": "/** Sets the time, mode, index, and frame time for the specified frame.\n     * @param frame Between 0 and <code>frameCount</code>, inclusive.\n     * @param time Seconds between frames. */",
      "meta": {
        "range": [
          86434,
          86715
        ],
        "filename": "Animation.js",
        "lineno": 1984,
        "columnno": 4,
        "path": "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist",
        "code": {
          "id": "astnode100011645",
          "name": "SequenceTimeline#setFrame",
          "type": "MethodDefinition",
          "paramnames": [
            "frame",
            "time",
            "mode",
            "index",
            "delay"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "<p>Sets the time, mode, index, and frame time for the specified frame.</p>",
      "params": [
        {
          "description": "<p>Between 0 and <code>frameCount</code>, inclusive.</p>",
          "name": "frame"
        },
        {
          "description": "<p>Seconds between frames.</p>",
          "name": "time"
        }
      ],
      "name": "setFrame",
      "longname": "SequenceTimeline#setFrame",
      "kind": "function",
      "memberof": "SequenceTimeline",
      "scope": "instance"
    },
    {
      "comment": "/** Applies animations over time, queues animations for later playback, mixes (crossfading) between animations, and applies\n * multiple animations on top of each other (layering).\n *\n * See [Applying Animations](http://esotericsoftware.com/spine-applying-animations/) in the Spine Runtimes Guide. */",
      "meta": {
        "range": [
          2208,
          35323
        ],
        "filename": "AnimationState.js",
        "lineno": 35,
        "columnno": 0,
        "path": "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist",
        "code": {
          "id": "astnode100012064",
          "name": "exports.AnimationState",
          "type": "ClassDeclaration"
        }
      },
      "name": "AnimationState",
      "longname": "AnimationState",
      "kind": "class",
      "classdesc": "<p>Applies animations over time, queues animations for later playback, mixes (crossfading) between animations, and applies\nmultiple animations on top of each other (layering).</p>\n<p>See <a href=\"http://esotericsoftware.com/spine-applying-animations/\">Applying Animations</a> in the Spine Runtimes Guide.</p>",
      "scope": "global",
      "memberof": "AnimationState"
    },
    {
      "comment": "/** The list of tracks that currently have animations, which may contain null entries. */",
      "meta": {
        "range": [
          2451,
          2476
        ],
        "filename": "AnimationState.js",
        "lineno": 41,
        "columnno": 8,
        "path": "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist",
        "code": {
          "id": "astnode100012082",
          "name": "this.tracks",
          "type": "NewExpression",
          "value": "",
          "paramnames": []
        }
      },
      "description": "<p>The list of tracks that currently have animations, which may contain null entries.</p>",
      "name": "tracks",
      "longname": "AnimationState#tracks",
      "kind": "member",
      "memberof": "AnimationState",
      "scope": "instance"
    },
    {
      "comment": "/** Multiplier for the delta time when the animation state is updated, causing time for all animations and mixes to play slower\n         * or faster. Defaults to 1.\n         *\n         * See TrackEntry {@link TrackEntry#timeScale} for affecting a single animation. */",
      "meta": {
        "range": [
          2762,
          2780
        ],
        "filename": "AnimationState.js",
        "lineno": 46,
        "columnno": 8,
        "path": "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist",
        "code": {
          "id": "astnode100012089",
          "name": "this.timeScale",
          "type": "Literal",
          "value": 1,
          "paramnames": []
        }
      },
      "description": "<p>Multiplier for the delta time when the animation state is updated, causing time for all animations and mixes to play slower\nor faster. Defaults to 1.</p>\n<p>See TrackEntry {@link TrackEntry#timeScale} for affecting a single animation.</p>",
      "name": "timeScale",
      "longname": "AnimationState#timeScale",
      "kind": "member",
      "memberof": "AnimationState",
      "scope": "instance"
    },
    {
      "comment": "/** Increments each track entry {@link TrackEntry#trackTime()}, setting queued animations as current if needed. */",
      "meta": {
        "range": [
          3232,
          5434
        ],
        "filename": "AnimationState.js",
        "lineno": 57,
        "columnno": 4,
        "path": "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist",
        "code": {
          "id": "astnode100012151",
          "name": "AnimationState#update",
          "type": "MethodDefinition",
          "paramnames": [
            "delta"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "<p>Increments each track entry {@link TrackEntry#trackTime()}, setting queued animations as current if needed.</p>",
      "name": "update",
      "longname": "AnimationState#update",
      "kind": "function",
      "memberof": "AnimationState",
      "scope": "instance",
      "params": []
    },
    {
      "comment": "/** Returns true when all mixing from entries are complete. */",
      "meta": {
        "range": [
          5506,
          6506
        ],
        "filename": "AnimationState.js",
        "lineno": 112,
        "columnno": 4,
        "path": "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist",
        "code": {
          "id": "astnode100012433",
          "name": "AnimationState#updateMixingFrom",
          "type": "MethodDefinition",
          "paramnames": [
            "to",
            "delta"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "<p>Returns true when all mixing from entries are complete.</p>",
      "name": "updateMixingFrom",
      "longname": "AnimationState#updateMixingFrom",
      "kind": "function",
      "memberof": "AnimationState",
      "scope": "instance",
      "params": []
    },
    {
      "comment": "/** Poses the skeleton using the track entry animations. There are no side effects other than invoking listeners, so the\n     * animation state can be applied to multiple skeletons to pose them identically.\n     * @returns True if any animations were applied. */",
      "meta": {
        "range": [
          6778,
          11508
        ],
        "filename": "AnimationState.js",
        "lineno": 138,
        "columnno": 4,
        "path": "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist",
        "code": {
          "id": "astnode100012559",
          "name": "AnimationState#apply",
          "type": "MethodDefinition",
          "paramnames": [
            "skeleton"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "<p>Poses the skeleton using the track entry animations. There are no side effects other than invoking listeners, so the\nanimation state can be applied to multiple skeletons to pose them identically.</p>",
      "returns": [
        {
          "description": "<p>True if any animations were applied.</p>"
        }
      ],
      "name": "apply",
      "longname": "AnimationState#apply",
      "kind": "function",
      "memberof": "AnimationState",
      "scope": "instance",
      "params": []
    },
    {
      "comment": "/** Removes all animations from all tracks, leaving skeletons in their current pose.\n     *\n     * It may be desired to use {@link AnimationState#setEmptyAnimation()} to mix the skeletons back to the setup pose,\n     * rather than leaving them in their current pose. */",
      "meta": {
        "range": [
          20967,
          21291
        ],
        "filename": "AnimationState.js",
        "lineno": 426,
        "columnno": 4,
        "path": "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist",
        "code": {
          "id": "astnode100014155",
          "name": "AnimationState#clearTracks",
          "type": "MethodDefinition",
          "paramnames": []
        },
        "vars": {
          "": null
        }
      },
      "description": "<p>Removes all animations from all tracks, leaving skeletons in their current pose.</p>\n<p>It may be desired to use {@link AnimationState#setEmptyAnimation()} to mix the skeletons back to the setup pose,\nrather than leaving them in their current pose.</p>",
      "name": "clearTracks",
      "longname": "AnimationState#clearTracks",
      "kind": "function",
      "memberof": "AnimationState",
      "scope": "instance",
      "params": []
    },
    {
      "comment": "/** Removes all animations from the track, leaving skeletons in their current pose.\n     *\n     * It may be desired to use {@link AnimationState#setEmptyAnimation()} to mix the skeletons back to the setup pose,\n     * rather than leaving them in their current pose. */",
      "meta": {
        "range": [
          21569,
          22177
        ],
        "filename": "AnimationState.js",
        "lineno": 439,
        "columnno": 4,
        "path": "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist",
        "code": {
          "id": "astnode100014221",
          "name": "AnimationState#clearTrack",
          "type": "MethodDefinition",
          "paramnames": [
            "trackIndex"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "<p>Removes all animations from the track, leaving skeletons in their current pose.</p>\n<p>It may be desired to use {@link AnimationState#setEmptyAnimation()} to mix the skeletons back to the setup pose,\nrather than leaving them in their current pose.</p>",
      "name": "clearTrack",
      "longname": "AnimationState#clearTrack",
      "kind": "function",
      "memberof": "AnimationState",
      "scope": "instance",
      "params": []
    },
    {
      "comment": "/** Sets an animation by name.\n      *\n      * See {@link #setAnimationWith()}. */",
      "meta": {
        "range": [
          22988,
          23287
        ],
        "filename": "AnimationState.js",
        "lineno": 480,
        "columnno": 4,
        "path": "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist",
        "code": {
          "id": "astnode100014422",
          "name": "AnimationState#setAnimation",
          "type": "MethodDefinition",
          "paramnames": [
            "trackIndex",
            "animationName",
            "loop"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "<p>Sets an animation by name.</p>\n<p>See {@link #setAnimationWith()}.</p>",
      "name": "setAnimation",
      "longname": "AnimationState#setAnimation",
      "kind": "function",
      "memberof": "AnimationState",
      "scope": "instance",
      "params": []
    },
    {
      "comment": "/** Sets the current animation for a track, discarding any queued animations. If the formerly current track entry was never\n     * applied to a skeleton, it is replaced (not mixed from).\n     * @param loop If true, the animation will repeat. If false it will not, instead its last frame is applied if played beyond its\n     *           duration. In either case {@link TrackEntry#trackEnd} determines when the track is cleared.\n     * @returns A track entry to allow further customization of animation playback. References to the track entry must not be kept\n     *         after the {@link AnimationStateListener#dispose()} event occurs. */",
      "meta": {
        "range": [
          23937,
          24835
        ],
        "filename": "AnimationState.js",
        "lineno": 492,
        "columnno": 4,
        "path": "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist",
        "code": {
          "id": "astnode100014460",
          "name": "AnimationState#setAnimationWith",
          "type": "MethodDefinition",
          "paramnames": [
            "trackIndex",
            "animation",
            "loop"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "<p>Sets the current animation for a track, discarding any queued animations. If the formerly current track entry was never\napplied to a skeleton, it is replaced (not mixed from).</p>",
      "params": [
        {
          "description": "<p>If true, the animation will repeat. If false it will not, instead its last frame is applied if played beyond its\nduration. In either case {@link TrackEntry#trackEnd} determines when the track is cleared.</p>",
          "name": "loop",
          "defaultvalue": false
        }
      ],
      "returns": [
        {
          "description": "<p>A track entry to allow further customization of animation playback. References to the track entry must not be kept\nafter the {@link AnimationStateListener#dispose()} event occurs.</p>"
        }
      ],
      "name": "setAnimationWith",
      "longname": "AnimationState#setAnimationWith",
      "kind": "function",
      "memberof": "AnimationState",
      "scope": "instance"
    },
    {
      "comment": "/** Queues an animation by name.\n     *\n     * See {@link #addAnimationWith()}. */",
      "meta": {
        "range": [
          24927,
          25244
        ],
        "filename": "AnimationState.js",
        "lineno": 518,
        "columnno": 4,
        "path": "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist",
        "code": {
          "id": "astnode100014575",
          "name": "AnimationState#addAnimation",
          "type": "MethodDefinition",
          "paramnames": [
            "trackIndex",
            "animationName",
            "loop",
            "delay"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "<p>Queues an animation by name.</p>\n<p>See {@link #addAnimationWith()}.</p>",
      "name": "addAnimation",
      "longname": "AnimationState#addAnimation",
      "kind": "function",
      "memberof": "AnimationState",
      "scope": "instance",
      "params": []
    },
    {
      "comment": "/** Adds an animation to be played after the current or last queued animation for a track. If the track is empty, it is\n     * equivalent to calling {@link #setAnimationWith()}.\n     * @param delay If > 0, sets {@link TrackEntry#delay}. If <= 0, the delay set is the duration of the previous track entry\n     *           minus any mix duration (from the {@link AnimationStateData}) plus the specified `delay` (ie the mix\n     *           ends at (`delay` = 0) or before (`delay` < 0) the previous track entry duration). If the\n     *           previous entry is looping, its next loop completion is used instead of its duration.\n     * @returns A track entry to allow further customization of animation playback. References to the track entry must not be kept\n     *         after the {@link AnimationStateListener#dispose()} event occurs. */",
      "meta": {
        "range": [
          26096,
          26824
        ],
        "filename": "AnimationState.js",
        "lineno": 532,
        "columnno": 4,
        "path": "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist",
        "code": {
          "id": "astnode100014617",
          "name": "AnimationState#addAnimationWith",
          "type": "MethodDefinition",
          "paramnames": [
            "trackIndex",
            "animation",
            "loop",
            "delay"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "<p>Adds an animation to be played after the current or last queued animation for a track. If the track is empty, it is\nequivalent to calling {@link #setAnimationWith()}.</p>",
      "params": [
        {
          "description": "<p>If &gt; 0, sets {@link TrackEntry#delay}. If &lt;= 0, the delay set is the duration of the previous track entry\nminus any mix duration (from the {@link AnimationStateData}) plus the specified <code>delay</code> (ie the mix\nends at (<code>delay</code> = 0) or before (<code>delay</code> &lt; 0) the previous track entry duration). If the\nprevious entry is looping, its next loop completion is used instead of its duration.</p>",
          "name": "delay",
          "defaultvalue": 0
        }
      ],
      "returns": [
        {
          "description": "<p>A track entry to allow further customization of animation playback. References to the track entry must not be kept\nafter the {@link AnimationStateListener#dispose()} event occurs.</p>"
        }
      ],
      "name": "addAnimationWith",
      "longname": "AnimationState#addAnimationWith",
      "kind": "function",
      "memberof": "AnimationState",
      "scope": "instance"
    },
    {
      "comment": "/** Sets an empty animation for a track, discarding any queued animations, and sets the track entry's\n     * {@link TrackEntry#mixduration}. An empty animation has no timelines and serves as a placeholder for mixing in or out.\n     *\n     * Mixing out is done by setting an empty animation with a mix duration using either {@link #setEmptyAnimation()},\n     * {@link #setEmptyAnimations()}, or {@link #addEmptyAnimation()}. Mixing to an empty animation causes\n     * the previous animation to be applied less and less over the mix duration. Properties keyed in the previous animation\n     * transition to the value from lower tracks or to the setup pose value if no lower tracks key the property. A mix duration of\n     * 0 still mixes out over one frame.\n     *\n     * Mixing in is done by first setting an empty animation, then adding an animation using\n     * {@link #addAnimation()} and on the returned track entry, set the\n     * {@link TrackEntry#setMixDuration()}. Mixing from an empty animation causes the new animation to be applied more and\n     * more over the mix duration. Properties keyed in the new animation transition from the value from lower tracks or from the\n     * setup pose value if no lower tracks key the property to the value keyed in the new animation. */",
      "meta": {
        "range": [
          28117,
          28367
        ],
        "filename": "AnimationState.js",
        "lineno": 568,
        "columnno": 4,
        "path": "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist",
        "code": {
          "id": "astnode100014723",
          "name": "AnimationState#setEmptyAnimation",
          "type": "MethodDefinition",
          "paramnames": [
            "trackIndex",
            "mixDuration"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "<p>Sets an empty animation for a track, discarding any queued animations, and sets the track entry's\n{@link TrackEntry#mixduration}. An empty animation has no timelines and serves as a placeholder for mixing in or out.</p>\n<p>Mixing out is done by setting an empty animation with a mix duration using either {@link #setEmptyAnimation()},\n{@link #setEmptyAnimations()}, or {@link #addEmptyAnimation()}. Mixing to an empty animation causes\nthe previous animation to be applied less and less over the mix duration. Properties keyed in the previous animation\ntransition to the value from lower tracks or to the setup pose value if no lower tracks key the property. A mix duration of\n0 still mixes out over one frame.</p>\n<p>Mixing in is done by first setting an empty animation, then adding an animation using\n{@link #addAnimation()} and on the returned track entry, set the\n{@link TrackEntry#setMixDuration()}. Mixing from an empty animation causes the new animation to be applied more and\nmore over the mix duration. Properties keyed in the new animation transition from the value from lower tracks or from the\nsetup pose value if no lower tracks key the property to the value keyed in the new animation.</p>",
      "name": "setEmptyAnimation",
      "longname": "AnimationState#setEmptyAnimation",
      "kind": "function",
      "memberof": "AnimationState",
      "scope": "instance",
      "params": []
    },
    {
      "comment": "/** Adds an empty animation to be played after the current or last queued animation for a track, and sets the track entry's\n     * {@link TrackEntry#mixDuration}. If the track is empty, it is equivalent to calling\n     * {@link #setEmptyAnimation()}.\n     *\n     * See {@link #setEmptyAnimation()}.\n     * @param delay If > 0, sets {@link TrackEntry#delay}. If <= 0, the delay set is the duration of the previous track entry\n     *           minus any mix duration plus the specified `delay` (ie the mix ends at (`delay` = 0) or\n     *           before (`delay` < 0) the previous track entry duration). If the previous entry is looping, its next\n     *           loop completion is used instead of its duration.\n     * @return A track entry to allow further customization of animation playback. References to the track entry must not be kept\n     *         after the {@link AnimationStateListener#dispose()} event occurs. */",
      "meta": {
        "range": [
          29301,
          29653
        ],
        "filename": "AnimationState.js",
        "lineno": 585,
        "columnno": 4,
        "path": "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist",
        "code": {
          "id": "astnode100014758",
          "name": "AnimationState#addEmptyAnimation",
          "type": "MethodDefinition",
          "paramnames": [
            "trackIndex",
            "mixDuration",
            "delay"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "<p>Adds an empty animation to be played after the current or last queued animation for a track, and sets the track entry's\n{@link TrackEntry#mixDuration}. If the track is empty, it is equivalent to calling\n{@link #setEmptyAnimation()}.</p>\n<p>See {@link #setEmptyAnimation()}.</p>",
      "params": [
        {
          "description": "<p>If &gt; 0, sets {@link TrackEntry#delay}. If &lt;= 0, the delay set is the duration of the previous track entry\nminus any mix duration plus the specified <code>delay</code> (ie the mix ends at (<code>delay</code> = 0) or\nbefore (<code>delay</code> &lt; 0) the previous track entry duration). If the previous entry is looping, its next\nloop completion is used instead of its duration.</p>",
          "name": "delay",
          "defaultvalue": 0
        }
      ],
      "returns": [
        {
          "description": "<p>A track entry to allow further customization of animation playback. References to the track entry must not be kept\nafter the {@link AnimationStateListener#dispose()} event occurs.</p>"
        }
      ],
      "name": "addEmptyAnimation",
      "longname": "AnimationState#addEmptyAnimation",
      "kind": "function",
      "memberof": "AnimationState",
      "scope": "instance"
    },
    {
      "comment": "/** Sets an empty animation for every track, discarding any queued animations, and mixes to it over the specified mix\n      * duration. */",
      "meta": {
        "range": [
          29801,
          30235
        ],
        "filename": "AnimationState.js",
        "lineno": 595,
        "columnno": 4,
        "path": "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist",
        "code": {
          "id": "astnode100014811",
          "name": "AnimationState#setEmptyAnimations",
          "type": "MethodDefinition",
          "paramnames": [
            "mixDuration"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "<p>Sets an empty animation for every track, discarding any queued animations, and mixes to it over the specified mix\nduration.</p>",
      "name": "setEmptyAnimations",
      "longname": "AnimationState#setEmptyAnimations",
      "kind": "function",
      "memberof": "AnimationState",
      "scope": "instance",
      "params": []
    },
    {
      "comment": "/** @param last May be null. */",
      "meta": {
        "range": [
          30514,
          31572
        ],
        "filename": "AnimationState.js",
        "lineno": 614,
        "columnno": 4,
        "path": "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist",
        "code": {
          "id": "astnode100014929",
          "name": "AnimationState#trackEntry",
          "type": "MethodDefinition",
          "paramnames": [
            "trackIndex",
            "animation",
            "loop",
            "last"
          ]
        },
        "vars": {
          "": null
        }
      },
      "params": [
        {
          "description": "<p>May be null.</p>",
          "name": "last"
        }
      ],
      "name": "trackEntry",
      "longname": "AnimationState#trackEntry",
      "kind": "function",
      "memberof": "AnimationState",
      "scope": "instance"
    },
    {
      "comment": "/** Removes the {@link TrackEntry#getNext() next entry} and all entries after it for the specified entry. */",
      "meta": {
        "range": [
          31690,
          31873
        ],
        "filename": "AnimationState.js",
        "lineno": 645,
        "columnno": 4,
        "path": "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist",
        "code": {
          "id": "astnode100015126",
          "name": "AnimationState#clearNext",
          "type": "MethodDefinition",
          "paramnames": [
            "entry"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "<p>Removes the {@link TrackEntry#getNext() next entry} and all entries after it for the specified entry.</p>",
      "name": "clearNext",
      "longname": "AnimationState#clearNext",
      "kind": "function",
      "memberof": "AnimationState",
      "scope": "instance",
      "params": []
    },
    {
      "comment": "/** Returns the track entry for the animation currently playing on the track, or null if no animation is currently playing. */",
      "meta": {
        "range": [
          34226,
          34367
        ],
        "filename": "AnimationState.js",
        "lineno": 709,
        "columnno": 4,
        "path": "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist",
        "code": {
          "id": "astnode100015462",
          "name": "AnimationState#getCurrent",
          "type": "MethodDefinition",
          "paramnames": [
            "trackIndex"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "<p>Returns the track entry for the animation currently playing on the track, or null if no animation is currently playing.</p>",
      "name": "getCurrent",
      "longname": "AnimationState#getCurrent",
      "kind": "function",
      "memberof": "AnimationState",
      "scope": "instance",
      "params": []
    },
    {
      "comment": "/** Adds a listener to receive events for all track entries. */",
      "meta": {
        "range": [
          34440,
          34588
        ],
        "filename": "AnimationState.js",
        "lineno": 715,
        "columnno": 4,
        "path": "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist",
        "code": {
          "id": "astnode100015483",
          "name": "AnimationState#addListener",
          "type": "MethodDefinition",
          "paramnames": [
            "listener"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "<p>Adds a listener to receive events for all track entries.</p>",
      "name": "addListener",
      "longname": "AnimationState#addListener",
      "kind": "function",
      "memberof": "AnimationState",
      "scope": "instance",
      "params": []
    },
    {
      "comment": "/** Removes the listener added with {@link #addListener()}. */",
      "meta": {
        "range": [
          34660,
          34815
        ],
        "filename": "AnimationState.js",
        "lineno": 721,
        "columnno": 4,
        "path": "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist",
        "code": {
          "id": "astnode100015503",
          "name": "AnimationState#removeListener",
          "type": "MethodDefinition",
          "paramnames": [
            "listener"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "<p>Removes the listener added with {@link #addListener()}.</p>",
      "name": "removeListener",
      "longname": "AnimationState#removeListener",
      "kind": "function",
      "memberof": "AnimationState",
      "scope": "instance",
      "params": []
    },
    {
      "comment": "/** Removes all listeners added with {@link #addListener()}. */",
      "meta": {
        "range": [
          34888,
          34947
        ],
        "filename": "AnimationState.js",
        "lineno": 727,
        "columnno": 4,
        "path": "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist",
        "code": {
          "id": "astnode100015531",
          "name": "AnimationState#clearListeners",
          "type": "MethodDefinition",
          "paramnames": []
        },
        "vars": {
          "": null
        }
      },
      "description": "<p>Removes all listeners added with {@link #addListener()}.</p>",
      "name": "clearListeners",
      "longname": "AnimationState#clearListeners",
      "kind": "function",
      "memberof": "AnimationState",
      "scope": "instance",
      "params": []
    },
    {
      "comment": "/** Discards all listener notifications that have not yet been delivered. This can be useful to call from an\n     * {@link AnimationStateListener} when it is known that further notifications that may have been already queued for delivery\n     * are not wanted because new animations are being set. */",
      "meta": {
        "range": [
          35257,
          35321
        ],
        "filename": "AnimationState.js",
        "lineno": 733,
        "columnno": 4,
        "path": "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist",
        "code": {
          "id": "astnode100015543",
          "name": "AnimationState#clearListenerNotifications",
          "type": "MethodDefinition",
          "paramnames": []
        },
        "vars": {
          "": null
        }
      },
      "description": "<p>Discards all listener notifications that have not yet been delivered. This can be useful to call from an\n{@link AnimationStateListener} when it is known that further notifications that may have been already queued for delivery\nare not wanted because new animations are being set.</p>",
      "name": "clearListenerNotifications",
      "longname": "AnimationState#clearListenerNotifications",
      "kind": "function",
      "memberof": "AnimationState",
      "scope": "instance",
      "params": []
    },
    {
      "comment": "/** Stores settings and other state for the playback of an animation on an {@link AnimationState} track.\n *\n * References to a track entry must not be kept after the {@link AnimationStateListener#dispose()} event occurs. */",
      "meta": {
        "range": [
          35614,
          47465
        ],
        "filename": "AnimationState.js",
        "lineno": 741,
        "columnno": 0,
        "path": "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist",
        "code": {
          "id": "astnode100015564",
          "name": "exports.TrackEntry",
          "type": "ClassDeclaration"
        }
      },
      "name": "TrackEntry",
      "longname": "TrackEntry",
      "kind": "class",
      "classdesc": "<p>Stores settings and other state for the playback of an animation on an {@link AnimationState} track.</p>\n<p>References to a track entry must not be kept after the {@link AnimationStateListener#dispose()} event occurs.</p>",
      "scope": "global",
      "memberof": "TrackEntry"
    },
    {
      "comment": "/** The animation to apply for this track entry. */",
      "meta": {
        "range": [
          35728,
          35749
        ],
        "filename": "AnimationState.js",
        "lineno": 744,
        "columnno": 8,
        "path": "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist",
        "code": {
          "id": "astnode100015573",
          "name": "this.animation",
          "type": "Literal",
          "value": null,
          "paramnames": []
        }
      },
      "description": "<p>The animation to apply for this track entry.</p>",
      "name": "animation",
      "longname": "TrackEntry#animation",
      "kind": "member",
      "memberof": "TrackEntry",
      "scope": "instance"
    },
    {
      "comment": "/** The animation queued to start after this animation, or null. `next` makes up a linked list. */",
      "meta": {
        "range": [
          35896,
          35912
        ],
        "filename": "AnimationState.js",
        "lineno": 747,
        "columnno": 8,
        "path": "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist",
        "code": {
          "id": "astnode100015585",
          "name": "this.next",
          "type": "Literal",
          "value": null,
          "paramnames": []
        }
      },
      "description": "<p>The animation queued to start after this animation, or null. <code>next</code> makes up a linked list.</p>",
      "name": "next",
      "longname": "TrackEntry#next",
      "kind": "member",
      "memberof": "TrackEntry",
      "scope": "instance"
    },
    {
      "comment": "/** The track entry for the previous animation when mixing from the previous animation to this animation, or null if no\n         * mixing is currently occuring. When mixing from multiple animations, `mixingFrom` makes up a linked list. */",
      "meta": {
        "range": [
          36169,
          36191
        ],
        "filename": "AnimationState.js",
        "lineno": 750,
        "columnno": 8,
        "path": "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist",
        "code": {
          "id": "astnode100015591",
          "name": "this.mixingFrom",
          "type": "Literal",
          "value": null,
          "paramnames": []
        }
      },
      "description": "<p>The track entry for the previous animation when mixing from the previous animation to this animation, or null if no\nmixing is currently occuring. When mixing from multiple animations, <code>mixingFrom</code> makes up a linked list.</p>",
      "name": "mixingFrom",
      "longname": "TrackEntry#mixingFrom",
      "kind": "member",
      "memberof": "TrackEntry",
      "scope": "instance"
    },
    {
      "comment": "/** The track entry for the next animation when mixing from this animation to the next animation, or null if no mixing is\n         * currently occuring. When mixing to multiple animations, `mixingTo` makes up a linked list. */",
      "meta": {
        "range": [
          36436,
          36456
        ],
        "filename": "AnimationState.js",
        "lineno": 753,
        "columnno": 8,
        "path": "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist",
        "code": {
          "id": "astnode100015597",
          "name": "this.mixingTo",
          "type": "Literal",
          "value": null,
          "paramnames": []
        }
      },
      "description": "<p>The track entry for the next animation when mixing from this animation to the next animation, or null if no mixing is\ncurrently occuring. When mixing to multiple animations, <code>mixingTo</code> makes up a linked list.</p>",
      "name": "mixingTo",
      "longname": "TrackEntry#mixingTo",
      "kind": "member",
      "memberof": "TrackEntry",
      "scope": "instance"
    },
    {
      "comment": "/** The listener for events generated by this track entry, or null.\n         *\n         * A track entry returned from {@link AnimationState#setAnimation()} is already the current animation\n         * for the track, so the track entry listener {@link AnimationStateListener#start()} will not be called. */",
      "meta": {
        "range": [
          36779,
          36799
        ],
        "filename": "AnimationState.js",
        "lineno": 758,
        "columnno": 8,
        "path": "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist",
        "code": {
          "id": "astnode100015603",
          "name": "this.listener",
          "type": "Literal",
          "value": null,
          "paramnames": []
        }
      },
      "description": "<p>The listener for events generated by this track entry, or null.</p>\n<p>A track entry returned from {@link AnimationState#setAnimation()} is already the current animation\nfor the track, so the track entry listener {@link AnimationStateListener#start()} will not be called.</p>",
      "name": "listener",
      "longname": "TrackEntry#listener",
      "kind": "member",
      "memberof": "TrackEntry",
      "scope": "instance"
    },
    {
      "comment": "/** The index of the track where this track entry is either current or queued.\n         *\n         * See {@link AnimationState#getCurrent()}. */",
      "meta": {
        "range": [
          36962,
          36981
        ],
        "filename": "AnimationState.js",
        "lineno": 762,
        "columnno": 8,
        "path": "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist",
        "code": {
          "id": "astnode100015609",
          "name": "this.trackIndex",
          "type": "Literal",
          "value": 0,
          "paramnames": []
        }
      },
      "description": "<p>The index of the track where this track entry is either current or queued.</p>\n<p>See {@link AnimationState#getCurrent()}.</p>",
      "name": "trackIndex",
      "longname": "TrackEntry#trackIndex",
      "kind": "member",
      "memberof": "TrackEntry",
      "scope": "instance"
    },
    {
      "comment": "/** If true, the animation will repeat. If false it will not, instead its last frame is applied if played beyond its\n         * duration. */",
      "meta": {
        "range": [
          37140,
          37157
        ],
        "filename": "AnimationState.js",
        "lineno": 765,
        "columnno": 8,
        "path": "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist",
        "code": {
          "id": "astnode100015615",
          "name": "this.loop",
          "type": "Literal",
          "value": false,
          "paramnames": []
        }
      },
      "description": "<p>If true, the animation will repeat. If false it will not, instead its last frame is applied if played beyond its\nduration.</p>",
      "name": "loop",
      "longname": "TrackEntry#loop",
      "kind": "member",
      "memberof": "TrackEntry",
      "scope": "instance"
    },
    {
      "comment": "/** If true, when mixing from the previous animation to this animation, the previous animation is applied as normal instead\n         * of being mixed out.\n         *\n         * When mixing between animations that key the same property, if a lower track also keys that property then the value will\n         * briefly dip toward the lower track value during the mix. This happens because the first animation mixes from 100% to 0%\n         * while the second animation mixes from 0% to 100%. Setting `holdPrevious` to true applies the first animation\n         * at 100% during the mix so the lower track value is overwritten. Such dipping does not occur on the lowest track which\n         * keys the property, only when a higher track also keys the property.\n         *\n         * Snapping will occur if `holdPrevious` is true and this animation does not key all the same properties as the\n         * previous animation. */",
      "meta": {
        "range": [
          38096,
          38121
        ],
        "filename": "AnimationState.js",
        "lineno": 777,
        "columnno": 8,
        "path": "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist",
        "code": {
          "id": "astnode100015621",
          "name": "this.holdPrevious",
          "type": "Literal",
          "value": false,
          "paramnames": []
        }
      },
      "description": "<p>If true, when mixing from the previous animation to this animation, the previous animation is applied as normal instead\nof being mixed out.</p>\n<p>When mixing between animations that key the same property, if a lower track also keys that property then the value will\nbriefly dip toward the lower track value during the mix. This happens because the first animation mixes from 100% to 0%\nwhile the second animation mixes from 0% to 100%. Setting <code>holdPrevious</code> to true applies the first animation\nat 100% during the mix so the lower track value is overwritten. Such dipping does not occur on the lowest track which\nkeys the property, only when a higher track also keys the property.</p>\n<p>Snapping will occur if <code>holdPrevious</code> is true and this animation does not key all the same properties as the\nprevious animation.</p>",
      "name": "holdPrevious",
      "longname": "TrackEntry#holdPrevious",
      "kind": "member",
      "memberof": "TrackEntry",
      "scope": "instance"
    },
    {
      "comment": "/** When the mix percentage ({@link #mixTime} / {@link #mixDuration}) is less than the\n         * `eventThreshold`, event timelines are applied while this animation is being mixed out. Defaults to 0, so event\n         * timelines are not applied while this animation is being mixed out. */",
      "meta": {
        "range": [
          38498,
          38521
        ],
        "filename": "AnimationState.js",
        "lineno": 783,
        "columnno": 8,
        "path": "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist",
        "code": {
          "id": "astnode100015639",
          "name": "this.eventThreshold",
          "type": "Literal",
          "value": 0,
          "paramnames": []
        }
      },
      "description": "<p>When the mix percentage ({@link #mixTime} / {@link #mixDuration}) is less than the\n<code>eventThreshold</code>, event timelines are applied while this animation is being mixed out. Defaults to 0, so event\ntimelines are not applied while this animation is being mixed out.</p>",
      "name": "eventThreshold",
      "longname": "TrackEntry#eventThreshold",
      "kind": "member",
      "memberof": "TrackEntry",
      "scope": "instance"
    },
    {
      "comment": "/** When the mix percentage ({@link #mixtime} / {@link #mixDuration}) is less than the\n         * `attachmentThreshold`, attachment timelines are applied while this animation is being mixed out. Defaults to\n         * 0, so attachment timelines are not applied while this animation is being mixed out. */",
      "meta": {
        "range": [
          38844,
          38872
        ],
        "filename": "AnimationState.js",
        "lineno": 787,
        "columnno": 8,
        "path": "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist",
        "code": {
          "id": "astnode100015645",
          "name": "this.attachmentThreshold",
          "type": "Literal",
          "value": 0,
          "paramnames": []
        }
      },
      "description": "<p>When the mix percentage ({@link #mixtime} / {@link #mixDuration}) is less than the\n<code>attachmentThreshold</code>, attachment timelines are applied while this animation is being mixed out. Defaults to\n0, so attachment timelines are not applied while this animation is being mixed out.</p>",
      "name": "attachmentThreshold",
      "longname": "TrackEntry#attachmentThreshold",
      "kind": "member",
      "memberof": "TrackEntry",
      "scope": "instance"
    },
    {
      "comment": "/** When the mix percentage ({@link #mixTime} / {@link #mixDuration}) is less than the\n         * `drawOrderThreshold`, draw order timelines are applied while this animation is being mixed out. Defaults to 0,\n         * so draw order timelines are not applied while this animation is being mixed out. */",
      "meta": {
        "range": [
          39194,
          39221
        ],
        "filename": "AnimationState.js",
        "lineno": 791,
        "columnno": 8,
        "path": "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist",
        "code": {
          "id": "astnode100015651",
          "name": "this.drawOrderThreshold",
          "type": "Literal",
          "value": 0,
          "paramnames": []
        }
      },
      "description": "<p>When the mix percentage ({@link #mixTime} / {@link #mixDuration}) is less than the\n<code>drawOrderThreshold</code>, draw order timelines are applied while this animation is being mixed out. Defaults to 0,\nso draw order timelines are not applied while this animation is being mixed out.</p>",
      "name": "drawOrderThreshold",
      "longname": "TrackEntry#drawOrderThreshold",
      "kind": "member",
      "memberof": "TrackEntry",
      "scope": "instance"
    },
    {
      "comment": "/** Seconds when this animation starts, both initially and after looping. Defaults to 0.\n         *\n         * When changing the `animationStart` time, it often makes sense to set {@link #animationLast} to the same\n         * value to prevent timeline keys before the start time from triggering. */",
      "meta": {
        "range": [
          39538,
          39561
        ],
        "filename": "AnimationState.js",
        "lineno": 796,
        "columnno": 8,
        "path": "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist",
        "code": {
          "id": "astnode100015657",
          "name": "this.animationStart",
          "type": "Literal",
          "value": 0,
          "paramnames": []
        }
      },
      "description": "<p>Seconds when this animation starts, both initially and after looping. Defaults to 0.</p>\n<p>When changing the <code>animationStart</code> time, it often makes sense to set {@link #animationLast} to the same\nvalue to prevent timeline keys before the start time from triggering.</p>",
      "name": "animationStart",
      "longname": "TrackEntry#animationStart",
      "kind": "member",
      "memberof": "TrackEntry",
      "scope": "instance"
    },
    {
      "comment": "/** Seconds for the last frame of this animation. Non-looping animations won't play past this time. Looping animations will\n         * loop back to {@link #animationStart} at this time. Defaults to the animation {@link Animation#duration}. */",
      "meta": {
        "range": [
          39822,
          39843
        ],
        "filename": "AnimationState.js",
        "lineno": 799,
        "columnno": 8,
        "path": "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist",
        "code": {
          "id": "astnode100015663",
          "name": "this.animationEnd",
          "type": "Literal",
          "value": 0,
          "paramnames": []
        }
      },
      "description": "<p>Seconds for the last frame of this animation. Non-looping animations won't play past this time. Looping animations will\nloop back to {@link #animationStart} at this time. Defaults to the animation {@link Animation#duration}.</p>",
      "name": "animationEnd",
      "longname": "TrackEntry#animationEnd",
      "kind": "member",
      "memberof": "TrackEntry",
      "scope": "instance"
    },
    {
      "comment": "/** The time in seconds this animation was last applied. Some timelines use this for one-time triggers. Eg, when this\n         * animation is applied, event timelines will fire all events between the `animationLast` time (exclusive) and\n         * `animationTime` (inclusive). Defaults to -1 to ensure triggers on frame 0 happen the first time this animation\n         * is applied. */",
      "meta": {
        "range": [
          40246,
          40268
        ],
        "filename": "AnimationState.js",
        "lineno": 804,
        "columnno": 8,
        "path": "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist",
        "code": {
          "id": "astnode100015669",
          "name": "this.animationLast",
          "type": "Literal",
          "value": 0,
          "paramnames": []
        }
      },
      "description": "<p>The time in seconds this animation was last applied. Some timelines use this for one-time triggers. Eg, when this\nanimation is applied, event timelines will fire all events between the <code>animationLast</code> time (exclusive) and\n<code>animationTime</code> (inclusive). Defaults to -1 to ensure triggers on frame 0 happen the first time this animation\nis applied.</p>",
      "name": "animationLast",
      "longname": "TrackEntry#animationLast",
      "kind": "member",
      "memberof": "TrackEntry",
      "scope": "instance"
    },
    {
      "comment": "/** Seconds to postpone playing the animation. When this track entry is the current track entry, `delay`\n         * postpones incrementing the {@link #trackTime}. When this track entry is queued, `delay` is the time from\n         * the start of the previous animation to when this track entry will become the current track entry (ie when the previous\n         * track entry {@link TrackEntry#trackTime} >= this track entry's `delay`).\n         *\n         * {@link #timeScale} affects the delay. */",
      "meta": {
        "range": [
          40820,
          40834
        ],
        "filename": "AnimationState.js",
        "lineno": 812,
        "columnno": 8,
        "path": "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist",
        "code": {
          "id": "astnode100015681",
          "name": "this.delay",
          "type": "Literal",
          "value": 0,
          "paramnames": []
        }
      },
      "description": "<p>Seconds to postpone playing the animation. When this track entry is the current track entry, <code>delay</code>\npostpones incrementing the {@link #trackTime}. When this track entry is queued, <code>delay</code> is the time from\nthe start of the previous animation to when this track entry will become the current track entry (ie when the previous\ntrack entry {@link TrackEntry#trackTime} &gt;= this track entry's <code>delay</code>).</p>\n<p>{@link #timeScale} affects the delay.</p>",
      "name": "delay",
      "longname": "TrackEntry#delay",
      "kind": "member",
      "memberof": "TrackEntry",
      "scope": "instance"
    },
    {
      "comment": "/** Current time in seconds this track entry has been the current track entry. The track time determines\n         * {@link #animationTime}. The track time can be set to start the animation at a time other than 0, without affecting\n         * looping. */",
      "meta": {
        "range": [
          41106,
          41124
        ],
        "filename": "AnimationState.js",
        "lineno": 816,
        "columnno": 8,
        "path": "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist",
        "code": {
          "id": "astnode100015687",
          "name": "this.trackTime",
          "type": "Literal",
          "value": 0,
          "paramnames": []
        }
      },
      "description": "<p>Current time in seconds this track entry has been the current track entry. The track time determines\n{@link #animationTime}. The track time can be set to start the animation at a time other than 0, without affecting\nlooping.</p>",
      "name": "trackTime",
      "longname": "TrackEntry#trackTime",
      "kind": "member",
      "memberof": "TrackEntry",
      "scope": "instance"
    },
    {
      "comment": "/** The track time in seconds when this animation will be removed from the track. Defaults to the highest possible float\n         * value, meaning the animation will be applied until a new animation is set or the track is cleared. If the track end time\n         * is reached, no other animations are queued for playback, and mixing from any previous animations is complete, then the\n         * properties keyed by the animation are set to the setup pose and the track is cleared.\n         *\n         * It may be desired to use {@link AnimationState#addEmptyAnimation()} rather than have the animation\n         * abruptly cease being applied. */",
      "meta": {
        "range": [
          41847,
          41864
        ],
        "filename": "AnimationState.js",
        "lineno": 826,
        "columnno": 8,
        "path": "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist",
        "code": {
          "id": "astnode100015705",
          "name": "this.trackEnd",
          "type": "Literal",
          "value": 0,
          "paramnames": []
        }
      },
      "description": "<p>The track time in seconds when this animation will be removed from the track. Defaults to the highest possible float\nvalue, meaning the animation will be applied until a new animation is set or the track is cleared. If the track end time\nis reached, no other animations are queued for playback, and mixing from any previous animations is complete, then the\nproperties keyed by the animation are set to the setup pose and the track is cleared.</p>\n<p>It may be desired to use {@link AnimationState#addEmptyAnimation()} rather than have the animation\nabruptly cease being applied.</p>",
      "name": "trackEnd",
      "longname": "TrackEntry#trackEnd",
      "kind": "member",
      "memberof": "TrackEntry",
      "scope": "instance"
    },
    {
      "comment": "/** Multiplier for the delta time when this track entry is updated, causing time for this animation to pass slower or\n         * faster. Defaults to 1.\n         *\n         * {@link #mixTime} is not affected by track entry time scale, so {@link #mixDuration} may need to be adjusted to\n         * match the animation speed.\n         *\n         * When using {@link AnimationState#addAnimation()} with a `delay` <= 0, note the\n         * {@link #delay} is set using the mix duration from the {@link AnimationStateData}, assuming time scale to be 1. If\n         * the time scale is not 1, the delay may need to be adjusted.\n         *\n         * See AnimationState {@link AnimationState#timeScale} for affecting all animations. */",
      "meta": {
        "range": [
          42609,
          42627
        ],
        "filename": "AnimationState.js",
        "lineno": 838,
        "columnno": 8,
        "path": "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist",
        "code": {
          "id": "astnode100015711",
          "name": "this.timeScale",
          "type": "Literal",
          "value": 0,
          "paramnames": []
        }
      },
      "description": "<p>Multiplier for the delta time when this track entry is updated, causing time for this animation to pass slower or\nfaster. Defaults to 1.</p>\n<p>{@link #mixTime} is not affected by track entry time scale, so {@link #mixDuration} may need to be adjusted to\nmatch the animation speed.</p>\n<p>When using {@link AnimationState#addAnimation()} with a <code>delay</code> &lt;= 0, note the\n{@link #delay} is set using the mix duration from the {@link AnimationStateData}, assuming time scale to be 1. If\nthe time scale is not 1, the delay may need to be adjusted.</p>\n<p>See AnimationState {@link AnimationState#timeScale} for affecting all animations.</p>",
      "name": "timeScale",
      "longname": "TrackEntry#timeScale",
      "kind": "member",
      "memberof": "TrackEntry",
      "scope": "instance"
    },
    {
      "comment": "/** Values < 1 mix this animation with the skeleton's current pose (usually the pose resulting from lower tracks). Defaults\n         * to 1, which overwrites the skeleton's current pose with this animation.\n         *\n         * Typically track 0 is used to completely pose the skeleton, then alpha is used on higher tracks. It doesn't make sense to\n         * use alpha on track 0 if the skeleton pose is from the last frame render. */",
      "meta": {
        "range": [
          43082,
          43096
        ],
        "filename": "AnimationState.js",
        "lineno": 844,
        "columnno": 8,
        "path": "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist",
        "code": {
          "id": "astnode100015717",
          "name": "this.alpha",
          "type": "Literal",
          "value": 0,
          "paramnames": []
        }
      },
      "description": "<p>Values &lt; 1 mix this animation with the skeleton's current pose (usually the pose resulting from lower tracks). Defaults\nto 1, which overwrites the skeleton's current pose with this animation.</p>\n<p>Typically track 0 is used to completely pose the skeleton, then alpha is used on higher tracks. It doesn't make sense to\nuse alpha on track 0 if the skeleton pose is from the last frame render.</p>",
      "name": "alpha",
      "longname": "TrackEntry#alpha",
      "kind": "member",
      "memberof": "TrackEntry",
      "scope": "instance"
    },
    {
      "comment": "/** Seconds from 0 to the {@link #getMixDuration()} when mixing from the previous animation to this animation. May be\n         * slightly more than `mixDuration` when the mix is complete. */",
      "meta": {
        "range": [
          43305,
          43321
        ],
        "filename": "AnimationState.js",
        "lineno": 847,
        "columnno": 8,
        "path": "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist",
        "code": {
          "id": "astnode100015723",
          "name": "this.mixTime",
          "type": "Literal",
          "value": 0,
          "paramnames": []
        }
      },
      "description": "<p>Seconds from 0 to the {@link #getMixDuration()} when mixing from the previous animation to this animation. May be\nslightly more than <code>mixDuration</code> when the mix is complete.</p>",
      "name": "mixTime",
      "longname": "TrackEntry#mixTime",
      "kind": "member",
      "memberof": "TrackEntry",
      "scope": "instance"
    },
    {
      "comment": "/** Seconds for mixing from the previous animation to this animation. Defaults to the value provided by AnimationStateData\n         * {@link AnimationStateData#getMix()} based on the animation before this animation (if any).\n         *\n         * A mix duration of 0 still mixes out over one frame to provide the track entry being mixed out a chance to revert the\n         * properties it was animating.\n         *\n         * The `mixDuration` can be set manually rather than use the value from\n         * {@link AnimationStateData#getMix()}. In that case, the `mixDuration` can be set for a new\n         * track entry only before {@link AnimationState#update(float)} is first called.\n         *\n         * When using {@link AnimationState#addAnimation()} with a `delay` <= 0, note the\n         * {@link #delay} is set using the mix duration from the {@link AnimationStateData}, not a mix duration set\n         * afterward. */",
      "meta": {
        "range": [
          44266,
          44286
        ],
        "filename": "AnimationState.js",
        "lineno": 861,
        "columnno": 8,
        "path": "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist",
        "code": {
          "id": "astnode100015729",
          "name": "this.mixDuration",
          "type": "Literal",
          "value": 0,
          "paramnames": []
        }
      },
      "description": "<p>Seconds for mixing from the previous animation to this animation. Defaults to the value provided by AnimationStateData\n{@link AnimationStateData#getMix()} based on the animation before this animation (if any).</p>\n<p>A mix duration of 0 still mixes out over one frame to provide the track entry being mixed out a chance to revert the\nproperties it was animating.</p>\n<p>The <code>mixDuration</code> can be set manually rather than use the value from\n{@link AnimationStateData#getMix()}. In that case, the <code>mixDuration</code> can be set for a new\ntrack entry only before {@link AnimationState#update(float)} is first called.</p>\n<p>When using {@link AnimationState#addAnimation()} with a <code>delay</code> &lt;= 0, note the\n{@link #delay} is set using the mix duration from the {@link AnimationStateData}, not a mix duration set\nafterward.</p>",
      "name": "mixDuration",
      "longname": "TrackEntry#mixDuration",
      "kind": "member",
      "memberof": "TrackEntry",
      "scope": "instance"
    },
    {
      "comment": "/** Controls how properties keyed in the animation are mixed with lower tracks. Defaults to {@link MixBlend#replace}, which\n         * replaces the values from the lower tracks with the animation values. {@link MixBlend#add} adds the animation values to\n         * the values from the lower tracks.\n         *\n         * The `mixBlend` can be set for a new track entry only before {@link AnimationState#apply()} is first\n         * called. */",
      "meta": {
        "range": [
          44809,
          44841
        ],
        "filename": "AnimationState.js",
        "lineno": 870,
        "columnno": 8,
        "path": "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist",
        "code": {
          "id": "astnode100015747",
          "name": "this.mixBlend",
          "type": "MemberExpression",
          "value": "MixBlend.replace",
          "paramnames": []
        }
      },
      "description": "<p>Controls how properties keyed in the animation are mixed with lower tracks. Defaults to {@link MixBlend#replace}, which\nreplaces the values from the lower tracks with the animation values. {@link MixBlend#add} adds the animation values to\nthe values from the lower tracks.</p>\n<p>The <code>mixBlend</code> can be set for a new track entry only before {@link AnimationState#apply()} is first\ncalled.</p>",
      "name": "mixBlend",
      "longname": "TrackEntry#mixBlend",
      "kind": "member",
      "memberof": "TrackEntry",
      "scope": "instance"
    },
    {
      "comment": "/** Uses {@link #trackTime} to compute the `animationTime`, which is between {@link #animationStart}\n     * and {@link #animationEnd}. When the `trackTime` is 0, the `animationTime` is equal to the\n     * `animationStart` time. */",
      "meta": {
        "range": [
          45540,
          45896
        ],
        "filename": "AnimationState.js",
        "lineno": 889,
        "columnno": 4,
        "path": "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist",
        "code": {
          "id": "astnode100015839",
          "name": "TrackEntry#getAnimationTime",
          "type": "MethodDefinition",
          "paramnames": []
        },
        "vars": {
          "": null
        }
      },
      "description": "<p>Uses {@link #trackTime} to compute the <code>animationTime</code>, which is between {@link #animationStart}\nand {@link #animationEnd}. When the <code>trackTime</code> is 0, the <code>animationTime</code> is equal to the\n<code>animationStart</code> time.</p>",
      "name": "getAnimationTime",
      "longname": "TrackEntry#getAnimationTime",
      "kind": "function",
      "memberof": "TrackEntry",
      "scope": "instance",
      "params": []
    },
    {
      "comment": "/** Returns true if at least one loop has been completed.\n     *\n     * See {@link AnimationStateListener#complete()}. */",
      "meta": {
        "range": [
          46163,
          46257
        ],
        "filename": "AnimationState.js",
        "lineno": 905,
        "columnno": 4,
        "path": "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist",
        "code": {
          "id": "astnode100015908",
          "name": "TrackEntry#isComplete",
          "type": "MethodDefinition",
          "paramnames": []
        },
        "vars": {
          "": null
        }
      },
      "description": "<p>Returns true if at least one loop has been completed.</p>\n<p>See {@link AnimationStateListener#complete()}.</p>",
      "name": "isComplete",
      "longname": "TrackEntry#isComplete",
      "kind": "function",
      "memberof": "TrackEntry",
      "scope": "instance",
      "params": []
    },
    {
      "comment": "/** Resets the rotation directions for mixing this entry's rotate timelines. This can be useful to avoid bones rotating the\n     * long way around when using {@link #alpha} and starting animations on other tracks.\n     *\n     * Mixing with {@link MixBlend#replace} involves finding a rotation between two others, which has two possible solutions:\n     * the short way or the long way around. The two rotations likely change over time, so which direction is the short or long\n     * way also changes. If the short way was always chosen, bones would flip to the other side when that direction became the\n     * long way. TrackEntry chooses the short way the first time it is applied and remembers that direction. */",
      "meta": {
        "range": [
          46980,
          47056
        ],
        "filename": "AnimationState.js",
        "lineno": 915,
        "columnno": 4,
        "path": "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist",
        "code": {
          "id": "astnode100015924",
          "name": "TrackEntry#resetRotationDirections",
          "type": "MethodDefinition",
          "paramnames": []
        },
        "vars": {
          "": null
        }
      },
      "description": "<p>Resets the rotation directions for mixing this entry's rotate timelines. This can be useful to avoid bones rotating the\nlong way around when using {@link #alpha} and starting animations on other tracks.</p>\n<p>Mixing with {@link MixBlend#replace} involves finding a rotation between two others, which has two possible solutions:\nthe short way or the long way around. The two rotations likely change over time, so which direction is the short or long\nway also changes. If the short way was always chosen, bones would flip to the other side when that direction became the\nlong way. TrackEntry chooses the short way the first time it is applied and remembers that direction.</p>",
      "name": "resetRotationDirections",
      "longname": "TrackEntry#resetRotationDirections",
      "kind": "function",
      "memberof": "TrackEntry",
      "scope": "instance",
      "params": []
    },
    {
      "comment": "/** 1. A previously applied timeline has set this property.\n *\n * Result: Mix from the current pose to the timeline pose. */",
      "meta": {
        "range": [
          52295,
          52323
        ],
        "filename": "AnimationState.js",
        "lineno": 1063,
        "columnno": 0,
        "path": "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist",
        "code": {
          "id": "astnode100016696",
          "name": "exports.SUBSEQUENT",
          "type": "VariableDeclaration"
        }
      },
      "description": "<ol>\n<li>A previously applied timeline has set this property.</li>\n</ol>\n<p>Result: Mix from the current pose to the timeline pose.</p>",
      "name": "SUBSEQUENT",
      "longname": "SUBSEQUENT",
      "kind": "constant",
      "scope": "global"
    },
    {
      "comment": "/** 1. This is the first timeline to set this property.\n * 2. The next track entry applied after this one does not have a timeline to set this property.\n *\n * Result: Mix from the setup pose to the timeline pose. */",
      "meta": {
        "range": [
          52540,
          52563
        ],
        "filename": "AnimationState.js",
        "lineno": 1068,
        "columnno": 0,
        "path": "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist",
        "code": {
          "id": "astnode100016701",
          "name": "exports.FIRST",
          "type": "VariableDeclaration"
        }
      },
      "description": "<ol>\n<li>This is the first timeline to set this property.</li>\n<li>The next track entry applied after this one does not have a timeline to set this property.</li>\n</ol>\n<p>Result: Mix from the setup pose to the timeline pose.</p>",
      "name": "FIRST",
      "longname": "FIRST",
      "kind": "constant",
      "scope": "global"
    },
    {
      "comment": "/** 1) A previously applied timeline has set this property.<br>\n * 2) The next track entry to be applied does have a timeline to set this property.<br>\n * 3) The next track entry after that one does not have a timeline to set this property.<br>\n * Result: Mix from the current pose to the timeline pose, but do not mix out. This avoids \"dipping\" when crossfading\n * animations that key the same property. A subsequent timeline will set this property using a mix. */",
      "meta": {
        "range": [
          53030,
          53063
        ],
        "filename": "AnimationState.js",
        "lineno": 1074,
        "columnno": 0,
        "path": "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist",
        "code": {
          "id": "astnode100016706",
          "name": "exports.HOLD_SUBSEQUENT",
          "type": "VariableDeclaration"
        }
      },
      "description": "<ol>\n<li>A previously applied timeline has set this property.<br></li>\n<li>The next track entry to be applied does have a timeline to set this property.<br></li>\n<li>The next track entry after that one does not have a timeline to set this property.<br>\nResult: Mix from the current pose to the timeline pose, but do not mix out. This avoids &quot;dipping&quot; when crossfading\nanimations that key the same property. A subsequent timeline will set this property using a mix.</li>\n</ol>",
      "name": "HOLD_SUBSEQUENT",
      "longname": "HOLD_SUBSEQUENT",
      "kind": "constant",
      "scope": "global"
    },
    {
      "comment": "/** 1) This is the first timeline to set this property.<br>\n * 2) The next track entry to be applied does have a timeline to set this property.<br>\n * 3) The next track entry after that one does not have a timeline to set this property.<br>\n * Result: Mix from the setup pose to the timeline pose, but do not mix out. This avoids \"dipping\" when crossfading animations\n * that key the same property. A subsequent timeline will set this property using a mix. */",
      "meta": {
        "range": [
          53524,
          53552
        ],
        "filename": "AnimationState.js",
        "lineno": 1080,
        "columnno": 0,
        "path": "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist",
        "code": {
          "id": "astnode100016711",
          "name": "exports.HOLD_FIRST",
          "type": "VariableDeclaration"
        }
      },
      "description": "<ol>\n<li>This is the first timeline to set this property.<br></li>\n<li>The next track entry to be applied does have a timeline to set this property.<br></li>\n<li>The next track entry after that one does not have a timeline to set this property.<br>\nResult: Mix from the setup pose to the timeline pose, but do not mix out. This avoids &quot;dipping&quot; when crossfading animations\nthat key the same property. A subsequent timeline will set this property using a mix.</li>\n</ol>",
      "name": "HOLD_FIRST",
      "longname": "HOLD_FIRST",
      "kind": "constant",
      "scope": "global"
    },
    {
      "comment": "/** 1. This is the first timeline to set this property.\n * 2. The next track entry to be applied does have a timeline to set this property.\n * 3. The next track entry after that one does have a timeline to set this property.\n * 4. timelineHoldMix stores the first subsequent track entry that does not have a timeline to set this property.\n *\n * Result: The same as HOLD except the mix percentage from the timelineHoldMix track entry is used. This handles when more than\n * 2 track entries in a row have a timeline that sets the same property.\n *\n * Eg, A -> B -> C -> D where A, B, and C have a timeline setting same property, but D does not. When A is applied, to avoid\n * \"dipping\" A is not mixed out, however D (the first entry that doesn't set the property) mixing in is used to mix out A\n * (which affects B and C). Without using D to mix out, A would be applied fully until mixing completes, then snap into\n * place. */",
      "meta": {
        "range": [
          54479,
          54505
        ],
        "filename": "AnimationState.js",
        "lineno": 1093,
        "columnno": 0,
        "path": "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist",
        "code": {
          "id": "astnode100016716",
          "name": "exports.HOLD_MIX",
          "type": "VariableDeclaration"
        }
      },
      "description": "<ol>\n<li>This is the first timeline to set this property.</li>\n<li>The next track entry to be applied does have a timeline to set this property.</li>\n<li>The next track entry after that one does have a timeline to set this property.</li>\n<li>timelineHoldMix stores the first subsequent track entry that does not have a timeline to set this property.</li>\n</ol>\n<p>Result: The same as HOLD except the mix percentage from the timelineHoldMix track entry is used. This handles when more than\n2 track entries in a row have a timeline that sets the same property.</p>\n<p>Eg, A -&gt; B -&gt; C -&gt; D where A, B, and C have a timeline setting same property, but D does not. When A is applied, to avoid\n&quot;dipping&quot; A is not mixed out, however D (the first entry that doesn't set the property) mixing in is used to mix out A\n(which affects B and C). Without using D to mix out, A would be applied fully until mixing completes, then snap into\nplace.</p>",
      "name": "HOLD_MIX",
      "longname": "HOLD_MIX",
      "kind": "constant",
      "scope": "global"
    },
    {
      "comment": "/** Stores mix (crossfade) durations to be applied when {@link AnimationState} animations are changed. */",
      "meta": {
        "range": [
          1808,
          3417
        ],
        "filename": "AnimationStateData.js",
        "lineno": 30,
        "columnno": 0,
        "path": "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist",
        "code": {
          "id": "astnode100016733",
          "name": "exports.AnimationStateData",
          "type": "ClassDeclaration"
        }
      },
      "name": "AnimationStateData",
      "longname": "AnimationStateData",
      "kind": "class",
      "classdesc": "<p>Stores mix (crossfade) durations to be applied when {@link AnimationState} animations are changed.</p>",
      "scope": "global",
      "memberof": "AnimationStateData"
    },
    {
      "comment": "/** The mix duration to use when no mix duration has been defined between two animations. */",
      "meta": {
        "range": [
          2021,
          2040
        ],
        "filename": "AnimationStateData.js",
        "lineno": 34,
        "columnno": 8,
        "path": "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist",
        "code": {
          "id": "astnode100016749",
          "name": "this.defaultMix",
          "type": "Literal",
          "value": 0,
          "paramnames": []
        }
      },
      "description": "<p>The mix duration to use when no mix duration has been defined between two animations.</p>",
      "name": "defaultMix",
      "longname": "AnimationStateData#defaultMix",
      "kind": "member",
      "memberof": "AnimationStateData",
      "scope": "instance"
    },
    {
      "comment": "/** Sets a mix duration by animation name.\n     *\n     * See {@link #setMixWith()}. */",
      "meta": {
        "range": [
          2273,
          2644
        ],
        "filename": "AnimationStateData.js",
        "lineno": 42,
        "columnno": 4,
        "path": "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist",
        "code": {
          "id": "astnode100016767",
          "name": "AnimationStateData#setMix",
          "type": "MethodDefinition",
          "paramnames": [
            "fromName",
            "toName",
            "duration"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "<p>Sets a mix duration by animation name.</p>\n<p>See {@link #setMixWith()}.</p>",
      "name": "setMix",
      "longname": "AnimationStateData#setMix",
      "kind": "function",
      "memberof": "AnimationStateData",
      "scope": "instance",
      "params": []
    },
    {
      "comment": "/** Sets the mix duration when changing from the specified animation to the other.\n     *\n     * See {@link TrackEntry#mixDuration}. */",
      "meta": {
        "range": [
          2789,
          3061
        ],
        "filename": "AnimationStateData.js",
        "lineno": 54,
        "columnno": 4,
        "path": "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist",
        "code": {
          "id": "astnode100016820",
          "name": "AnimationStateData#setMixWith",
          "type": "MethodDefinition",
          "paramnames": [
            "from",
            "to",
            "duration"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "<p>Sets the mix duration when changing from the specified animation to the other.</p>\n<p>See {@link TrackEntry#mixDuration}.</p>",
      "name": "setMixWith",
      "longname": "AnimationStateData#setMixWith",
      "kind": "function",
      "memberof": "AnimationStateData",
      "scope": "instance",
      "params": []
    },
    {
      "comment": "/** Returns the mix duration to use when changing from the specified animation to the other, or the {@link #defaultMix} if\n      * no mix duration has been set. */",
      "meta": {
        "range": [
          3234,
          3415
        ],
        "filename": "AnimationStateData.js",
        "lineno": 64,
        "columnno": 4,
        "path": "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist",
        "code": {
          "id": "astnode100016861",
          "name": "AnimationStateData#getMix",
          "type": "MethodDefinition",
          "paramnames": [
            "from",
            "to"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "<p>Returns the mix duration to use when changing from the specified animation to the other, or the {@link #defaultMix} if\nno mix duration has been set.</p>",
      "name": "getMix",
      "longname": "AnimationStateData#getMix",
      "kind": "function",
      "memberof": "AnimationStateData",
      "scope": "instance",
      "params": []
    },
    {
      "comment": "/** An {@link AttachmentLoader} that configures attachments using texture regions from an {@link TextureAtlas}.\n *\n * See [Loading skeleton data](http://esotericsoftware.com/spine-loading-skeleton-data#JSON-and-binary-data) in the\n * Spine Runtimes Guide. */",
      "meta": {
        "range": [
          2367,
          4237
        ],
        "filename": "AtlasAttachmentLoader.js",
        "lineno": 39,
        "columnno": 0,
        "path": "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist",
        "code": {
          "id": "astnode100018453",
          "name": "exports.AtlasAttachmentLoader",
          "type": "ClassDeclaration"
        }
      },
      "name": "AtlasAttachmentLoader",
      "longname": "AtlasAttachmentLoader",
      "kind": "class",
      "classdesc": "<p>An {@link AttachmentLoader} that configures attachments using texture regions from an {@link TextureAtlas}.</p>\n<p>See <a href=\"http://esotericsoftware.com/spine-loading-skeleton-data#JSON-and-binary-data\">Loading skeleton data</a> in the\nSpine Runtimes Guide.</p>",
      "scope": "global",
      "memberof": "AtlasAttachmentLoader"
    },
    {
      "comment": "/** Stores a bone's current pose.\n *\n * A bone has a local transform which is used to compute its world transform. A bone also has an applied transform, which is a\n * local transform that can be applied to compute the world transform. The local transform and applied transform may differ if a\n * constraint or application code modifies the world transform after it was computed from the local transform. */",
      "meta": {
        "range": [
          2190,
          16079
        ],
        "filename": "Bone.js",
        "lineno": 36,
        "columnno": 0,
        "path": "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist",
        "code": {
          "id": "astnode100018712",
          "name": "exports.Bone",
          "type": "ClassDeclaration"
        }
      },
      "name": "Bone",
      "longname": "Bone",
      "kind": "class",
      "classdesc": "<p>Stores a bone's current pose.</p>\n<p>A bone has a local transform which is used to compute its world transform. A bone also has an applied transform, which is a\nlocal transform that can be applied to compute the world transform. The local transform and applied transform may differ if a\nconstraint or application code modifies the world transform after it was computed from the local transform.</p>",
      "scope": "global",
      "memberof": "Bone",
      "params": [
        {
          "description": "<p>May be null.</p>",
          "name": "parent"
        }
      ]
    },
    {
      "comment": "/** The parent bone, or null if this is the root bone. */",
      "meta": {
        "range": [
          2364,
          2382
        ],
        "filename": "Bone.js",
        "lineno": 40,
        "columnno": 8,
        "path": "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist",
        "code": {
          "id": "astnode100018724",
          "name": "this.parent",
          "type": "Literal",
          "value": null,
          "paramnames": []
        }
      },
      "description": "<p>The parent bone, or null if this is the root bone.</p>",
      "name": "parent",
      "longname": "Bone#parent",
      "kind": "member",
      "memberof": "Bone",
      "scope": "instance"
    },
    {
      "comment": "/** The immediate children of this bone. */",
      "meta": {
        "range": [
          2444,
          2471
        ],
        "filename": "Bone.js",
        "lineno": 42,
        "columnno": 8,
        "path": "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist",
        "code": {
          "id": "astnode100018730",
          "name": "this.children",
          "type": "NewExpression",
          "value": "",
          "paramnames": []
        }
      },
      "description": "<p>The immediate children of this bone.</p>",
      "name": "children",
      "longname": "Bone#children",
      "kind": "member",
      "memberof": "Bone",
      "scope": "instance"
    },
    {
      "comment": "/** The local x translation. */",
      "meta": {
        "range": [
          2521,
          2531
        ],
        "filename": "Bone.js",
        "lineno": 44,
        "columnno": 8,
        "path": "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist",
        "code": {
          "id": "astnode100018737",
          "name": "this.x",
          "type": "Literal",
          "value": 0,
          "paramnames": []
        }
      },
      "description": "<p>The local x translation.</p>",
      "name": "x",
      "longname": "Bone#x",
      "kind": "member",
      "memberof": "Bone",
      "scope": "instance"
    },
    {
      "comment": "/** The local y translation. */",
      "meta": {
        "range": [
          2581,
          2591
        ],
        "filename": "Bone.js",
        "lineno": 46,
        "columnno": 8,
        "path": "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist",
        "code": {
          "id": "astnode100018743",
          "name": "this.y",
          "type": "Literal",
          "value": 0,
          "paramnames": []
        }
      },
      "description": "<p>The local y translation.</p>",
      "name": "y",
      "longname": "Bone#y",
      "kind": "member",
      "memberof": "Bone",
      "scope": "instance"
    },
    {
      "comment": "/** The local rotation in degrees, counter clockwise. */",
      "meta": {
        "range": [
          2666,
          2683
        ],
        "filename": "Bone.js",
        "lineno": 48,
        "columnno": 8,
        "path": "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist",
        "code": {
          "id": "astnode100018749",
          "name": "this.rotation",
          "type": "Literal",
          "value": 0,
          "paramnames": []
        }
      },
      "description": "<p>The local rotation in degrees, counter clockwise.</p>",
      "name": "rotation",
      "longname": "Bone#rotation",
      "kind": "member",
      "memberof": "Bone",
      "scope": "instance"
    },
    {
      "comment": "/** The local scaleX. */",
      "meta": {
        "range": [
          2726,
          2741
        ],
        "filename": "Bone.js",
        "lineno": 50,
        "columnno": 8,
        "path": "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist",
        "code": {
          "id": "astnode100018755",
          "name": "this.scaleX",
          "type": "Literal",
          "value": 0,
          "paramnames": []
        }
      },
      "description": "<p>The local scaleX.</p>",
      "name": "scaleX",
      "longname": "Bone#scaleX",
      "kind": "member",
      "memberof": "Bone",
      "scope": "instance"
    },
    {
      "comment": "/** The local scaleY. */",
      "meta": {
        "range": [
          2784,
          2799
        ],
        "filename": "Bone.js",
        "lineno": 52,
        "columnno": 8,
        "path": "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist",
        "code": {
          "id": "astnode100018761",
          "name": "this.scaleY",
          "type": "Literal",
          "value": 0,
          "paramnames": []
        }
      },
      "description": "<p>The local scaleY.</p>",
      "name": "scaleY",
      "longname": "Bone#scaleY",
      "kind": "member",
      "memberof": "Bone",
      "scope": "instance"
    },
    {
      "comment": "/** The local shearX. */",
      "meta": {
        "range": [
          2842,
          2857
        ],
        "filename": "Bone.js",
        "lineno": 54,
        "columnno": 8,
        "path": "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist",
        "code": {
          "id": "astnode100018767",
          "name": "this.shearX",
          "type": "Literal",
          "value": 0,
          "paramnames": []
        }
      },
      "description": "<p>The local shearX.</p>",
      "name": "shearX",
      "longname": "Bone#shearX",
      "kind": "member",
      "memberof": "Bone",
      "scope": "instance"
    },
    {
      "comment": "/** The local shearY. */",
      "meta": {
        "range": [
          2900,
          2915
        ],
        "filename": "Bone.js",
        "lineno": 56,
        "columnno": 8,
        "path": "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist",
        "code": {
          "id": "astnode100018773",
          "name": "this.shearY",
          "type": "Literal",
          "value": 0,
          "paramnames": []
        }
      },
      "description": "<p>The local shearY.</p>",
      "name": "shearY",
      "longname": "Bone#shearY",
      "kind": "member",
      "memberof": "Bone",
      "scope": "instance"
    },
    {
      "comment": "/** The applied local x translation. */",
      "meta": {
        "range": [
          2973,
          2984
        ],
        "filename": "Bone.js",
        "lineno": 58,
        "columnno": 8,
        "path": "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist",
        "code": {
          "id": "astnode100018779",
          "name": "this.ax",
          "type": "Literal",
          "value": 0,
          "paramnames": []
        }
      },
      "description": "<p>The applied local x translation.</p>",
      "name": "ax",
      "longname": "Bone#ax",
      "kind": "member",
      "memberof": "Bone",
      "scope": "instance"
    },
    {
      "comment": "/** The applied local y translation. */",
      "meta": {
        "range": [
          3042,
          3053
        ],
        "filename": "Bone.js",
        "lineno": 60,
        "columnno": 8,
        "path": "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist",
        "code": {
          "id": "astnode100018785",
          "name": "this.ay",
          "type": "Literal",
          "value": 0,
          "paramnames": []
        }
      },
      "description": "<p>The applied local y translation.</p>",
      "name": "ay",
      "longname": "Bone#ay",
      "kind": "member",
      "memberof": "Bone",
      "scope": "instance"
    },
    {
      "comment": "/** The applied local rotation in degrees, counter clockwise. */",
      "meta": {
        "range": [
          3136,
          3154
        ],
        "filename": "Bone.js",
        "lineno": 62,
        "columnno": 8,
        "path": "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist",
        "code": {
          "id": "astnode100018791",
          "name": "this.arotation",
          "type": "Literal",
          "value": 0,
          "paramnames": []
        }
      },
      "description": "<p>The applied local rotation in degrees, counter clockwise.</p>",
      "name": "arotation",
      "longname": "Bone#arotation",
      "kind": "member",
      "memberof": "Bone",
      "scope": "instance"
    },
    {
      "comment": "/** The applied local scaleX. */",
      "meta": {
        "range": [
          3205,
          3221
        ],
        "filename": "Bone.js",
        "lineno": 64,
        "columnno": 8,
        "path": "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist",
        "code": {
          "id": "astnode100018797",
          "name": "this.ascaleX",
          "type": "Literal",
          "value": 0,
          "paramnames": []
        }
      },
      "description": "<p>The applied local scaleX.</p>",
      "name": "ascaleX",
      "longname": "Bone#ascaleX",
      "kind": "member",
      "memberof": "Bone",
      "scope": "instance"
    },
    {
      "comment": "/** The applied local scaleY. */",
      "meta": {
        "range": [
          3272,
          3288
        ],
        "filename": "Bone.js",
        "lineno": 66,
        "columnno": 8,
        "path": "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist",
        "code": {
          "id": "astnode100018803",
          "name": "this.ascaleY",
          "type": "Literal",
          "value": 0,
          "paramnames": []
        }
      },
      "description": "<p>The applied local scaleY.</p>",
      "name": "ascaleY",
      "longname": "Bone#ascaleY",
      "kind": "member",
      "memberof": "Bone",
      "scope": "instance"
    },
    {
      "comment": "/** The applied local shearX. */",
      "meta": {
        "range": [
          3339,
          3355
        ],
        "filename": "Bone.js",
        "lineno": 68,
        "columnno": 8,
        "path": "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist",
        "code": {
          "id": "astnode100018809",
          "name": "this.ashearX",
          "type": "Literal",
          "value": 0,
          "paramnames": []
        }
      },
      "description": "<p>The applied local shearX.</p>",
      "name": "ashearX",
      "longname": "Bone#ashearX",
      "kind": "member",
      "memberof": "Bone",
      "scope": "instance"
    },
    {
      "comment": "/** The applied local shearY. */",
      "meta": {
        "range": [
          3406,
          3422
        ],
        "filename": "Bone.js",
        "lineno": 70,
        "columnno": 8,
        "path": "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist",
        "code": {
          "id": "astnode100018815",
          "name": "this.ashearY",
          "type": "Literal",
          "value": 0,
          "paramnames": []
        }
      },
      "description": "<p>The applied local shearY.</p>",
      "name": "ashearY",
      "longname": "Bone#ashearY",
      "kind": "member",
      "memberof": "Bone",
      "scope": "instance"
    },
    {
      "comment": "/** Part of the world transform matrix for the X axis. If changed, {@link #updateAppliedTransform()} should be called. */",
      "meta": {
        "range": [
          3562,
          3572
        ],
        "filename": "Bone.js",
        "lineno": 72,
        "columnno": 8,
        "path": "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist",
        "code": {
          "id": "astnode100018821",
          "name": "this.a",
          "type": "Literal",
          "value": 0,
          "paramnames": []
        }
      },
      "description": "<p>Part of the world transform matrix for the X axis. If changed, {@link #updateAppliedTransform()} should be called.</p>",
      "name": "a",
      "longname": "Bone#a",
      "kind": "member",
      "memberof": "Bone",
      "scope": "instance"
    },
    {
      "comment": "/** Part of the world transform matrix for the Y axis. If changed, {@link #updateAppliedTransform()} should be called. */",
      "meta": {
        "range": [
          3712,
          3722
        ],
        "filename": "Bone.js",
        "lineno": 74,
        "columnno": 8,
        "path": "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist",
        "code": {
          "id": "astnode100018827",
          "name": "this.b",
          "type": "Literal",
          "value": 0,
          "paramnames": []
        }
      },
      "description": "<p>Part of the world transform matrix for the Y axis. If changed, {@link #updateAppliedTransform()} should be called.</p>",
      "name": "b",
      "longname": "Bone#b",
      "kind": "member",
      "memberof": "Bone",
      "scope": "instance"
    },
    {
      "comment": "/** Part of the world transform matrix for the X axis. If changed, {@link #updateAppliedTransform()} should be called. */",
      "meta": {
        "range": [
          3862,
          3872
        ],
        "filename": "Bone.js",
        "lineno": 76,
        "columnno": 8,
        "path": "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist",
        "code": {
          "id": "astnode100018833",
          "name": "this.c",
          "type": "Literal",
          "value": 0,
          "paramnames": []
        }
      },
      "description": "<p>Part of the world transform matrix for the X axis. If changed, {@link #updateAppliedTransform()} should be called.</p>",
      "name": "c",
      "longname": "Bone#c",
      "kind": "member",
      "memberof": "Bone",
      "scope": "instance"
    },
    {
      "comment": "/** Part of the world transform matrix for the Y axis. If changed, {@link #updateAppliedTransform()} should be called. */",
      "meta": {
        "range": [
          4012,
          4022
        ],
        "filename": "Bone.js",
        "lineno": 78,
        "columnno": 8,
        "path": "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist",
        "code": {
          "id": "astnode100018839",
          "name": "this.d",
          "type": "Literal",
          "value": 0,
          "paramnames": []
        }
      },
      "description": "<p>Part of the world transform matrix for the Y axis. If changed, {@link #updateAppliedTransform()} should be called.</p>",
      "name": "d",
      "longname": "Bone#d",
      "kind": "member",
      "memberof": "Bone",
      "scope": "instance"
    },
    {
      "comment": "/** The world X position. If changed, {@link #updateAppliedTransform()} should be called. */",
      "meta": {
        "range": [
          4133,
          4148
        ],
        "filename": "Bone.js",
        "lineno": 80,
        "columnno": 8,
        "path": "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist",
        "code": {
          "id": "astnode100018845",
          "name": "this.worldY",
          "type": "Literal",
          "value": 0,
          "paramnames": []
        }
      },
      "description": "<p>The world X position. If changed, {@link #updateAppliedTransform()} should be called.</p>",
      "name": "worldY",
      "longname": "Bone#worldY",
      "kind": "member",
      "memberof": "Bone",
      "scope": "instance"
    },
    {
      "comment": "/** The world Y position. If changed, {@link #updateAppliedTransform()} should be called. */",
      "meta": {
        "range": [
          4259,
          4274
        ],
        "filename": "Bone.js",
        "lineno": 82,
        "columnno": 8,
        "path": "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist",
        "code": {
          "id": "astnode100018851",
          "name": "this.worldX",
          "type": "Literal",
          "value": 0,
          "paramnames": []
        }
      },
      "description": "<p>The world Y position. If changed, {@link #updateAppliedTransform()} should be called.</p>",
      "name": "worldX",
      "longname": "Bone#worldX",
      "kind": "member",
      "memberof": "Bone",
      "scope": "instance"
    },
    {
      "comment": "/** Returns false when the bone has not been computed because {@link BoneData#skinRequired} is true and the\n      * {@link Skeleton#skin active skin} does not {@link Skin#bones contain} this bone. */",
      "meta": {
        "range": [
          4821,
          4867
        ],
        "filename": "Bone.js",
        "lineno": 96,
        "columnno": 4,
        "path": "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist",
        "code": {
          "id": "astnode100018905",
          "name": "Bone#isActive",
          "type": "MethodDefinition",
          "paramnames": []
        },
        "vars": {
          "": null
        }
      },
      "description": "<p>Returns false when the bone has not been computed because {@link BoneData#skinRequired} is true and the\n{@link Skeleton#skin active skin} does not {@link Skin#bones contain} this bone.</p>",
      "name": "isActive",
      "longname": "Bone#isActive",
      "kind": "function",
      "memberof": "Bone",
      "scope": "instance",
      "params": []
    },
    {
      "comment": "/** Computes the world transform using the parent bone and this bone's local applied transform. */",
      "meta": {
        "range": [
          4975,
          5120
        ],
        "filename": "Bone.js",
        "lineno": 100,
        "columnno": 4,
        "path": "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist",
        "code": {
          "id": "astnode100018913",
          "name": "Bone#update",
          "type": "MethodDefinition",
          "paramnames": []
        },
        "vars": {
          "": null
        }
      },
      "description": "<p>Computes the world transform using the parent bone and this bone's local applied transform.</p>",
      "name": "update",
      "longname": "Bone#update",
      "kind": "function",
      "memberof": "Bone",
      "scope": "instance",
      "params": []
    },
    {
      "comment": "/** Computes the world transform using the parent bone and this bone's local transform.\n     *\n     * See {@link #updateWorldTransformWith()}. */",
      "meta": {
        "range": [
          5275,
          5427
        ],
        "filename": "Bone.js",
        "lineno": 106,
        "columnno": 4,
        "path": "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist",
        "code": {
          "id": "astnode100018943",
          "name": "Bone#updateWorldTransform",
          "type": "MethodDefinition",
          "paramnames": []
        },
        "vars": {
          "": null
        }
      },
      "description": "<p>Computes the world transform using the parent bone and this bone's local transform.</p>\n<p>See {@link #updateWorldTransformWith()}.</p>",
      "name": "updateWorldTransform",
      "longname": "Bone#updateWorldTransform",
      "kind": "function",
      "memberof": "Bone",
      "scope": "instance",
      "params": []
    },
    {
      "comment": "/** Computes the world transform using the parent bone and the specified local transform. The applied transform is set to the\n     * specified local transform. Child bones are not updated.\n     *\n     * See [World transforms](http://esotericsoftware.com/spine-runtime-skeletons#World-transforms) in the Spine\n     * Runtimes Guide. */",
      "meta": {
        "range": [
          5771,
          10618
        ],
        "filename": "Bone.js",
        "lineno": 114,
        "columnno": 4,
        "path": "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist",
        "code": {
          "id": "astnode100018973",
          "name": "Bone#updateWorldTransformWith",
          "type": "MethodDefinition",
          "paramnames": [
            "x",
            "y",
            "rotation",
            "scaleX",
            "scaleY",
            "shearX",
            "shearY"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "<p>Computes the world transform using the parent bone and the specified local transform. The applied transform is set to the\nspecified local transform. Child bones are not updated.</p>\n<p>See <a href=\"http://esotericsoftware.com/spine-runtime-skeletons#World-transforms\">World transforms</a> in the Spine\nRuntimes Guide.</p>",
      "name": "updateWorldTransformWith",
      "longname": "Bone#updateWorldTransformWith",
      "kind": "function",
      "memberof": "Bone",
      "scope": "instance",
      "params": []
    },
    {
      "comment": "/** Sets this bone's local transform to the setup pose. */",
      "meta": {
        "range": [
          10686,
          10969
        ],
        "filename": "Bone.js",
        "lineno": 223,
        "columnno": 4,
        "path": "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist",
        "code": {
          "id": "astnode100019902",
          "name": "Bone#setToSetupPose",
          "type": "MethodDefinition",
          "paramnames": []
        },
        "vars": {
          "": null
        }
      },
      "description": "<p>Sets this bone's local transform to the setup pose.</p>",
      "name": "setToSetupPose",
      "longname": "Bone#setToSetupPose",
      "kind": "function",
      "memberof": "Bone",
      "scope": "instance",
      "params": []
    },
    {
      "comment": "/** The world rotation for the X axis, calculated using {@link #a} and {@link #c}. */",
      "meta": {
        "range": [
          11064,
          11153
        ],
        "filename": "Bone.js",
        "lineno": 234,
        "columnno": 4,
        "path": "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist",
        "code": {
          "id": "astnode100019968",
          "name": "Bone#getWorldRotationX",
          "type": "MethodDefinition",
          "paramnames": []
        },
        "vars": {
          "": null
        }
      },
      "description": "<p>The world rotation for the X axis, calculated using {@link #a} and {@link #c}.</p>",
      "name": "getWorldRotationX",
      "longname": "Bone#getWorldRotationX",
      "kind": "function",
      "memberof": "Bone",
      "scope": "instance",
      "params": []
    },
    {
      "comment": "/** The world rotation for the Y axis, calculated using {@link #b} and {@link #d}. */",
      "meta": {
        "range": [
          11248,
          11337
        ],
        "filename": "Bone.js",
        "lineno": 238,
        "columnno": 4,
        "path": "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist",
        "code": {
          "id": "astnode100019987",
          "name": "Bone#getWorldRotationY",
          "type": "MethodDefinition",
          "paramnames": []
        },
        "vars": {
          "": null
        }
      },
      "description": "<p>The world rotation for the Y axis, calculated using {@link #b} and {@link #d}.</p>",
      "name": "getWorldRotationY",
      "longname": "Bone#getWorldRotationY",
      "kind": "function",
      "memberof": "Bone",
      "scope": "instance",
      "params": []
    },
    {
      "comment": "/** The magnitude (always positive) of the world scale X, calculated using {@link #a} and {@link #c}. */",
      "meta": {
        "range": [
          11451,
          11536
        ],
        "filename": "Bone.js",
        "lineno": 242,
        "columnno": 4,
        "path": "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist",
        "code": {
          "id": "astnode100020006",
          "name": "Bone#getWorldScaleX",
          "type": "MethodDefinition",
          "paramnames": []
        },
        "vars": {
          "": null
        }
      },
      "description": "<p>The magnitude (always positive) of the world scale X, calculated using {@link #a} and {@link #c}.</p>",
      "name": "getWorldScaleX",
      "longname": "Bone#getWorldScaleX",
      "kind": "function",
      "memberof": "Bone",
      "scope": "instance",
      "params": []
    },
    {
      "comment": "/** The magnitude (always positive) of the world scale Y, calculated using {@link #b} and {@link #d}. */",
      "meta": {
        "range": [
          11650,
          11735
        ],
        "filename": "Bone.js",
        "lineno": 246,
        "columnno": 4,
        "path": "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist",
        "code": {
          "id": "astnode100020030",
          "name": "Bone#getWorldScaleY",
          "type": "MethodDefinition",
          "paramnames": []
        },
        "vars": {
          "": null
        }
      },
      "description": "<p>The magnitude (always positive) of the world scale Y, calculated using {@link #b} and {@link #d}.</p>",
      "name": "getWorldScaleY",
      "longname": "Bone#getWorldScaleY",
      "kind": "function",
      "memberof": "Bone",
      "scope": "instance",
      "params": []
    },
    {
      "comment": "/** Computes the applied transform values from the world transform.\n     *\n     * If the world transform is modified (by a constraint, {@link #rotateWorld(float)}, etc) then this method should be called so\n     * the applied transform matches the world transform. The applied transform may be needed by other code (eg to apply other\n     * constraints).\n     *\n     * Some information is ambiguous in the world transform, such as -1,-1 scale versus 180 rotation. The applied transform after\n     * calling this method is equivalent to the local transform used to compute the world transform, but may not be identical. */",
      "meta": {
        "range": [
          12365,
          14130
        ],
        "filename": "Bone.js",
        "lineno": 257,
        "columnno": 4,
        "path": "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist",
        "code": {
          "id": "astnode100020054",
          "name": "Bone#updateAppliedTransform",
          "type": "MethodDefinition",
          "paramnames": []
        },
        "vars": {
          "": null
        }
      },
      "description": "<p>Computes the applied transform values from the world transform.</p>\n<p>If the world transform is modified (by a constraint, {@link #rotateWorld(float)}, etc) then this method should be called so\nthe applied transform matches the world transform. The applied transform may be needed by other code (eg to apply other\nconstraints).</p>\n<p>Some information is ambiguous in the world transform, such as -1,-1 scale versus 180 rotation. The applied transform after\ncalling this method is equivalent to the local transform used to compute the world transform, but may not be identical.</p>",
      "name": "updateAppliedTransform",
      "longname": "Bone#updateAppliedTransform",
      "kind": "function",
      "memberof": "Bone",
      "scope": "instance",
      "params": []
    },
    {
      "comment": "/** Transforms a point from world coordinates to the bone's local coordinates. */",
      "meta": {
        "range": [
          14221,
          14520
        ],
        "filename": "Bone.js",
        "lineno": 298,
        "columnno": 4,
        "path": "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist",
        "code": {
          "id": "astnode100020508",
          "name": "Bone#worldToLocal",
          "type": "MethodDefinition",
          "paramnames": [
            "world"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "<p>Transforms a point from world coordinates to the bone's local coordinates.</p>",
      "name": "worldToLocal",
      "longname": "Bone#worldToLocal",
      "kind": "function",
      "memberof": "Bone",
      "scope": "instance",
      "params": []
    },
    {
      "comment": "/** Transforms a point from the bone's local coordinates to world coordinates. */",
      "meta": {
        "range": [
          14611,
          14812
        ],
        "filename": "Bone.js",
        "lineno": 306,
        "columnno": 4,
        "path": "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist",
        "code": {
          "id": "astnode100020594",
          "name": "Bone#localToWorld",
          "type": "MethodDefinition",
          "paramnames": [
            "local"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "<p>Transforms a point from the bone's local coordinates to world coordinates.</p>",
      "name": "localToWorld",
      "longname": "Bone#localToWorld",
      "kind": "function",
      "memberof": "Bone",
      "scope": "instance",
      "params": []
    },
    {
      "comment": "/** Transforms a world rotation to a local rotation. */",
      "meta": {
        "range": [
          14877,
          15144
        ],
        "filename": "Bone.js",
        "lineno": 313,
        "columnno": 4,
        "path": "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist",
        "code": {
          "id": "astnode100020652",
          "name": "Bone#worldToLocalRotation",
          "type": "MethodDefinition",
          "paramnames": [
            "worldRotation"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "<p>Transforms a world rotation to a local rotation.</p>",
      "name": "worldToLocalRotation",
      "longname": "Bone#worldToLocalRotation",
      "kind": "function",
      "memberof": "Bone",
      "scope": "instance",
      "params": []
    },
    {
      "comment": "/** Transforms a local rotation to a world rotation. */",
      "meta": {
        "range": [
          15209,
          15500
        ],
        "filename": "Bone.js",
        "lineno": 318,
        "columnno": 4,
        "path": "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist",
        "code": {
          "id": "astnode100020711",
          "name": "Bone#localToWorldRotation",
          "type": "MethodDefinition",
          "paramnames": [
            "localRotation"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "<p>Transforms a local rotation to a world rotation.</p>",
      "name": "localToWorldRotation",
      "longname": "Bone#localToWorldRotation",
      "kind": "function",
      "memberof": "Bone",
      "scope": "instance",
      "params": []
    },
    {
      "comment": "/** Rotates the world transform the specified amount.\n     * <p>\n     * After changes are made to the world transform, {@link #updateAppliedTransform()} should be called and {@link #update()} will\n     * need to be called on any child bones, recursively. */",
      "meta": {
        "range": [
          15767,
          16077
        ],
        "filename": "Bone.js",
        "lineno": 327,
        "columnno": 4,
        "path": "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist",
        "code": {
          "id": "astnode100020772",
          "name": "Bone#rotateWorld",
          "type": "MethodDefinition",
          "paramnames": [
            "degrees"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "<p>Rotates the world transform the specified amount.</p>\n<p>\nAfter changes are made to the world transform, {@link #updateAppliedTransform()} should be called and {@link #update()} will\nneed to be called on any child bones, recursively.",
      "name": "rotateWorld",
      "longname": "Bone#rotateWorld",
      "kind": "function",
      "memberof": "Bone",
      "scope": "instance",
      "params": []
    },
    {
      "comment": "/** Stores the setup pose for a {@link Bone}. */",
      "meta": {
        "range": [
          1784,
          3261
        ],
        "filename": "BoneData.js",
        "lineno": 31,
        "columnno": 0,
        "path": "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist",
        "code": {
          "id": "astnode100020867",
          "name": "exports.BoneData",
          "type": "ClassDeclaration"
        }
      },
      "name": "BoneData",
      "longname": "BoneData",
      "kind": "class",
      "classdesc": "<p>Stores the setup pose for a {@link Bone}.</p>",
      "scope": "global",
      "memberof": "BoneData"
    },
    {
      "comment": "/** The index of the bone in {@link Skeleton#getBones()}. */",
      "meta": {
        "range": [
          1924,
          1938
        ],
        "filename": "BoneData.js",
        "lineno": 34,
        "columnno": 8,
        "path": "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist",
        "code": {
          "id": "astnode100020879",
          "name": "this.index",
          "type": "Literal",
          "value": 0,
          "paramnames": []
        }
      },
      "description": "<p>The index of the bone in {@link Skeleton#getBones()}.</p>",
      "name": "index",
      "longname": "BoneData#index",
      "kind": "member",
      "memberof": "BoneData",
      "scope": "instance"
    },
    {
      "comment": "/** @returns May be null. */",
      "meta": {
        "range": [
          1985,
          2003
        ],
        "filename": "BoneData.js",
        "lineno": 36,
        "columnno": 8,
        "path": "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist",
        "code": {
          "id": "astnode100020885",
          "name": "this.parent",
          "type": "Literal",
          "value": null,
          "paramnames": []
        }
      },
      "returns": [
        {
          "description": "<p>May be null.</p>"
        }
      ],
      "name": "parent",
      "longname": "BoneData#parent",
      "kind": "member",
      "memberof": "BoneData",
      "scope": "instance"
    },
    {
      "comment": "/** The bone's length. */",
      "meta": {
        "range": [
          2047,
          2062
        ],
        "filename": "BoneData.js",
        "lineno": 38,
        "columnno": 8,
        "path": "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist",
        "code": {
          "id": "astnode100020891",
          "name": "this.length",
          "type": "Literal",
          "value": 0,
          "paramnames": []
        }
      },
      "description": "<p>The bone's length.</p>",
      "name": "length",
      "longname": "BoneData#length",
      "kind": "member",
      "memberof": "BoneData",
      "scope": "instance"
    },
    {
      "comment": "/** The local x translation. */",
      "meta": {
        "range": [
          2112,
          2122
        ],
        "filename": "BoneData.js",
        "lineno": 40,
        "columnno": 8,
        "path": "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist",
        "code": {
          "id": "astnode100020897",
          "name": "this.x",
          "type": "Literal",
          "value": 0,
          "paramnames": []
        }
      },
      "description": "<p>The local x translation.</p>",
      "name": "x",
      "longname": "BoneData#x",
      "kind": "member",
      "memberof": "BoneData",
      "scope": "instance"
    },
    {
      "comment": "/** The local y translation. */",
      "meta": {
        "range": [
          2172,
          2182
        ],
        "filename": "BoneData.js",
        "lineno": 42,
        "columnno": 8,
        "path": "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist",
        "code": {
          "id": "astnode100020903",
          "name": "this.y",
          "type": "Literal",
          "value": 0,
          "paramnames": []
        }
      },
      "description": "<p>The local y translation.</p>",
      "name": "y",
      "longname": "BoneData#y",
      "kind": "member",
      "memberof": "BoneData",
      "scope": "instance"
    },
    {
      "comment": "/** The local rotation. */",
      "meta": {
        "range": [
          2227,
          2244
        ],
        "filename": "BoneData.js",
        "lineno": 44,
        "columnno": 8,
        "path": "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist",
        "code": {
          "id": "astnode100020909",
          "name": "this.rotation",
          "type": "Literal",
          "value": 0,
          "paramnames": []
        }
      },
      "description": "<p>The local rotation.</p>",
      "name": "rotation",
      "longname": "BoneData#rotation",
      "kind": "member",
      "memberof": "BoneData",
      "scope": "instance"
    },
    {
      "comment": "/** The local scaleX. */",
      "meta": {
        "range": [
          2287,
          2302
        ],
        "filename": "BoneData.js",
        "lineno": 46,
        "columnno": 8,
        "path": "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist",
        "code": {
          "id": "astnode100020915",
          "name": "this.scaleX",
          "type": "Literal",
          "value": 1,
          "paramnames": []
        }
      },
      "description": "<p>The local scaleX.</p>",
      "name": "scaleX",
      "longname": "BoneData#scaleX",
      "kind": "member",
      "memberof": "BoneData",
      "scope": "instance"
    },
    {
      "comment": "/** The local scaleY. */",
      "meta": {
        "range": [
          2345,
          2360
        ],
        "filename": "BoneData.js",
        "lineno": 48,
        "columnno": 8,
        "path": "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist",
        "code": {
          "id": "astnode100020921",
          "name": "this.scaleY",
          "type": "Literal",
          "value": 1,
          "paramnames": []
        }
      },
      "description": "<p>The local scaleY.</p>",
      "name": "scaleY",
      "longname": "BoneData#scaleY",
      "kind": "member",
      "memberof": "BoneData",
      "scope": "instance"
    },
    {
      "comment": "/** The local shearX. */",
      "meta": {
        "range": [
          2403,
          2418
        ],
        "filename": "BoneData.js",
        "lineno": 50,
        "columnno": 8,
        "path": "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist",
        "code": {
          "id": "astnode100020927",
          "name": "this.shearX",
          "type": "Literal",
          "value": 0,
          "paramnames": []
        }
      },
      "description": "<p>The local shearX.</p>",
      "name": "shearX",
      "longname": "BoneData#shearX",
      "kind": "member",
      "memberof": "BoneData",
      "scope": "instance"
    },
    {
      "comment": "/** The local shearX. */",
      "meta": {
        "range": [
          2461,
          2476
        ],
        "filename": "BoneData.js",
        "lineno": 52,
        "columnno": 8,
        "path": "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist",
        "code": {
          "id": "astnode100020933",
          "name": "this.shearY",
          "type": "Literal",
          "value": 0,
          "paramnames": []
        }
      },
      "description": "<p>The local shearX.</p>",
      "name": "shearY",
      "longname": "BoneData#shearY",
      "kind": "member",
      "memberof": "BoneData",
      "scope": "instance"
    },
    {
      "comment": "/** The transform mode for how parent world transforms affect this bone. */",
      "meta": {
        "range": [
          2570,
          2611
        ],
        "filename": "BoneData.js",
        "lineno": 54,
        "columnno": 8,
        "path": "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist",
        "code": {
          "id": "astnode100020939",
          "name": "this.transformMode",
          "type": "MemberExpression",
          "value": "TransformMode.Normal",
          "paramnames": []
        }
      },
      "description": "<p>The transform mode for how parent world transforms affect this bone.</p>",
      "name": "transformMode",
      "longname": "BoneData#transformMode",
      "kind": "member",
      "memberof": "BoneData",
      "scope": "instance"
    },
    {
      "comment": "/** When true, {@link Skeleton#updateWorldTransform()} only updates this bone if the {@link Skeleton#skin} contains this\n          * bone.\n          * @see Skin#bones */",
      "meta": {
        "range": [
          2799,
          2824
        ],
        "filename": "BoneData.js",
        "lineno": 58,
        "columnno": 8,
        "path": "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist",
        "code": {
          "id": "astnode100020947",
          "name": "this.skinRequired",
          "type": "Literal",
          "value": false,
          "paramnames": []
        }
      },
      "description": "<p>When true, {@link Skeleton#updateWorldTransform()} only updates this bone if the {@link Skeleton#skin} contains this\nbone.</p>",
      "see": [
        "Skin#bones"
      ],
      "name": "skinRequired",
      "longname": "BoneData#skinRequired",
      "kind": "member",
      "memberof": "BoneData",
      "scope": "instance"
    },
    {
      "comment": "/** The color of the bone as it was in Spine. Available only when nonessential data was exported. Bones are not usually\n         * rendered at runtime. */",
      "meta": {
        "range": [
          2997,
          3021
        ],
        "filename": "BoneData.js",
        "lineno": 61,
        "columnno": 8,
        "path": "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist",
        "code": {
          "id": "astnode100020953",
          "name": "this.color",
          "type": "NewExpression",
          "value": "",
          "paramnames": []
        }
      },
      "description": "<p>The color of the bone as it was in Spine. Available only when nonessential data was exported. Bones are not usually\nrendered at runtime.</p>",
      "name": "color",
      "longname": "BoneData#color",
      "kind": "member",
      "memberof": "BoneData",
      "scope": "instance"
    },
    {
      "comment": "/** Determines how a bone inherits world transforms from parent bones. */",
      "meta": {
        "range": [
          3336,
          3361
        ],
        "filename": "BoneData.js",
        "lineno": 72,
        "columnno": 0,
        "path": "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist",
        "code": {
          "id": "astnode100020992",
          "name": "exports.TransformMode",
          "type": "VariableDeclaration"
        }
      },
      "description": "<p>Determines how a bone inherits world transforms from parent bones.</p>",
      "name": "TransformMode",
      "longname": "TransformMode",
      "kind": "member",
      "scope": "global"
    },
    {
      "comment": "/** The base class for all constraint datas. */",
      "meta": {
        "range": [
          1750,
          1928
        ],
        "filename": "ConstraintData.js",
        "lineno": 30,
        "columnno": 0,
        "path": "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist",
        "code": {
          "id": "astnode100021058",
          "name": "exports.ConstraintData",
          "type": "ClassDeclaration"
        }
      },
      "name": "ConstraintData",
      "longname": "ConstraintData",
      "kind": "class",
      "classdesc": "<p>The base class for all constraint datas.</p>",
      "scope": "global",
      "memberof": "ConstraintData"
    },
    {
      "comment": "/** Stores the current pose values for an {@link Event}.\n *\n * See Timeline {@link Timeline#apply()},\n * AnimationStateListener {@link AnimationStateListener#event()}, and\n * [Events](http://esotericsoftware.com/spine-events) in the Spine User Guide. */",
      "meta": {
        "range": [
          1956,
          2301
        ],
        "filename": "Event.js",
        "lineno": 34,
        "columnno": 0,
        "path": "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist",
        "code": {
          "id": "astnode100021089",
          "name": "exports.Event",
          "type": "ClassDeclaration"
        }
      },
      "name": "Event",
      "longname": "Event",
      "kind": "class",
      "classdesc": "<p>Stores the current pose values for an {@link Event}.</p>\n<p>See Timeline {@link Timeline#apply()},\nAnimationStateListener {@link AnimationStateListener#event()}, and\n<a href=\"http://esotericsoftware.com/spine-events\">Events</a> in the Spine User Guide.</p>",
      "scope": "global",
      "memberof": "Event"
    },
    {
      "comment": "/** Stores the setup pose values for an {@link Event}.\n *\n * See [Events](http://esotericsoftware.com/spine-events) in the Spine User Guide. */",
      "meta": {
        "range": [
          1846,
          2099
        ],
        "filename": "EventData.js",
        "lineno": 32,
        "columnno": 0,
        "path": "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist",
        "code": {
          "id": "astnode100021156",
          "name": "exports.EventData",
          "type": "ClassDeclaration"
        }
      },
      "name": "EventData",
      "longname": "EventData",
      "kind": "class",
      "classdesc": "<p>Stores the setup pose values for an {@link Event}.</p>\n<p>See <a href=\"http://esotericsoftware.com/spine-events\">Events</a> in the Spine User Guide.</p>",
      "scope": "global",
      "memberof": "EventData"
    },
    {
      "comment": "/** Stores the current pose for an IK constraint. An IK constraint adjusts the rotation of 1 or 2 constrained bones so the tip of\n * the last bone is as close to the target bone as possible.\n *\n * See [IK constraints](http://esotericsoftware.com/spine-ik-constraints) in the Spine User Guide. */",
      "meta": {
        "range": [
          2079,
          12728
        ],
        "filename": "IkConstraint.js",
        "lineno": 35,
        "columnno": 0,
        "path": "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist",
        "code": {
          "id": "astnode100021217",
          "name": "exports.IkConstraint",
          "type": "ClassDeclaration"
        }
      },
      "name": "IkConstraint",
      "longname": "IkConstraint",
      "kind": "class",
      "classdesc": "<p>Stores the current pose for an IK constraint. An IK constraint adjusts the rotation of 1 or 2 constrained bones so the tip of\nthe last bone is as close to the target bone as possible.</p>\n<p>See <a href=\"http://esotericsoftware.com/spine-ik-constraints\">IK constraints</a> in the Spine User Guide.</p>",
      "scope": "global",
      "memberof": "IkConstraint"
    },
    {
      "comment": "/** Controls the bend direction of the IK bones, either 1 or -1. */",
      "meta": {
        "range": [
          2225,
          2247
        ],
        "filename": "IkConstraint.js",
        "lineno": 38,
        "columnno": 8,
        "path": "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist",
        "code": {
          "id": "astnode100021228",
          "name": "this.bendDirection",
          "type": "Literal",
          "value": 0,
          "paramnames": []
        }
      },
      "description": "<p>Controls the bend direction of the IK bones, either 1 or -1.</p>",
      "name": "bendDirection",
      "longname": "IkConstraint#bendDirection",
      "kind": "member",
      "memberof": "IkConstraint",
      "scope": "instance"
    },
    {
      "comment": "/** When true and only a single bone is being constrained, if the target is too close, the bone is scaled to reach it. */",
      "meta": {
        "range": [
          2387,
          2408
        ],
        "filename": "IkConstraint.js",
        "lineno": 40,
        "columnno": 8,
        "path": "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist",
        "code": {
          "id": "astnode100021234",
          "name": "this.compress",
          "type": "Literal",
          "value": false,
          "paramnames": []
        }
      },
      "description": "<p>When true and only a single bone is being constrained, if the target is too close, the bone is scaled to reach it.</p>",
      "name": "compress",
      "longname": "IkConstraint#compress",
      "kind": "member",
      "memberof": "IkConstraint",
      "scope": "instance"
    },
    {
      "comment": "/** When true, if the target is out of range, the parent bone is scaled to reach it. If more than one bone is being constrained\n         * and the parent bone has local nonuniform scale, stretch is not applied. */",
      "meta": {
        "range": [
          2640,
          2660
        ],
        "filename": "IkConstraint.js",
        "lineno": 43,
        "columnno": 8,
        "path": "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist",
        "code": {
          "id": "astnode100021240",
          "name": "this.stretch",
          "type": "Literal",
          "value": false,
          "paramnames": []
        }
      },
      "description": "<p>When true, if the target is out of range, the parent bone is scaled to reach it. If more than one bone is being constrained\nand the parent bone has local nonuniform scale, stretch is not applied.</p>",
      "name": "stretch",
      "longname": "IkConstraint#stretch",
      "kind": "member",
      "memberof": "IkConstraint",
      "scope": "instance"
    },
    {
      "comment": "/** A percentage (0-1) that controls the mix between the constrained and unconstrained rotations. */",
      "meta": {
        "range": [
          2779,
          2791
        ],
        "filename": "IkConstraint.js",
        "lineno": 45,
        "columnno": 8,
        "path": "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist",
        "code": {
          "id": "astnode100021246",
          "name": "this.mix",
          "type": "Literal",
          "value": 1,
          "paramnames": []
        }
      },
      "description": "<p>A percentage (0-1) that controls the mix between the constrained and unconstrained rotations.</p>",
      "name": "mix",
      "longname": "IkConstraint#mix",
      "kind": "member",
      "memberof": "IkConstraint",
      "scope": "instance"
    },
    {
      "comment": "/** For two bone IK, the distance from the maximum reach of the bones that rotation will slow. */",
      "meta": {
        "range": [
          2907,
          2924
        ],
        "filename": "IkConstraint.js",
        "lineno": 47,
        "columnno": 8,
        "path": "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist",
        "code": {
          "id": "astnode100021252",
          "name": "this.softness",
          "type": "Literal",
          "value": 0,
          "paramnames": []
        }
      },
      "description": "<p>For two bone IK, the distance from the maximum reach of the bones that rotation will slow.</p>",
      "name": "softness",
      "longname": "IkConstraint#softness",
      "kind": "member",
      "memberof": "IkConstraint",
      "scope": "instance"
    },
    {
      "comment": "/** Applies 1 bone IK. The target is specified in the world coordinate system. */",
      "meta": {
        "range": [
          4494,
          6901
        ],
        "filename": "IkConstraint.js",
        "lineno": 89,
        "columnno": 4,
        "path": "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist",
        "code": {
          "id": "astnode100021518",
          "name": "IkConstraint#apply1",
          "type": "MethodDefinition",
          "paramnames": [
            "bone",
            "targetX",
            "targetY",
            "compress",
            "stretch",
            "uniform",
            "alpha"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "<p>Applies 1 bone IK. The target is specified in the world coordinate system.</p>",
      "name": "apply1",
      "longname": "IkConstraint#apply1",
      "kind": "function",
      "memberof": "IkConstraint",
      "scope": "instance",
      "params": []
    },
    {
      "comment": "/** Applies 2 bone IK. The target is specified in the world coordinate system.\n     * @param child A direct descendant of the parent bone. */",
      "meta": {
        "range": [
          7052,
          12726
        ],
        "filename": "IkConstraint.js",
        "lineno": 147,
        "columnno": 4,
        "path": "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist",
        "code": {
          "id": "astnode100021946",
          "name": "IkConstraint#apply2",
          "type": "MethodDefinition",
          "paramnames": [
            "parent",
            "child",
            "targetX",
            "targetY",
            "bendDir",
            "stretch",
            "uniform",
            "softness",
            "alpha"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "<p>Applies 2 bone IK. The target is specified in the world coordinate system.</p>",
      "params": [
        {
          "description": "<p>A direct descendant of the parent bone.</p>",
          "name": "child"
        }
      ],
      "name": "apply2",
      "longname": "IkConstraint#apply2",
      "kind": "function",
      "memberof": "IkConstraint",
      "scope": "instance"
    },
    {
      "comment": "/** Stores the setup pose for an {@link IkConstraint}.\n * <p>\n * See [IK constraints](http://esotericsoftware.com/spine-ik-constraints) in the Spine User Guide. */",
      "meta": {
        "range": [
          1917,
          3414
        ],
        "filename": "IkConstraintData.js",
        "lineno": 33,
        "columnno": 0,
        "path": "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist",
        "code": {
          "id": "astnode100023128",
          "name": "exports.IkConstraintData",
          "type": "ClassDeclaration"
        }
      },
      "name": "IkConstraintData",
      "longname": "IkConstraintData",
      "kind": "class",
      "classdesc": "<p>Stores the setup pose for an {@link IkConstraint}.</p>\n<p>\nSee [IK constraints](http://esotericsoftware.com/spine-ik-constraints) in the Spine User Guide.",
      "scope": "global",
      "memberof": "IkConstraintData"
    },
    {
      "comment": "/** The bones that are constrained by this IK constraint. */",
      "meta": {
        "range": [
          2306,
          2330
        ],
        "filename": "IkConstraintData.js",
        "lineno": 44,
        "columnno": 8,
        "path": "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist",
        "code": {
          "id": "astnode100023173",
          "name": "this.bones",
          "type": "NewExpression",
          "value": "",
          "paramnames": []
        }
      },
      "description": "<p>The bones that are constrained by this IK constraint.</p>",
      "name": "bones",
      "longname": "IkConstraintData#bones",
      "kind": "member",
      "memberof": "IkConstraintData",
      "scope": "instance"
    },
    {
      "comment": "/** The bone that is the IK target. */",
      "meta": {
        "range": [
          2387,
          2406
        ],
        "filename": "IkConstraintData.js",
        "lineno": 46,
        "columnno": 8,
        "path": "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist",
        "code": {
          "id": "astnode100023180",
          "name": "this._target",
          "type": "Literal",
          "value": null,
          "paramnames": []
        }
      },
      "description": "<p>The bone that is the IK target.</p>",
      "name": "_target",
      "longname": "IkConstraintData#_target",
      "kind": "member",
      "memberof": "IkConstraintData",
      "scope": "instance"
    },
    {
      "comment": "/** Controls the bend direction of the IK bones, either 1 or -1. */",
      "meta": {
        "range": [
          2492,
          2514
        ],
        "filename": "IkConstraintData.js",
        "lineno": 48,
        "columnno": 8,
        "path": "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist",
        "code": {
          "id": "astnode100023186",
          "name": "this.bendDirection",
          "type": "Literal",
          "value": 1,
          "paramnames": []
        }
      },
      "description": "<p>Controls the bend direction of the IK bones, either 1 or -1.</p>",
      "name": "bendDirection",
      "longname": "IkConstraintData#bendDirection",
      "kind": "member",
      "memberof": "IkConstraintData",
      "scope": "instance"
    },
    {
      "comment": "/** When true and only a single bone is being constrained, if the target is too close, the bone is scaled to reach it. */",
      "meta": {
        "range": [
          2654,
          2675
        ],
        "filename": "IkConstraintData.js",
        "lineno": 50,
        "columnno": 8,
        "path": "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist",
        "code": {
          "id": "astnode100023192",
          "name": "this.compress",
          "type": "Literal",
          "value": false,
          "paramnames": []
        }
      },
      "description": "<p>When true and only a single bone is being constrained, if the target is too close, the bone is scaled to reach it.</p>",
      "name": "compress",
      "longname": "IkConstraintData#compress",
      "kind": "member",
      "memberof": "IkConstraintData",
      "scope": "instance"
    },
    {
      "comment": "/** When true, if the target is out of range, the parent bone is scaled to reach it. If more than one bone is being constrained\n         * and the parent bone has local nonuniform scale, stretch is not applied. */",
      "meta": {
        "range": [
          2907,
          2927
        ],
        "filename": "IkConstraintData.js",
        "lineno": 53,
        "columnno": 8,
        "path": "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist",
        "code": {
          "id": "astnode100023198",
          "name": "this.stretch",
          "type": "Literal",
          "value": false,
          "paramnames": []
        }
      },
      "description": "<p>When true, if the target is out of range, the parent bone is scaled to reach it. If more than one bone is being constrained\nand the parent bone has local nonuniform scale, stretch is not applied.</p>",
      "name": "stretch",
      "longname": "IkConstraintData#stretch",
      "kind": "member",
      "memberof": "IkConstraintData",
      "scope": "instance"
    },
    {
      "comment": "/** When true, only a single bone is being constrained, and {@link #getCompress()} or {@link #getStretch()} is used, the bone\n         * is scaled on both the X and Y axes. */",
      "meta": {
        "range": [
          3121,
          3141
        ],
        "filename": "IkConstraintData.js",
        "lineno": 56,
        "columnno": 8,
        "path": "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist",
        "code": {
          "id": "astnode100023204",
          "name": "this.uniform",
          "type": "Literal",
          "value": false,
          "paramnames": []
        }
      },
      "description": "<p>When true, only a single bone is being constrained, and {@link #getCompress()} or {@link #getStretch()} is used, the bone\nis scaled on both the X and Y axes.</p>",
      "name": "uniform",
      "longname": "IkConstraintData#uniform",
      "kind": "member",
      "memberof": "IkConstraintData",
      "scope": "instance"
    },
    {
      "comment": "/** A percentage (0-1) that controls the mix between the constrained and unconstrained rotations. */",
      "meta": {
        "range": [
          3260,
          3272
        ],
        "filename": "IkConstraintData.js",
        "lineno": 58,
        "columnno": 8,
        "path": "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist",
        "code": {
          "id": "astnode100023210",
          "name": "this.mix",
          "type": "Literal",
          "value": 1,
          "paramnames": []
        }
      },
      "description": "<p>A percentage (0-1) that controls the mix between the constrained and unconstrained rotations.</p>",
      "name": "mix",
      "longname": "IkConstraintData#mix",
      "kind": "member",
      "memberof": "IkConstraintData",
      "scope": "instance"
    },
    {
      "comment": "/** For two bone IK, the distance from the maximum reach of the bones that rotation will slow. */",
      "meta": {
        "range": [
          3388,
          3405
        ],
        "filename": "IkConstraintData.js",
        "lineno": 60,
        "columnno": 8,
        "path": "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist",
        "code": {
          "id": "astnode100023216",
          "name": "this.softness",
          "type": "Literal",
          "value": 0,
          "paramnames": []
        }
      },
      "description": "<p>For two bone IK, the distance from the maximum reach of the bones that rotation will slow.</p>",
      "name": "softness",
      "longname": "IkConstraintData#softness",
      "kind": "member",
      "memberof": "IkConstraintData",
      "scope": "instance"
    },
    {
      "comment": "/** Stores the current pose for a path constraint. A path constraint adjusts the rotation, translation, and scale of the\n * constrained bones so they follow a {@link PathAttachment}.\n *\n * See [Path constraints](http://esotericsoftware.com/spine-path-constraints) in the Spine User Guide. */",
      "meta": {
        "range": [
          2179,
          20368
        ],
        "filename": "PathConstraint.js",
        "lineno": 36,
        "columnno": 0,
        "path": "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist",
        "code": {
          "id": "astnode100023241",
          "name": "exports.PathConstraint",
          "type": "ClassDeclaration"
        }
      },
      "name": "PathConstraint",
      "longname": "PathConstraint",
      "kind": "class",
      "classdesc": "<p>Stores the current pose for a path constraint. A path constraint adjusts the rotation, translation, and scale of the\nconstrained bones so they follow a {@link PathAttachment}.</p>\n<p>See <a href=\"http://esotericsoftware.com/spine-path-constraints\">Path constraints</a> in the Spine User Guide.</p>",
      "scope": "global",
      "memberof": "PathConstraint"
    },
    {
      "comment": "/** The position along the path. */",
      "meta": {
        "range": [
          2295,
          2312
        ],
        "filename": "PathConstraint.js",
        "lineno": 39,
        "columnno": 8,
        "path": "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist",
        "code": {
          "id": "astnode100023252",
          "name": "this.position",
          "type": "Literal",
          "value": 0,
          "paramnames": []
        }
      },
      "description": "<p>The position along the path.</p>",
      "name": "position",
      "longname": "PathConstraint#position",
      "kind": "member",
      "memberof": "PathConstraint",
      "scope": "instance"
    },
    {
      "comment": "/** The spacing between bones. */",
      "meta": {
        "range": [
          2364,
          2380
        ],
        "filename": "PathConstraint.js",
        "lineno": 41,
        "columnno": 8,
        "path": "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist",
        "code": {
          "id": "astnode100023258",
          "name": "this.spacing",
          "type": "Literal",
          "value": 0,
          "paramnames": []
        }
      },
      "description": "<p>The spacing between bones.</p>",
      "name": "spacing",
      "longname": "PathConstraint#spacing",
      "kind": "member",
      "memberof": "PathConstraint",
      "scope": "instance"
    },
    {
      "comment": "/** Stores the setup pose for a {@link PathConstraint}.\n *\n * See [path constraints](http://esotericsoftware.com/spine-path-constraints) in the Spine User Guide. */",
      "meta": {
        "range": [
          1918,
          3125
        ],
        "filename": "PathConstraintData.js",
        "lineno": 33,
        "columnno": 0,
        "path": "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist",
        "code": {
          "id": "astnode100026279",
          "name": "exports.PathConstraintData",
          "type": "ClassDeclaration"
        }
      },
      "name": "PathConstraintData",
      "longname": "PathConstraintData",
      "kind": "class",
      "classdesc": "<p>Stores the setup pose for a {@link PathConstraint}.</p>\n<p>See <a href=\"http://esotericsoftware.com/spine-path-constraints\">path constraints</a> in the Spine User Guide.</p>",
      "scope": "global",
      "memberof": "PathConstraintData"
    },
    {
      "comment": "/** The bones that will be modified by this path constraint. */",
      "meta": {
        "range": [
          2312,
          2336
        ],
        "filename": "PathConstraintData.js",
        "lineno": 44,
        "columnno": 8,
        "path": "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist",
        "code": {
          "id": "astnode100026324",
          "name": "this.bones",
          "type": "NewExpression",
          "value": "",
          "paramnames": []
        }
      },
      "description": "<p>The bones that will be modified by this path constraint.</p>",
      "name": "bones",
      "longname": "PathConstraintData#bones",
      "kind": "member",
      "memberof": "PathConstraintData",
      "scope": "instance"
    },
    {
      "comment": "/** The slot whose path attachment will be used to constrained the bones. */",
      "meta": {
        "range": [
          2431,
          2450
        ],
        "filename": "PathConstraintData.js",
        "lineno": 46,
        "columnno": 8,
        "path": "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist",
        "code": {
          "id": "astnode100026331",
          "name": "this._target",
          "type": "Literal",
          "value": null,
          "paramnames": []
        }
      },
      "description": "<p>The slot whose path attachment will be used to constrained the bones.</p>",
      "name": "_target",
      "longname": "PathConstraintData#_target",
      "kind": "member",
      "memberof": "PathConstraintData",
      "scope": "instance"
    },
    {
      "comment": "/** The mode for positioning the first bone on the path. */",
      "meta": {
        "range": [
          2528,
          2566
        ],
        "filename": "PathConstraintData.js",
        "lineno": 48,
        "columnno": 8,
        "path": "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist",
        "code": {
          "id": "astnode100026337",
          "name": "this.positionMode",
          "type": "MemberExpression",
          "value": "PositionMode.Fixed",
          "paramnames": []
        }
      },
      "description": "<p>The mode for positioning the first bone on the path.</p>",
      "name": "positionMode",
      "longname": "PathConstraintData#positionMode",
      "kind": "member",
      "memberof": "PathConstraintData",
      "scope": "instance"
    },
    {
      "comment": "/** The mode for positioning the bones after the first bone on the path. */",
      "meta": {
        "range": [
          2660,
          2696
        ],
        "filename": "PathConstraintData.js",
        "lineno": 50,
        "columnno": 8,
        "path": "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist",
        "code": {
          "id": "astnode100026345",
          "name": "this.spacingMode",
          "type": "MemberExpression",
          "value": "SpacingMode.Fixed",
          "paramnames": []
        }
      },
      "description": "<p>The mode for positioning the bones after the first bone on the path.</p>",
      "name": "spacingMode",
      "longname": "PathConstraintData#spacingMode",
      "kind": "member",
      "memberof": "PathConstraintData",
      "scope": "instance"
    },
    {
      "comment": "/** The mode for adjusting the rotation of the bones. */",
      "meta": {
        "range": [
          2771,
          2805
        ],
        "filename": "PathConstraintData.js",
        "lineno": 52,
        "columnno": 8,
        "path": "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist",
        "code": {
          "id": "astnode100026353",
          "name": "this.rotateMode",
          "type": "MemberExpression",
          "value": "RotateMode.Chain",
          "paramnames": []
        }
      },
      "description": "<p>The mode for adjusting the rotation of the bones.</p>",
      "name": "rotateMode",
      "longname": "PathConstraintData#rotateMode",
      "kind": "member",
      "memberof": "PathConstraintData",
      "scope": "instance"
    },
    {
      "comment": "/** An offset added to the constrained bone rotation. */",
      "meta": {
        "range": [
          2880,
          2903
        ],
        "filename": "PathConstraintData.js",
        "lineno": 54,
        "columnno": 8,
        "path": "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist",
        "code": {
          "id": "astnode100026361",
          "name": "this.offsetRotation",
          "type": "Literal",
          "value": 0,
          "paramnames": []
        }
      },
      "description": "<p>An offset added to the constrained bone rotation.</p>",
      "name": "offsetRotation",
      "longname": "PathConstraintData#offsetRotation",
      "kind": "member",
      "memberof": "PathConstraintData",
      "scope": "instance"
    },
    {
      "comment": "/** The position along the path. */",
      "meta": {
        "range": [
          2957,
          2974
        ],
        "filename": "PathConstraintData.js",
        "lineno": 56,
        "columnno": 8,
        "path": "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist",
        "code": {
          "id": "astnode100026367",
          "name": "this.position",
          "type": "Literal",
          "value": 0,
          "paramnames": []
        }
      },
      "description": "<p>The position along the path.</p>",
      "name": "position",
      "longname": "PathConstraintData#position",
      "kind": "member",
      "memberof": "PathConstraintData",
      "scope": "instance"
    },
    {
      "comment": "/** The spacing between bones. */",
      "meta": {
        "range": [
          3026,
          3042
        ],
        "filename": "PathConstraintData.js",
        "lineno": 58,
        "columnno": 8,
        "path": "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist",
        "code": {
          "id": "astnode100026373",
          "name": "this.spacing",
          "type": "Literal",
          "value": 0,
          "paramnames": []
        }
      },
      "description": "<p>The spacing between bones.</p>",
      "name": "spacing",
      "longname": "PathConstraintData#spacing",
      "kind": "member",
      "memberof": "PathConstraintData",
      "scope": "instance"
    },
    {
      "comment": "/** Controls how the first bone is positioned along the path.\n *\n * See [position](http://esotericsoftware.com/spine-path-constraints#Position) in the Spine User Guide. */",
      "meta": {
        "range": [
          3298,
          3322
        ],
        "filename": "PathConstraintData.js",
        "lineno": 67,
        "columnno": 0,
        "path": "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist",
        "code": {
          "id": "astnode100026396",
          "name": "exports.PositionMode",
          "type": "VariableDeclaration"
        }
      },
      "description": "<p>Controls how the first bone is positioned along the path.</p>\n<p>See <a href=\"http://esotericsoftware.com/spine-path-constraints#Position\">position</a> in the Spine User Guide.</p>",
      "name": "PositionMode",
      "longname": "PositionMode",
      "kind": "member",
      "scope": "global"
    },
    {
      "comment": "/** Controls how bones after the first bone are positioned along the path.\n *\n * See [spacing](http://esotericsoftware.com/spine-path-constraints#Spacing) in the Spine User Guide. */",
      "meta": {
        "range": [
          3688,
          3711
        ],
        "filename": "PathConstraintData.js",
        "lineno": 75,
        "columnno": 0,
        "path": "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist",
        "code": {
          "id": "astnode100026430",
          "name": "exports.SpacingMode",
          "type": "VariableDeclaration"
        }
      },
      "description": "<p>Controls how bones after the first bone are positioned along the path.</p>\n<p>See <a href=\"http://esotericsoftware.com/spine-path-constraints#Spacing\">spacing</a> in the Spine User Guide.</p>",
      "name": "SpacingMode",
      "longname": "SpacingMode",
      "kind": "member",
      "scope": "global"
    },
    {
      "comment": "/** Controls how bones are rotated, translated, and scaled to match the path.\n *\n * See [rotate mix](http://esotericsoftware.com/spine-path-constraints#Rotate-mix) in the Spine User Guide. */",
      "meta": {
        "range": [
          4201,
          4223
        ],
        "filename": "PathConstraintData.js",
        "lineno": 85,
        "columnno": 0,
        "path": "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist",
        "code": {
          "id": "astnode100026484",
          "name": "exports.RotateMode",
          "type": "VariableDeclaration"
        }
      },
      "description": "<p>Controls how bones are rotated, translated, and scaled to match the path.</p>\n<p>See <a href=\"http://esotericsoftware.com/spine-path-constraints#Rotate-mix\">rotate mix</a> in the Spine User Guide.</p>",
      "name": "RotateMode",
      "longname": "RotateMode",
      "kind": "member",
      "scope": "global"
    },
    {
      "comment": "/** Stores the current pose for a skeleton.\n *\n * See [Instance objects](http://esotericsoftware.com/spine-runtime-architecture#Instance-objects) in the Spine Runtimes Guide. */",
      "meta": {
        "range": [
          2354,
          26278
        ],
        "filename": "Skeleton.js",
        "lineno": 41,
        "columnno": 0,
        "path": "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist",
        "code": {
          "id": "astnode100026572",
          "name": "exports.Skeleton",
          "type": "ClassDeclaration"
        }
      },
      "name": "Skeleton",
      "longname": "Skeleton",
      "kind": "class",
      "classdesc": "<p>Stores the current pose for a skeleton.</p>\n<p>See <a href=\"http://esotericsoftware.com/spine-runtime-architecture#Instance-objects\">Instance objects</a> in the Spine Runtimes Guide.</p>",
      "scope": "global",
      "memberof": "Skeleton"
    },
    {
      "comment": "/** The list of bones and constraints, sorted in the order they should be updated, as computed by {@link #updateCache()}. */",
      "meta": {
        "range": [
          2698,
          2729
        ],
        "filename": "Skeleton.js",
        "lineno": 51,
        "columnno": 8,
        "path": "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist",
        "code": {
          "id": "astnode100026609",
          "name": "this._updateCache",
          "type": "NewExpression",
          "value": "",
          "paramnames": []
        }
      },
      "description": "<p>The list of bones and constraints, sorted in the order they should be updated, as computed by {@link #updateCache()}.</p>",
      "name": "_updateCache",
      "longname": "Skeleton#_updateCache",
      "kind": "member",
      "memberof": "Skeleton",
      "scope": "instance"
    },
    {
      "comment": "/** The skeleton's current skin. May be null. */",
      "meta": {
        "range": [
          2796,
          2812
        ],
        "filename": "Skeleton.js",
        "lineno": 53,
        "columnno": 8,
        "path": "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist",
        "code": {
          "id": "astnode100026616",
          "name": "this.skin",
          "type": "Literal",
          "value": null,
          "paramnames": []
        }
      },
      "description": "<p>The skeleton's current skin. May be null.</p>",
      "name": "skin",
      "longname": "Skeleton#skin",
      "kind": "member",
      "memberof": "Skeleton",
      "scope": "instance"
    },
    {
      "comment": "/** Scales the entire skeleton on the X axis. This affects all bones, even if the bone's transform mode disallows scale\n          * inheritance. */",
      "meta": {
        "range": [
          2978,
          2993
        ],
        "filename": "Skeleton.js",
        "lineno": 56,
        "columnno": 8,
        "path": "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist",
        "code": {
          "id": "astnode100026622",
          "name": "this.scaleX",
          "type": "Literal",
          "value": 1,
          "paramnames": []
        }
      },
      "description": "<p>Scales the entire skeleton on the X axis. This affects all bones, even if the bone's transform mode disallows scale\ninheritance.</p>",
      "name": "scaleX",
      "longname": "Skeleton#scaleX",
      "kind": "member",
      "memberof": "Skeleton",
      "scope": "instance"
    },
    {
      "comment": "/** Scales the entire skeleton on the Y axis. This affects all bones, even if the bone's transform mode disallows scale\n          * inheritance. */",
      "meta": {
        "range": [
          3159,
          3175
        ],
        "filename": "Skeleton.js",
        "lineno": 59,
        "columnno": 8,
        "path": "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist",
        "code": {
          "id": "astnode100026628",
          "name": "this._scaleY",
          "type": "Literal",
          "value": 1,
          "paramnames": []
        }
      },
      "description": "<p>Scales the entire skeleton on the Y axis. This affects all bones, even if the bone's transform mode disallows scale\ninheritance.</p>",
      "name": "_scaleY",
      "longname": "Skeleton#_scaleY",
      "kind": "member",
      "memberof": "Skeleton",
      "scope": "instance"
    },
    {
      "comment": "/** Sets the skeleton X position, which is added to the root bone worldX position. */",
      "meta": {
        "range": [
          3279,
          3289
        ],
        "filename": "Skeleton.js",
        "lineno": 61,
        "columnno": 8,
        "path": "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist",
        "code": {
          "id": "astnode100026634",
          "name": "this.x",
          "type": "Literal",
          "value": 0,
          "paramnames": []
        }
      },
      "description": "<p>Sets the skeleton X position, which is added to the root bone worldX position.</p>",
      "name": "x",
      "longname": "Skeleton#x",
      "kind": "member",
      "memberof": "Skeleton",
      "scope": "instance"
    },
    {
      "comment": "/** Sets the skeleton Y position, which is added to the root bone worldY position. */",
      "meta": {
        "range": [
          3393,
          3403
        ],
        "filename": "Skeleton.js",
        "lineno": 63,
        "columnno": 8,
        "path": "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist",
        "code": {
          "id": "astnode100026640",
          "name": "this.y",
          "type": "Literal",
          "value": 0,
          "paramnames": []
        }
      },
      "description": "<p>Sets the skeleton Y position, which is added to the root bone worldY position.</p>",
      "name": "y",
      "longname": "Skeleton#y",
      "kind": "member",
      "memberof": "Skeleton",
      "scope": "instance"
    },
    {
      "comment": "/** Caches information about bones and constraints. Must be called if the {@link #getSkin()} is modified or if bones,\n     * constraints, or weighted path attachments are added or removed. */",
      "meta": {
        "range": [
          5442,
          7580
        ],
        "filename": "Skeleton.js",
        "lineno": 109,
        "columnno": 4,
        "path": "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist",
        "code": {
          "id": "astnode100026952",
          "name": "Skeleton#updateCache",
          "type": "MethodDefinition",
          "paramnames": []
        },
        "vars": {
          "": null
        }
      },
      "description": "<p>Caches information about bones and constraints. Must be called if the {@link #getSkin()} is modified or if bones,\nconstraints, or weighted path attachments are added or removed.</p>",
      "name": "updateCache",
      "longname": "Skeleton#updateCache",
      "kind": "function",
      "memberof": "Skeleton",
      "scope": "instance",
      "params": []
    },
    {
      "comment": "/** Updates the world transform for each bone and applies all constraints.\n     *\n     * See [World transforms](http://esotericsoftware.com/spine-runtime-skeletons#World-transforms) in the Spine\n     * Runtimes Guide. */",
      "meta": {
        "range": [
          12413,
          12980
        ],
        "filename": "Skeleton.js",
        "lineno": 282,
        "columnno": 4,
        "path": "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist",
        "code": {
          "id": "astnode100028006",
          "name": "Skeleton#updateWorldTransform",
          "type": "MethodDefinition",
          "paramnames": []
        },
        "vars": {
          "": null
        }
      },
      "description": "<p>Updates the world transform for each bone and applies all constraints.</p>\n<p>See <a href=\"http://esotericsoftware.com/spine-runtime-skeletons#World-transforms\">World transforms</a> in the Spine\nRuntimes Guide.</p>",
      "name": "updateWorldTransform",
      "longname": "Skeleton#updateWorldTransform",
      "kind": "function",
      "memberof": "Skeleton",
      "scope": "instance",
      "params": []
    },
    {
      "comment": "/** Sets the bones, constraints, and slots to their setup pose values. */",
      "meta": {
        "range": [
          14448,
          14544
        ],
        "filename": "Skeleton.js",
        "lineno": 324,
        "columnno": 4,
        "path": "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist",
        "code": {
          "id": "astnode100028375",
          "name": "Skeleton#setToSetupPose",
          "type": "MethodDefinition",
          "paramnames": []
        },
        "vars": {
          "": null
        }
      },
      "description": "<p>Sets the bones, constraints, and slots to their setup pose values.</p>",
      "name": "setToSetupPose",
      "longname": "Skeleton#setToSetupPose",
      "kind": "function",
      "memberof": "Skeleton",
      "scope": "instance",
      "params": []
    },
    {
      "comment": "/** Sets the bones and constraints to their setup pose values. */",
      "meta": {
        "range": [
          14619,
          16209
        ],
        "filename": "Skeleton.js",
        "lineno": 329,
        "columnno": 4,
        "path": "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist",
        "code": {
          "id": "astnode100028389",
          "name": "Skeleton#setBonesToSetupPose",
          "type": "MethodDefinition",
          "paramnames": []
        },
        "vars": {
          "": null
        }
      },
      "description": "<p>Sets the bones and constraints to their setup pose values.</p>",
      "name": "setBonesToSetupPose",
      "longname": "Skeleton#setBonesToSetupPose",
      "kind": "function",
      "memberof": "Skeleton",
      "scope": "instance",
      "params": []
    },
    {
      "comment": "/** Sets the slots and draw order to their setup pose values. */",
      "meta": {
        "range": [
          16283,
          16505
        ],
        "filename": "Skeleton.js",
        "lineno": 365,
        "columnno": 4,
        "path": "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist",
        "code": {
          "id": "astnode100028655",
          "name": "Skeleton#setSlotsToSetupPose",
          "type": "MethodDefinition",
          "paramnames": []
        },
        "vars": {
          "": null
        }
      },
      "description": "<p>Sets the slots and draw order to their setup pose values.</p>",
      "name": "setSlotsToSetupPose",
      "longname": "Skeleton#setSlotsToSetupPose",
      "kind": "function",
      "memberof": "Skeleton",
      "scope": "instance",
      "params": []
    },
    {
      "comment": "/** @returns May return null. */",
      "meta": {
        "range": [
          16547,
          16659
        ],
        "filename": "Skeleton.js",
        "lineno": 372,
        "columnno": 4,
        "path": "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist",
        "code": {
          "id": "astnode100028701",
          "name": "Skeleton#getRootBone",
          "type": "MethodDefinition",
          "paramnames": []
        },
        "vars": {
          "": null
        }
      },
      "returns": [
        {
          "description": "<p>May return null.</p>"
        }
      ],
      "name": "getRootBone",
      "longname": "Skeleton#getRootBone",
      "kind": "function",
      "memberof": "Skeleton",
      "scope": "instance",
      "params": []
    },
    {
      "comment": "/** @returns May be null. */",
      "meta": {
        "range": [
          16697,
          17028
        ],
        "filename": "Skeleton.js",
        "lineno": 378,
        "columnno": 4,
        "path": "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist",
        "code": {
          "id": "astnode100028721",
          "name": "Skeleton#findBone",
          "type": "MethodDefinition",
          "paramnames": [
            "boneName"
          ]
        },
        "vars": {
          "": null
        }
      },
      "returns": [
        {
          "description": "<p>May be null.</p>"
        }
      ],
      "name": "findBone",
      "longname": "Skeleton#findBone",
      "kind": "function",
      "memberof": "Skeleton",
      "scope": "instance",
      "params": []
    },
    {
      "comment": "/** Finds a slot by comparing each slot's name. It is more efficient to cache the results of this method than to call it\n     * repeatedly.\n     * @returns May be null. */",
      "meta": {
        "range": [
          17209,
          17540
        ],
        "filename": "Skeleton.js",
        "lineno": 392,
        "columnno": 4,
        "path": "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist",
        "code": {
          "id": "astnode100028773",
          "name": "Skeleton#findSlot",
          "type": "MethodDefinition",
          "paramnames": [
            "slotName"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "<p>Finds a slot by comparing each slot's name. It is more efficient to cache the results of this method than to call it\nrepeatedly.</p>",
      "returns": [
        {
          "description": "<p>May be null.</p>"
        }
      ],
      "name": "findSlot",
      "longname": "Skeleton#findSlot",
      "kind": "function",
      "memberof": "Skeleton",
      "scope": "instance",
      "params": []
    },
    {
      "comment": "/** Sets a skin by name.\n     *\n     * See {@link #setSkin()}. */",
      "meta": {
        "range": [
          17615,
          17802
        ],
        "filename": "Skeleton.js",
        "lineno": 406,
        "columnno": 4,
        "path": "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist",
        "code": {
          "id": "astnode100028825",
          "name": "Skeleton#setSkinByName",
          "type": "MethodDefinition",
          "paramnames": [
            "skinName"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "<p>Sets a skin by name.</p>\n<p>See {@link #setSkin()}.</p>",
      "name": "setSkinByName",
      "longname": "Skeleton#setSkinByName",
      "kind": "function",
      "memberof": "Skeleton",
      "scope": "instance",
      "params": []
    },
    {
      "comment": "/** Sets the skin used to look up attachments before looking in the {@link SkeletonData#defaultSkin default skin}. If the\n     * skin is changed, {@link #updateCache()} is called.\n     *\n     * Attachments from the new skin are attached if the corresponding attachment from the old skin was attached. If there was no\n     * old skin, each slot's setup mode attachment is attached from the new skin.\n     *\n     * After changing the skin, the visible attachments can be reset to those attached in the setup pose by calling\n     * {@link #setSlotsToSetupPose()}. Also, often {@link AnimationState#apply()} is called before the next time the\n     * skeleton is rendered to allow any attachment keys in the current animation(s) to hide or show attachments from the new skin.\n     * @param newSkin May be null. */",
      "meta": {
        "range": [
          18620,
          19347
        ],
        "filename": "Skeleton.js",
        "lineno": 422,
        "columnno": 4,
        "path": "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist",
        "code": {
          "id": "astnode100028855",
          "name": "Skeleton#setSkin",
          "type": "MethodDefinition",
          "paramnames": [
            "newSkin"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "<p>Sets the skin used to look up attachments before looking in the {@link SkeletonData#defaultSkin default skin}. If the\nskin is changed, {@link #updateCache()} is called.</p>\n<p>Attachments from the new skin are attached if the corresponding attachment from the old skin was attached. If there was no\nold skin, each slot's setup mode attachment is attached from the new skin.</p>\n<p>After changing the skin, the visible attachments can be reset to those attached in the setup pose by calling\n{@link #setSlotsToSetupPose()}. Also, often {@link AnimationState#apply()} is called before the next time the\nskeleton is rendered to allow any attachment keys in the current animation(s) to hide or show attachments from the new skin.</p>",
      "params": [
        {
          "description": "<p>May be null.</p>",
          "name": "newSkin"
        }
      ],
      "name": "setSkin",
      "longname": "Skeleton#setSkin",
      "kind": "function",
      "memberof": "Skeleton",
      "scope": "instance"
    },
    {
      "comment": "/** Finds an attachment by looking in the {@link #skin} and {@link SkeletonData#defaultSkin} using the slot name and attachment\n     * name.\n     *\n     * See {@link #getAttachment()}.\n     * @returns May be null. */",
      "meta": {
        "range": [
          19573,
          19827
        ],
        "filename": "Skeleton.js",
        "lineno": 449,
        "columnno": 4,
        "path": "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist",
        "code": {
          "id": "astnode100028951",
          "name": "Skeleton#getAttachmentByName",
          "type": "MethodDefinition",
          "paramnames": [
            "slotName",
            "attachmentName"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "<p>Finds an attachment by looking in the {@link #skin} and {@link SkeletonData#defaultSkin} using the slot name and attachment\nname.</p>\n<p>See {@link #getAttachment()}.</p>",
      "returns": [
        {
          "description": "<p>May be null.</p>"
        }
      ],
      "name": "getAttachmentByName",
      "longname": "Skeleton#getAttachmentByName",
      "kind": "function",
      "memberof": "Skeleton",
      "scope": "instance",
      "params": []
    },
    {
      "comment": "/** Finds an attachment by looking in the {@link #skin} and {@link SkeletonData#defaultSkin} using the slot index and\n     * attachment name. First the skin is checked and if the attachment was not found, the default skin is checked.\n     *\n     * See [Runtime skins](http://esotericsoftware.com/spine-runtime-skins) in the Spine Runtimes Guide.\n     * @returns May be null. */",
      "meta": {
        "range": [
          20214,
          20672
        ],
        "filename": "Skeleton.js",
        "lineno": 460,
        "columnno": 4,
        "path": "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist",
        "code": {
          "id": "astnode100028986",
          "name": "Skeleton#getAttachment",
          "type": "MethodDefinition",
          "paramnames": [
            "slotIndex",
            "attachmentName"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "<p>Finds an attachment by looking in the {@link #skin} and {@link SkeletonData#defaultSkin} using the slot index and\nattachment name. First the skin is checked and if the attachment was not found, the default skin is checked.</p>\n<p>See <a href=\"http://esotericsoftware.com/spine-runtime-skins\">Runtime skins</a> in the Spine Runtimes Guide.</p>",
      "returns": [
        {
          "description": "<p>May be null.</p>"
        }
      ],
      "name": "getAttachment",
      "longname": "Skeleton#getAttachment",
      "kind": "function",
      "memberof": "Skeleton",
      "scope": "instance",
      "params": []
    },
    {
      "comment": "/** A convenience method to set an attachment by finding the slot with {@link #findSlot()}, finding the attachment with\n     * {@link #getAttachment()}, then setting the slot's {@link Slot#attachment}.\n     * @param attachmentName May be null to clear the slot's attachment. */",
      "meta": {
        "range": [
          20959,
          21721
        ],
        "filename": "Skeleton.js",
        "lineno": 475,
        "columnno": 4,
        "path": "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist",
        "code": {
          "id": "astnode100029038",
          "name": "Skeleton#setAttachment",
          "type": "MethodDefinition",
          "paramnames": [
            "slotName",
            "attachmentName"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "<p>A convenience method to set an attachment by finding the slot with {@link #findSlot()}, finding the attachment with\n{@link #getAttachment()}, then setting the slot's {@link Slot#attachment}.</p>",
      "params": [
        {
          "description": "<p>May be null to clear the slot's attachment.</p>",
          "name": "attachmentName"
        }
      ],
      "name": "setAttachment",
      "longname": "Skeleton#setAttachment",
      "kind": "function",
      "memberof": "Skeleton",
      "scope": "instance"
    },
    {
      "comment": "/** Finds an IK constraint by comparing each IK constraint's name. It is more efficient to cache the results of this method\n     * than to call it repeatedly.\n     * @return May be null. */",
      "meta": {
        "range": [
          21920,
          22339
        ],
        "filename": "Skeleton.js",
        "lineno": 497,
        "columnno": 4,
        "path": "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist",
        "code": {
          "id": "astnode100029130",
          "name": "Skeleton#findIkConstraint",
          "type": "MethodDefinition",
          "paramnames": [
            "constraintName"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "<p>Finds an IK constraint by comparing each IK constraint's name. It is more efficient to cache the results of this method\nthan to call it repeatedly.</p>",
      "returns": [
        {
          "description": "<p>May be null.</p>"
        }
      ],
      "name": "findIkConstraint",
      "longname": "Skeleton#findIkConstraint",
      "kind": "function",
      "memberof": "Skeleton",
      "scope": "instance",
      "params": []
    },
    {
      "comment": "/** Finds a transform constraint by comparing each transform constraint's name. It is more efficient to cache the results of\n     * this method than to call it repeatedly.\n     * @return May be null. */",
      "meta": {
        "range": [
          22551,
          22999
        ],
        "filename": "Skeleton.js",
        "lineno": 511,
        "columnno": 4,
        "path": "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist",
        "code": {
          "id": "astnode100029182",
          "name": "Skeleton#findTransformConstraint",
          "type": "MethodDefinition",
          "paramnames": [
            "constraintName"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "<p>Finds a transform constraint by comparing each transform constraint's name. It is more efficient to cache the results of\nthis method than to call it repeatedly.</p>",
      "returns": [
        {
          "description": "<p>May be null.</p>"
        }
      ],
      "name": "findTransformConstraint",
      "longname": "Skeleton#findTransformConstraint",
      "kind": "function",
      "memberof": "Skeleton",
      "scope": "instance",
      "params": []
    },
    {
      "comment": "/** Finds a path constraint by comparing each path constraint's name. It is more efficient to cache the results of this method\n     * than to call it repeatedly.\n     * @return May be null. */",
      "meta": {
        "range": [
          23201,
          23624
        ],
        "filename": "Skeleton.js",
        "lineno": 525,
        "columnno": 4,
        "path": "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist",
        "code": {
          "id": "astnode100029234",
          "name": "Skeleton#findPathConstraint",
          "type": "MethodDefinition",
          "paramnames": [
            "constraintName"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "<p>Finds a path constraint by comparing each path constraint's name. It is more efficient to cache the results of this method\nthan to call it repeatedly.</p>",
      "returns": [
        {
          "description": "<p>May be null.</p>"
        }
      ],
      "name": "findPathConstraint",
      "longname": "Skeleton#findPathConstraint",
      "kind": "function",
      "memberof": "Skeleton",
      "scope": "instance",
      "params": []
    },
    {
      "comment": "/** Returns the axis aligned bounding box (AABB) of the region and mesh attachments for the current pose as `{ x: number, y: number, width: number, height: number }`.\n     * Note that this method will create temporary objects which can add to garbage collection pressure. Use `getBounds()` if garbage collection is a concern. */",
      "meta": {
        "range": [
          23962,
          24169
        ],
        "filename": "Skeleton.js",
        "lineno": 538,
        "columnno": 4,
        "path": "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist",
        "code": {
          "id": "astnode100029286",
          "name": "Skeleton#getBoundsRect",
          "type": "MethodDefinition",
          "paramnames": []
        },
        "vars": {
          "": null
        }
      },
      "description": "<p>Returns the axis aligned bounding box (AABB) of the region and mesh attachments for the current pose as <code>{ x: number, y: number, width: number, height: number }</code>.\nNote that this method will create temporary objects which can add to garbage collection pressure. Use <code>getBounds()</code> if garbage collection is a concern.</p>",
      "name": "getBoundsRect",
      "longname": "Skeleton#getBoundsRect",
      "kind": "function",
      "memberof": "Skeleton",
      "scope": "instance",
      "params": []
    },
    {
      "comment": "/** Returns the axis aligned bounding box (AABB) of the region and mesh attachments for the current pose.\n     * @param offset An output value, the distance from the skeleton origin to the bottom left corner of the AABB.\n     * @param size An output value, the width and height of the AABB.\n     * @param temp Working memory to temporarily store attachments' computed world vertices. */",
      "meta": {
        "range": [
          24565,
          26276
        ],
        "filename": "Skeleton.js",
        "lineno": 548,
        "columnno": 4,
        "path": "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist",
        "code": {
          "id": "astnode100029325",
          "name": "Skeleton#getBounds",
          "type": "MethodDefinition",
          "paramnames": [
            "offset",
            "size",
            "temp"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "<p>Returns the axis aligned bounding box (AABB) of the region and mesh attachments for the current pose.</p>",
      "params": [
        {
          "description": "<p>An output value, the distance from the skeleton origin to the bottom left corner of the AABB.</p>",
          "name": "offset"
        },
        {
          "description": "<p>An output value, the width and height of the AABB.</p>",
          "name": "size"
        },
        {
          "description": "<p>Working memory to temporarily store attachments' computed world vertices.</p>",
          "name": "temp"
        }
      ],
      "name": "getBounds",
      "longname": "Skeleton#getBounds",
      "kind": "function",
      "memberof": "Skeleton",
      "scope": "instance"
    },
    {
      "comment": "/** Loads skeleton data in the Spine binary format.\n *\n * See [Spine binary format](http://esotericsoftware.com/spine-binary-format) and\n * [JSON and binary data](http://esotericsoftware.com/spine-loading-skeleton-data#JSON-and-binary-data) in the Spine\n * Runtimes Guide. */",
      "meta": {
        "range": [
          3039,
          51637
        ],
        "filename": "SkeletonBinary.js",
        "lineno": 46,
        "columnno": 0,
        "path": "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist",
        "code": {
          "id": "astnode100029687",
          "name": "exports.SkeletonBinary",
          "type": "ClassDeclaration"
        }
      },
      "name": "SkeletonBinary",
      "longname": "SkeletonBinary",
      "kind": "class",
      "classdesc": "<p>Loads skeleton data in the Spine binary format.</p>\n<p>See <a href=\"http://esotericsoftware.com/spine-binary-format\">Spine binary format</a> and\n<a href=\"http://esotericsoftware.com/spine-loading-skeleton-data#JSON-and-binary-data\">JSON and binary data</a> in the Spine\nRuntimes Guide.</p>",
      "scope": "global",
      "memberof": "SkeletonBinary"
    },
    {
      "comment": "/** Scales bone positions, image sizes, and translations as they are loaded. This allows different size images to be used at\n         * runtime than were used in Spine.\n         *\n         * See [Scaling](http://esotericsoftware.com/spine-loading-skeleton-data#Scaling) in the Spine Runtimes Guide. */",
      "meta": {
        "range": [
          3423,
          3437
        ],
        "filename": "SkeletonBinary.js",
        "lineno": 52,
        "columnno": 8,
        "path": "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist",
        "code": {
          "id": "astnode100029697",
          "name": "this.scale",
          "type": "Literal",
          "value": 1,
          "paramnames": []
        }
      },
      "description": "<p>Scales bone positions, image sizes, and translations as they are loaded. This allows different size images to be used at\nruntime than were used in Spine.</p>\n<p>See <a href=\"http://esotericsoftware.com/spine-loading-skeleton-data#Scaling\">Scaling</a> in the Spine Runtimes Guide.</p>",
      "name": "scale",
      "longname": "SkeletonBinary#scale",
      "kind": "member",
      "memberof": "SkeletonBinary",
      "scope": "instance"
    },
    {
      "comment": "/** Collects each visible {@link BoundingBoxAttachment} and computes the world vertices for its polygon. The polygon vertices are\n * provided along with convenience methods for doing hit detection. */",
      "meta": {
        "range": [
          2019,
          10022
        ],
        "filename": "SkeletonBounds.js",
        "lineno": 33,
        "columnno": 0,
        "path": "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist",
        "code": {
          "id": "astnode100037007",
          "name": "exports.SkeletonBounds",
          "type": "ClassDeclaration"
        }
      },
      "name": "SkeletonBounds",
      "longname": "SkeletonBounds",
      "kind": "class",
      "classdesc": "<p>Collects each visible {@link BoundingBoxAttachment} and computes the world vertices for its polygon. The polygon vertices are\nprovided along with convenience methods for doing hit detection.</p>",
      "scope": "global",
      "memberof": "SkeletonBounds"
    },
    {
      "comment": "/** The left edge of the axis aligned bounding box. */",
      "meta": {
        "range": [
          2140,
          2153
        ],
        "filename": "SkeletonBounds.js",
        "lineno": 36,
        "columnno": 8,
        "path": "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist",
        "code": {
          "id": "astnode100037016",
          "name": "this.minX",
          "type": "Literal",
          "value": 0,
          "paramnames": []
        }
      },
      "description": "<p>The left edge of the axis aligned bounding box.</p>",
      "name": "minX",
      "longname": "SkeletonBounds#minX",
      "kind": "member",
      "memberof": "SkeletonBounds",
      "scope": "instance"
    },
    {
      "comment": "/** The bottom edge of the axis aligned bounding box. */",
      "meta": {
        "range": [
          2228,
          2241
        ],
        "filename": "SkeletonBounds.js",
        "lineno": 38,
        "columnno": 8,
        "path": "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist",
        "code": {
          "id": "astnode100037022",
          "name": "this.minY",
          "type": "Literal",
          "value": 0,
          "paramnames": []
        }
      },
      "description": "<p>The bottom edge of the axis aligned bounding box.</p>",
      "name": "minY",
      "longname": "SkeletonBounds#minY",
      "kind": "member",
      "memberof": "SkeletonBounds",
      "scope": "instance"
    },
    {
      "comment": "/** The right edge of the axis aligned bounding box. */",
      "meta": {
        "range": [
          2315,
          2328
        ],
        "filename": "SkeletonBounds.js",
        "lineno": 40,
        "columnno": 8,
        "path": "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist",
        "code": {
          "id": "astnode100037028",
          "name": "this.maxX",
          "type": "Literal",
          "value": 0,
          "paramnames": []
        }
      },
      "description": "<p>The right edge of the axis aligned bounding box.</p>",
      "name": "maxX",
      "longname": "SkeletonBounds#maxX",
      "kind": "member",
      "memberof": "SkeletonBounds",
      "scope": "instance"
    },
    {
      "comment": "/** The top edge of the axis aligned bounding box. */",
      "meta": {
        "range": [
          2400,
          2413
        ],
        "filename": "SkeletonBounds.js",
        "lineno": 42,
        "columnno": 8,
        "path": "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist",
        "code": {
          "id": "astnode100037034",
          "name": "this.maxY",
          "type": "Literal",
          "value": 0,
          "paramnames": []
        }
      },
      "description": "<p>The top edge of the axis aligned bounding box.</p>",
      "name": "maxY",
      "longname": "SkeletonBounds#maxY",
      "kind": "member",
      "memberof": "SkeletonBounds",
      "scope": "instance"
    },
    {
      "comment": "/** The visible bounding boxes. */",
      "meta": {
        "range": [
          2466,
          2498
        ],
        "filename": "SkeletonBounds.js",
        "lineno": 44,
        "columnno": 8,
        "path": "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist",
        "code": {
          "id": "astnode100037040",
          "name": "this.boundingBoxes",
          "type": "NewExpression",
          "value": "",
          "paramnames": []
        }
      },
      "description": "<p>The visible bounding boxes.</p>",
      "name": "boundingBoxes",
      "longname": "SkeletonBounds#boundingBoxes",
      "kind": "member",
      "memberof": "SkeletonBounds",
      "scope": "instance"
    },
    {
      "comment": "/** The world vertices for the bounding box polygons. */",
      "meta": {
        "range": [
          2573,
          2600
        ],
        "filename": "SkeletonBounds.js",
        "lineno": 46,
        "columnno": 8,
        "path": "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist",
        "code": {
          "id": "astnode100037047",
          "name": "this.polygons",
          "type": "NewExpression",
          "value": "",
          "paramnames": []
        }
      },
      "description": "<p>The world vertices for the bounding box polygons.</p>",
      "name": "polygons",
      "longname": "SkeletonBounds#polygons",
      "kind": "member",
      "memberof": "SkeletonBounds",
      "scope": "instance"
    },
    {
      "comment": "/** Clears any previous polygons, finds all visible bounding box attachments, and computes the world vertices for each bounding\n     * box's polygon.\n     * @param updateAabb If true, the axis aligned bounding box containing all the polygons is computed. If false, the\n     *           SkeletonBounds AABB methods will always return true. */",
      "meta": {
        "range": [
          3058,
          4520
        ],
        "filename": "SkeletonBounds.js",
        "lineno": 55,
        "columnno": 4,
        "path": "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist",
        "code": {
          "id": "astnode100037068",
          "name": "SkeletonBounds#update",
          "type": "MethodDefinition",
          "paramnames": [
            "skeleton",
            "updateAabb"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "<p>Clears any previous polygons, finds all visible bounding box attachments, and computes the world vertices for each bounding\nbox's polygon.</p>",
      "params": [
        {
          "description": "<p>If true, the axis aligned bounding box containing all the polygons is computed. If false, the\nSkeletonBounds AABB methods will always return true.</p>",
          "name": "updateAabb"
        }
      ],
      "name": "update",
      "longname": "SkeletonBounds#update",
      "kind": "function",
      "memberof": "SkeletonBounds",
      "scope": "instance"
    },
    {
      "comment": "/** Returns true if the axis aligned bounding box contains the point. */",
      "meta": {
        "range": [
          5390,
          5506
        ],
        "filename": "SkeletonBounds.js",
        "lineno": 113,
        "columnno": 4,
        "path": "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist",
        "code": {
          "id": "astnode100037410",
          "name": "SkeletonBounds#aabbContainsPoint",
          "type": "MethodDefinition",
          "paramnames": [
            "x",
            "y"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "<p>Returns true if the axis aligned bounding box contains the point.</p>",
      "name": "aabbContainsPoint",
      "longname": "SkeletonBounds#aabbContainsPoint",
      "kind": "function",
      "memberof": "SkeletonBounds",
      "scope": "instance",
      "params": []
    },
    {
      "comment": "/** Returns true if the axis aligned bounding box intersects the line segment. */",
      "meta": {
        "range": [
          5597,
          6359
        ],
        "filename": "SkeletonBounds.js",
        "lineno": 117,
        "columnno": 4,
        "path": "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist",
        "code": {
          "id": "astnode100037440",
          "name": "SkeletonBounds#aabbIntersectsSegment",
          "type": "MethodDefinition",
          "paramnames": [
            "x1",
            "y1",
            "x2",
            "y2"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "<p>Returns true if the axis aligned bounding box intersects the line segment.</p>",
      "name": "aabbIntersectsSegment",
      "longname": "SkeletonBounds#aabbIntersectsSegment",
      "kind": "function",
      "memberof": "SkeletonBounds",
      "scope": "instance",
      "params": []
    },
    {
      "comment": "/** Returns true if the axis aligned bounding box intersects the axis aligned bounding box of the specified bounds. */",
      "meta": {
        "range": [
          6487,
          6646
        ],
        "filename": "SkeletonBounds.js",
        "lineno": 140,
        "columnno": 4,
        "path": "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist",
        "code": {
          "id": "astnode100037598",
          "name": "SkeletonBounds#aabbIntersectsSkeleton",
          "type": "MethodDefinition",
          "paramnames": [
            "bounds"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "<p>Returns true if the axis aligned bounding box intersects the axis aligned bounding box of the specified bounds.</p>",
      "name": "aabbIntersectsSkeleton",
      "longname": "SkeletonBounds#aabbIntersectsSkeleton",
      "kind": "function",
      "memberof": "SkeletonBounds",
      "scope": "instance",
      "params": []
    },
    {
      "comment": "/** Returns the first bounding box attachment that contains the point, or null. When doing many checks, it is usually more\n     * efficient to only call this method if {@link #aabbContainsPoint(float, float)} returns true. */",
      "meta": {
        "range": [
          6881,
          7132
        ],
        "filename": "SkeletonBounds.js",
        "lineno": 145,
        "columnno": 4,
        "path": "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist",
        "code": {
          "id": "astnode100037635",
          "name": "SkeletonBounds#containsPoint",
          "type": "MethodDefinition",
          "paramnames": [
            "x",
            "y"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "<p>Returns the first bounding box attachment that contains the point, or null. When doing many checks, it is usually more\nefficient to only call this method if {@link #aabbContainsPoint(float, float)} returns true.</p>",
      "name": "containsPoint",
      "longname": "SkeletonBounds#containsPoint",
      "kind": "function",
      "memberof": "SkeletonBounds",
      "scope": "instance",
      "params": []
    },
    {
      "comment": "/** Returns true if the polygon contains the point. */",
      "meta": {
        "range": [
          7196,
          7840
        ],
        "filename": "SkeletonBounds.js",
        "lineno": 153,
        "columnno": 4,
        "path": "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist",
        "code": {
          "id": "astnode100037680",
          "name": "SkeletonBounds#containsPointPolygon",
          "type": "MethodDefinition",
          "paramnames": [
            "polygon",
            "x",
            "y"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "<p>Returns true if the polygon contains the point.</p>",
      "name": "containsPointPolygon",
      "longname": "SkeletonBounds#containsPointPolygon",
      "kind": "function",
      "memberof": "SkeletonBounds",
      "scope": "instance",
      "params": []
    },
    {
      "comment": "/** Returns the first bounding box attachment that contains any part of the line segment, or null. When doing many checks, it\n     * is usually more efficient to only call this method if {@link #aabbIntersectsSegment()} returns\n     * true. */",
      "meta": {
        "range": [
          8093,
          8372
        ],
        "filename": "SkeletonBounds.js",
        "lineno": 173,
        "columnno": 4,
        "path": "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist",
        "code": {
          "id": "astnode100037787",
          "name": "SkeletonBounds#intersectsSegment",
          "type": "MethodDefinition",
          "paramnames": [
            "x1",
            "y1",
            "x2",
            "y2"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "<p>Returns the first bounding box attachment that contains any part of the line segment, or null. When doing many checks, it\nis usually more efficient to only call this method if {@link #aabbIntersectsSegment()} returns\ntrue.</p>",
      "name": "intersectsSegment",
      "longname": "SkeletonBounds#intersectsSegment",
      "kind": "function",
      "memberof": "SkeletonBounds",
      "scope": "instance",
      "params": []
    },
    {
      "comment": "/** Returns true if the polygon contains any part of the line segment. */",
      "meta": {
        "range": [
          8455,
          9473
        ],
        "filename": "SkeletonBounds.js",
        "lineno": 181,
        "columnno": 4,
        "path": "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist",
        "code": {
          "id": "astnode100037836",
          "name": "SkeletonBounds#intersectsSegmentPolygon",
          "type": "MethodDefinition",
          "paramnames": [
            "polygon",
            "x1",
            "y1",
            "x2",
            "y2"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "<p>Returns true if the polygon contains any part of the line segment.</p>",
      "name": "intersectsSegmentPolygon",
      "longname": "SkeletonBounds#intersectsSegmentPolygon",
      "kind": "function",
      "memberof": "SkeletonBounds",
      "scope": "instance",
      "params": []
    },
    {
      "comment": "/** Returns the polygon for the specified bounding box, or null. */",
      "meta": {
        "range": [
          9550,
          9786
        ],
        "filename": "SkeletonBounds.js",
        "lineno": 204,
        "columnno": 4,
        "path": "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist",
        "code": {
          "id": "astnode100038048",
          "name": "SkeletonBounds#getPolygon",
          "type": "MethodDefinition",
          "paramnames": [
            "boundingBox"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "<p>Returns the polygon for the specified bounding box, or null.</p>",
      "name": "getPolygon",
      "longname": "SkeletonBounds#getPolygon",
      "kind": "function",
      "memberof": "SkeletonBounds",
      "scope": "instance",
      "params": []
    },
    {
      "comment": "/** The width of the axis aligned bounding box. */",
      "meta": {
        "range": [
          9846,
          9902
        ],
        "filename": "SkeletonBounds.js",
        "lineno": 211,
        "columnno": 4,
        "path": "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist",
        "code": {
          "id": "astnode100038082",
          "name": "SkeletonBounds#getWidth",
          "type": "MethodDefinition",
          "paramnames": []
        },
        "vars": {
          "": null
        }
      },
      "description": "<p>The width of the axis aligned bounding box.</p>",
      "name": "getWidth",
      "longname": "SkeletonBounds#getWidth",
      "kind": "function",
      "memberof": "SkeletonBounds",
      "scope": "instance",
      "params": []
    },
    {
      "comment": "/** The height of the axis aligned bounding box. */",
      "meta": {
        "range": [
          9963,
          10020
        ],
        "filename": "SkeletonBounds.js",
        "lineno": 215,
        "columnno": 4,
        "path": "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist",
        "code": {
          "id": "astnode100038094",
          "name": "SkeletonBounds#getHeight",
          "type": "MethodDefinition",
          "paramnames": []
        },
        "vars": {
          "": null
        }
      },
      "description": "<p>The height of the axis aligned bounding box.</p>",
      "name": "getHeight",
      "longname": "SkeletonBounds#getHeight",
      "kind": "function",
      "memberof": "SkeletonBounds",
      "scope": "instance",
      "params": []
    },
    {
      "comment": "/** Clips the input triangle against the convex, clockwise clipping area. If the triangle lies entirely within the clipping\n     * area, false is returned. The clipping area must duplicate the first vertex at the end of the vertices list. */",
      "meta": {
        "range": [
          11421,
          15251
        ],
        "filename": "SkeletonClipping.js",
        "lineno": 212,
        "columnno": 4,
        "path": "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist",
        "code": {
          "id": "astnode100039511",
          "name": "SkeletonClipping#clip",
          "type": "MethodDefinition",
          "paramnames": [
            "x1",
            "y1",
            "x2",
            "y2",
            "x3",
            "y3",
            "clippingArea",
            "output"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "<p>Clips the input triangle against the convex, clockwise clipping area. If the triangle lies entirely within the clipping\narea, false is returned. The clipping area must duplicate the first vertex at the end of the vertices list.</p>",
      "name": "clip",
      "longname": "SkeletonClipping#clip",
      "kind": "function",
      "memberof": "SkeletonClipping",
      "scope": "instance",
      "params": []
    },
    {
      "comment": "/** Stores the setup pose and all of the stateless data for a skeleton.\n *\n * See [Data objects](http://esotericsoftware.com/spine-runtime-architecture#Data-objects) in the Spine Runtimes\n * Guide. */",
      "meta": {
        "range": [
          1903,
          8800
        ],
        "filename": "SkeletonData.js",
        "lineno": 33,
        "columnno": 0,
        "path": "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist",
        "code": {
          "id": "astnode100040266",
          "name": "exports.SkeletonData",
          "type": "ClassDeclaration"
        }
      },
      "name": "SkeletonData",
      "longname": "SkeletonData",
      "kind": "class",
      "classdesc": "<p>Stores the setup pose and all of the stateless data for a skeleton.</p>\n<p>See <a href=\"http://esotericsoftware.com/spine-runtime-architecture#Data-objects\">Data objects</a> in the Spine Runtimes\nGuide.</p>",
      "scope": "global",
      "memberof": "SkeletonData"
    },
    {
      "comment": "/** The skeleton's name, which by default is the name of the skeleton data file, if possible. May be null. */",
      "meta": {
        "range": [
          2077,
          2093
        ],
        "filename": "SkeletonData.js",
        "lineno": 36,
        "columnno": 8,
        "path": "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist",
        "code": {
          "id": "astnode100040275",
          "name": "this.name",
          "type": "Literal",
          "value": null,
          "paramnames": []
        }
      },
      "description": "<p>The skeleton's name, which by default is the name of the skeleton data file, if possible. May be null.</p>",
      "name": "name",
      "longname": "SkeletonData#name",
      "kind": "member",
      "memberof": "SkeletonData",
      "scope": "instance"
    },
    {
      "comment": "/** The skeleton's bones, sorted parent first. The root bone is always the first bone. */",
      "meta": {
        "range": [
          2201,
          2225
        ],
        "filename": "SkeletonData.js",
        "lineno": 38,
        "columnno": 8,
        "path": "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist",
        "code": {
          "id": "astnode100040281",
          "name": "this.bones",
          "type": "NewExpression",
          "value": "",
          "paramnames": []
        }
      },
      "description": "<p>The skeleton's bones, sorted parent first. The root bone is always the first bone.</p>",
      "name": "bones",
      "longname": "SkeletonData#bones",
      "kind": "member",
      "memberof": "SkeletonData",
      "scope": "instance"
    },
    {
      "comment": "/** The skeleton's slots. */",
      "meta": {
        "range": [
          2298,
          2322
        ],
        "filename": "SkeletonData.js",
        "lineno": 40,
        "columnno": 8,
        "path": "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist",
        "code": {
          "id": "astnode100040288",
          "name": "this.slots",
          "type": "NewExpression",
          "value": "",
          "paramnames": []
        }
      },
      "description": "<p>The skeleton's slots.</p>",
      "name": "slots",
      "longname": "SkeletonData#slots",
      "kind": "member",
      "memberof": "SkeletonData",
      "scope": "instance"
    },
    {
      "comment": "/** The skeleton's default skin. By default this skin contains all attachments that were not in a skin in Spine.\n         *\n         * See {@link Skeleton#getAttachmentByName()}.\n         * May be null. */",
      "meta": {
        "range": [
          2606,
          2629
        ],
        "filename": "SkeletonData.js",
        "lineno": 46,
        "columnno": 8,
        "path": "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist",
        "code": {
          "id": "astnode100040302",
          "name": "this.defaultSkin",
          "type": "Literal",
          "value": null,
          "paramnames": []
        }
      },
      "description": "<p>The skeleton's default skin. By default this skin contains all attachments that were not in a skin in Spine.</p>\n<p>See {@link Skeleton#getAttachmentByName()}.\nMay be null.</p>",
      "name": "defaultSkin",
      "longname": "SkeletonData#defaultSkin",
      "kind": "member",
      "memberof": "SkeletonData",
      "scope": "instance"
    },
    {
      "comment": "/** The skeleton's events. */",
      "meta": {
        "range": [
          2677,
          2702
        ],
        "filename": "SkeletonData.js",
        "lineno": 48,
        "columnno": 8,
        "path": "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist",
        "code": {
          "id": "astnode100040308",
          "name": "this.events",
          "type": "NewExpression",
          "value": "",
          "paramnames": []
        }
      },
      "description": "<p>The skeleton's events.</p>",
      "name": "events",
      "longname": "SkeletonData#events",
      "kind": "member",
      "memberof": "SkeletonData",
      "scope": "instance"
    },
    {
      "comment": "/** The skeleton's animations. */",
      "meta": {
        "range": [
          2754,
          2783
        ],
        "filename": "SkeletonData.js",
        "lineno": 50,
        "columnno": 8,
        "path": "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist",
        "code": {
          "id": "astnode100040315",
          "name": "this.animations",
          "type": "NewExpression",
          "value": "",
          "paramnames": []
        }
      },
      "description": "<p>The skeleton's animations.</p>",
      "name": "animations",
      "longname": "SkeletonData#animations",
      "kind": "member",
      "memberof": "SkeletonData",
      "scope": "instance"
    },
    {
      "comment": "/** The skeleton's IK constraints. */",
      "meta": {
        "range": [
          2839,
          2871
        ],
        "filename": "SkeletonData.js",
        "lineno": 52,
        "columnno": 8,
        "path": "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist",
        "code": {
          "id": "astnode100040322",
          "name": "this.ikConstraints",
          "type": "NewExpression",
          "value": "",
          "paramnames": []
        }
      },
      "description": "<p>The skeleton's IK constraints.</p>",
      "name": "ikConstraints",
      "longname": "SkeletonData#ikConstraints",
      "kind": "member",
      "memberof": "SkeletonData",
      "scope": "instance"
    },
    {
      "comment": "/** The skeleton's transform constraints. */",
      "meta": {
        "range": [
          2934,
          2973
        ],
        "filename": "SkeletonData.js",
        "lineno": 54,
        "columnno": 8,
        "path": "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist",
        "code": {
          "id": "astnode100040329",
          "name": "this.transformConstraints",
          "type": "NewExpression",
          "value": "",
          "paramnames": []
        }
      },
      "description": "<p>The skeleton's transform constraints.</p>",
      "name": "transformConstraints",
      "longname": "SkeletonData#transformConstraints",
      "kind": "member",
      "memberof": "SkeletonData",
      "scope": "instance"
    },
    {
      "comment": "/** The skeleton's path constraints. */",
      "meta": {
        "range": [
          3031,
          3065
        ],
        "filename": "SkeletonData.js",
        "lineno": 56,
        "columnno": 8,
        "path": "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist",
        "code": {
          "id": "astnode100040336",
          "name": "this.pathConstraints",
          "type": "NewExpression",
          "value": "",
          "paramnames": []
        }
      },
      "description": "<p>The skeleton's path constraints.</p>",
      "name": "pathConstraints",
      "longname": "SkeletonData#pathConstraints",
      "kind": "member",
      "memberof": "SkeletonData",
      "scope": "instance"
    },
    {
      "comment": "/** The X coordinate of the skeleton's axis aligned bounding box in the setup pose. */",
      "meta": {
        "range": [
          3170,
          3180
        ],
        "filename": "SkeletonData.js",
        "lineno": 58,
        "columnno": 8,
        "path": "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist",
        "code": {
          "id": "astnode100040343",
          "name": "this.x",
          "type": "Literal",
          "value": 0,
          "paramnames": []
        }
      },
      "description": "<p>The X coordinate of the skeleton's axis aligned bounding box in the setup pose.</p>",
      "name": "x",
      "longname": "SkeletonData#x",
      "kind": "member",
      "memberof": "SkeletonData",
      "scope": "instance"
    },
    {
      "comment": "/** The Y coordinate of the skeleton's axis aligned bounding box in the setup pose. */",
      "meta": {
        "range": [
          3285,
          3295
        ],
        "filename": "SkeletonData.js",
        "lineno": 60,
        "columnno": 8,
        "path": "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist",
        "code": {
          "id": "astnode100040349",
          "name": "this.y",
          "type": "Literal",
          "value": 0,
          "paramnames": []
        }
      },
      "description": "<p>The Y coordinate of the skeleton's axis aligned bounding box in the setup pose.</p>",
      "name": "y",
      "longname": "SkeletonData#y",
      "kind": "member",
      "memberof": "SkeletonData",
      "scope": "instance"
    },
    {
      "comment": "/** The width of the skeleton's axis aligned bounding box in the setup pose. */",
      "meta": {
        "range": [
          3393,
          3407
        ],
        "filename": "SkeletonData.js",
        "lineno": 62,
        "columnno": 8,
        "path": "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist",
        "code": {
          "id": "astnode100040355",
          "name": "this.width",
          "type": "Literal",
          "value": 0,
          "paramnames": []
        }
      },
      "description": "<p>The width of the skeleton's axis aligned bounding box in the setup pose.</p>",
      "name": "width",
      "longname": "SkeletonData#width",
      "kind": "member",
      "memberof": "SkeletonData",
      "scope": "instance"
    },
    {
      "comment": "/** The height of the skeleton's axis aligned bounding box in the setup pose. */",
      "meta": {
        "range": [
          3506,
          3521
        ],
        "filename": "SkeletonData.js",
        "lineno": 64,
        "columnno": 8,
        "path": "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist",
        "code": {
          "id": "astnode100040361",
          "name": "this.height",
          "type": "Literal",
          "value": 0,
          "paramnames": []
        }
      },
      "description": "<p>The height of the skeleton's axis aligned bounding box in the setup pose.</p>",
      "name": "height",
      "longname": "SkeletonData#height",
      "kind": "member",
      "memberof": "SkeletonData",
      "scope": "instance"
    },
    {
      "comment": "/** The Spine version used to export the skeleton data, or null. */",
      "meta": {
        "range": [
          3607,
          3626
        ],
        "filename": "SkeletonData.js",
        "lineno": 66,
        "columnno": 8,
        "path": "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist",
        "code": {
          "id": "astnode100040367",
          "name": "this.version",
          "type": "Literal",
          "value": null,
          "paramnames": []
        }
      },
      "description": "<p>The Spine version used to export the skeleton data, or null.</p>",
      "name": "version",
      "longname": "SkeletonData#version",
      "kind": "member",
      "memberof": "SkeletonData",
      "scope": "instance"
    },
    {
      "comment": "/** The skeleton data hash. This value will change if any of the skeleton data has changed. May be null. */",
      "meta": {
        "range": [
          3752,
          3768
        ],
        "filename": "SkeletonData.js",
        "lineno": 68,
        "columnno": 8,
        "path": "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist",
        "code": {
          "id": "astnode100040373",
          "name": "this.hash",
          "type": "Literal",
          "value": null,
          "paramnames": []
        }
      },
      "description": "<p>The skeleton data hash. This value will change if any of the skeleton data has changed. May be null.</p>",
      "name": "hash",
      "longname": "SkeletonData#hash",
      "kind": "member",
      "memberof": "SkeletonData",
      "scope": "instance"
    },
    {
      "comment": "/** The dopesheet FPS in Spine. Available only when nonessential data was exported. */",
      "meta": {
        "range": [
          3897,
          3909
        ],
        "filename": "SkeletonData.js",
        "lineno": 71,
        "columnno": 8,
        "path": "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist",
        "code": {
          "id": "astnode100040379",
          "name": "this.fps",
          "type": "Literal",
          "value": 0,
          "paramnames": []
        }
      },
      "description": "<p>The dopesheet FPS in Spine. Available only when nonessential data was exported.</p>",
      "name": "fps",
      "longname": "SkeletonData#fps",
      "kind": "member",
      "memberof": "SkeletonData",
      "scope": "instance"
    },
    {
      "comment": "/** The path to the images directory as defined in Spine. Available only when nonessential data was exported. May be null. */",
      "meta": {
        "range": [
          4053,
          4075
        ],
        "filename": "SkeletonData.js",
        "lineno": 73,
        "columnno": 8,
        "path": "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist",
        "code": {
          "id": "astnode100040385",
          "name": "this.imagesPath",
          "type": "Literal",
          "value": null,
          "paramnames": []
        }
      },
      "description": "<p>The path to the images directory as defined in Spine. Available only when nonessential data was exported. May be null.</p>",
      "name": "imagesPath",
      "longname": "SkeletonData#imagesPath",
      "kind": "member",
      "memberof": "SkeletonData",
      "scope": "instance"
    },
    {
      "comment": "/** The path to the audio directory as defined in Spine. Available only when nonessential data was exported. May be null. */",
      "meta": {
        "range": [
          4218,
          4239
        ],
        "filename": "SkeletonData.js",
        "lineno": 75,
        "columnno": 8,
        "path": "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist",
        "code": {
          "id": "astnode100040391",
          "name": "this.audioPath",
          "type": "Literal",
          "value": null,
          "paramnames": []
        }
      },
      "description": "<p>The path to the audio directory as defined in Spine. Available only when nonessential data was exported. May be null.</p>",
      "name": "audioPath",
      "longname": "SkeletonData#audioPath",
      "kind": "member",
      "memberof": "SkeletonData",
      "scope": "instance"
    },
    {
      "comment": "/** Finds a bone by comparing each bone's name. It is more efficient to cache the results of this method than to call it\n     * multiple times.\n     * @returns May be null. */",
      "meta": {
        "range": [
          4431,
          4757
        ],
        "filename": "SkeletonData.js",
        "lineno": 80,
        "columnno": 4,
        "path": "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist",
        "code": {
          "id": "astnode100040396",
          "name": "SkeletonData#findBone",
          "type": "MethodDefinition",
          "paramnames": [
            "boneName"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "<p>Finds a bone by comparing each bone's name. It is more efficient to cache the results of this method than to call it\nmultiple times.</p>",
      "returns": [
        {
          "description": "<p>May be null.</p>"
        }
      ],
      "name": "findBone",
      "longname": "SkeletonData#findBone",
      "kind": "function",
      "memberof": "SkeletonData",
      "scope": "instance",
      "params": []
    },
    {
      "comment": "/** Finds a slot by comparing each slot's name. It is more efficient to cache the results of this method than to call it\n     * multiple times.\n     * @returns May be null. */",
      "meta": {
        "range": [
          4942,
          5268
        ],
        "filename": "SkeletonData.js",
        "lineno": 94,
        "columnno": 4,
        "path": "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist",
        "code": {
          "id": "astnode100040446",
          "name": "SkeletonData#findSlot",
          "type": "MethodDefinition",
          "paramnames": [
            "slotName"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "<p>Finds a slot by comparing each slot's name. It is more efficient to cache the results of this method than to call it\nmultiple times.</p>",
      "returns": [
        {
          "description": "<p>May be null.</p>"
        }
      ],
      "name": "findSlot",
      "longname": "SkeletonData#findSlot",
      "kind": "function",
      "memberof": "SkeletonData",
      "scope": "instance",
      "params": []
    },
    {
      "comment": "/** Finds a skin by comparing each skin's name. It is more efficient to cache the results of this method than to call it\n     * multiple times.\n     * @returns May be null. */",
      "meta": {
        "range": [
          5453,
          5779
        ],
        "filename": "SkeletonData.js",
        "lineno": 108,
        "columnno": 4,
        "path": "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist",
        "code": {
          "id": "astnode100040496",
          "name": "SkeletonData#findSkin",
          "type": "MethodDefinition",
          "paramnames": [
            "skinName"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "<p>Finds a skin by comparing each skin's name. It is more efficient to cache the results of this method than to call it\nmultiple times.</p>",
      "returns": [
        {
          "description": "<p>May be null.</p>"
        }
      ],
      "name": "findSkin",
      "longname": "SkeletonData#findSkin",
      "kind": "function",
      "memberof": "SkeletonData",
      "scope": "instance",
      "params": []
    },
    {
      "comment": "/** Finds an event by comparing each events's name. It is more efficient to cache the results of this method than to call it\n     * multiple times.\n     * @returns May be null. */",
      "meta": {
        "range": [
          5968,
          6322
        ],
        "filename": "SkeletonData.js",
        "lineno": 122,
        "columnno": 4,
        "path": "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist",
        "code": {
          "id": "astnode100040546",
          "name": "SkeletonData#findEvent",
          "type": "MethodDefinition",
          "paramnames": [
            "eventDataName"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "<p>Finds an event by comparing each events's name. It is more efficient to cache the results of this method than to call it\nmultiple times.</p>",
      "returns": [
        {
          "description": "<p>May be null.</p>"
        }
      ],
      "name": "findEvent",
      "longname": "SkeletonData#findEvent",
      "kind": "function",
      "memberof": "SkeletonData",
      "scope": "instance",
      "params": []
    },
    {
      "comment": "/** Finds an animation by comparing each animation's name. It is more efficient to cache the results of this method than to\n     * call it multiple times.\n     * @returns May be null. */",
      "meta": {
        "range": [
          6518,
          6904
        ],
        "filename": "SkeletonData.js",
        "lineno": 136,
        "columnno": 4,
        "path": "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist",
        "code": {
          "id": "astnode100040596",
          "name": "SkeletonData#findAnimation",
          "type": "MethodDefinition",
          "paramnames": [
            "animationName"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "<p>Finds an animation by comparing each animation's name. It is more efficient to cache the results of this method than to\ncall it multiple times.</p>",
      "returns": [
        {
          "description": "<p>May be null.</p>"
        }
      ],
      "name": "findAnimation",
      "longname": "SkeletonData#findAnimation",
      "kind": "function",
      "memberof": "SkeletonData",
      "scope": "instance",
      "params": []
    },
    {
      "comment": "/** Finds an IK constraint by comparing each IK constraint's name. It is more efficient to cache the results of this method\n     * than to call it multiple times.\n     * @return May be null. */",
      "meta": {
        "range": [
          7107,
          7515
        ],
        "filename": "SkeletonData.js",
        "lineno": 150,
        "columnno": 4,
        "path": "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist",
        "code": {
          "id": "astnode100040646",
          "name": "SkeletonData#findIkConstraint",
          "type": "MethodDefinition",
          "paramnames": [
            "constraintName"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "<p>Finds an IK constraint by comparing each IK constraint's name. It is more efficient to cache the results of this method\nthan to call it multiple times.</p>",
      "returns": [
        {
          "description": "<p>May be null.</p>"
        }
      ],
      "name": "findIkConstraint",
      "longname": "SkeletonData#findIkConstraint",
      "kind": "function",
      "memberof": "SkeletonData",
      "scope": "instance",
      "params": []
    },
    {
      "comment": "/** Finds a transform constraint by comparing each transform constraint's name. It is more efficient to cache the results of\n     * this method than to call it multiple times.\n     * @return May be null. */",
      "meta": {
        "range": [
          7731,
          8174
        ],
        "filename": "SkeletonData.js",
        "lineno": 164,
        "columnno": 4,
        "path": "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist",
        "code": {
          "id": "astnode100040696",
          "name": "SkeletonData#findTransformConstraint",
          "type": "MethodDefinition",
          "paramnames": [
            "constraintName"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "<p>Finds a transform constraint by comparing each transform constraint's name. It is more efficient to cache the results of\nthis method than to call it multiple times.</p>",
      "returns": [
        {
          "description": "<p>May be null.</p>"
        }
      ],
      "name": "findTransformConstraint",
      "longname": "SkeletonData#findTransformConstraint",
      "kind": "function",
      "memberof": "SkeletonData",
      "scope": "instance",
      "params": []
    },
    {
      "comment": "/** Finds a path constraint by comparing each path constraint's name. It is more efficient to cache the results of this method\n     * than to call it multiple times.\n     * @return May be null. */",
      "meta": {
        "range": [
          8380,
          8798
        ],
        "filename": "SkeletonData.js",
        "lineno": 178,
        "columnno": 4,
        "path": "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist",
        "code": {
          "id": "astnode100040746",
          "name": "SkeletonData#findPathConstraint",
          "type": "MethodDefinition",
          "paramnames": [
            "constraintName"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "<p>Finds a path constraint by comparing each path constraint's name. It is more efficient to cache the results of this method\nthan to call it multiple times.</p>",
      "returns": [
        {
          "description": "<p>May be null.</p>"
        }
      ],
      "name": "findPathConstraint",
      "longname": "SkeletonData#findPathConstraint",
      "kind": "function",
      "memberof": "SkeletonData",
      "scope": "instance",
      "params": []
    },
    {
      "comment": "/** Loads skeleton data in the Spine JSON format.\n *\n * See [Spine JSON format](http://esotericsoftware.com/spine-json-format) and\n * [JSON and binary data](http://esotericsoftware.com/spine-loading-skeleton-data#JSON-and-binary-data) in the Spine\n * Runtimes Guide. */",
      "meta": {
        "range": [
          3095,
          53478
        ],
        "filename": "SkeletonJson.js",
        "lineno": 47,
        "columnno": 0,
        "path": "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist",
        "code": {
          "id": "astnode100040912",
          "name": "exports.SkeletonJson",
          "type": "ClassDeclaration"
        }
      },
      "name": "SkeletonJson",
      "longname": "SkeletonJson",
      "kind": "class",
      "classdesc": "<p>Loads skeleton data in the Spine JSON format.</p>\n<p>See <a href=\"http://esotericsoftware.com/spine-json-format\">Spine JSON format</a> and\n<a href=\"http://esotericsoftware.com/spine-loading-skeleton-data#JSON-and-binary-data\">JSON and binary data</a> in the Spine\nRuntimes Guide.</p>",
      "scope": "global",
      "memberof": "SkeletonJson"
    },
    {
      "comment": "/** Scales bone positions, image sizes, and translations as they are loaded. This allows different size images to be used at\n         * runtime than were used in Spine.\n         *\n         * See [Scaling](http://esotericsoftware.com/spine-loading-skeleton-data#Scaling) in the Spine Runtimes Guide. */",
      "meta": {
        "range": [
          3477,
          3491
        ],
        "filename": "SkeletonJson.js",
        "lineno": 53,
        "columnno": 8,
        "path": "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist",
        "code": {
          "id": "astnode100040922",
          "name": "this.scale",
          "type": "Literal",
          "value": 1,
          "paramnames": []
        }
      },
      "description": "<p>Scales bone positions, image sizes, and translations as they are loaded. This allows different size images to be used at\nruntime than were used in Spine.</p>\n<p>See <a href=\"http://esotericsoftware.com/spine-loading-skeleton-data#Scaling\">Scaling</a> in the Spine Runtimes Guide.</p>",
      "name": "scale",
      "longname": "SkeletonJson#scale",
      "kind": "member",
      "memberof": "SkeletonJson",
      "scope": "instance"
    },
    {
      "comment": "/** Stores an entry in the skin consisting of the slot index, name, and attachment **/",
      "meta": {
        "range": [
          1852,
          2035
        ],
        "filename": "Skin.js",
        "lineno": 31,
        "columnno": 0,
        "path": "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist",
        "code": {
          "id": "astnode100047463",
          "name": "exports.SkinEntry",
          "type": "ClassDeclaration"
        }
      },
      "name": "SkinEntry",
      "longname": "SkinEntry",
      "kind": "class",
      "classdesc": "<p>Stores an entry in the skin consisting of the slot index, name, and attachment</p>",
      "scope": "global",
      "memberof": "SkinEntry"
    },
    {
      "comment": "/** Stores attachments by slot index and attachment name.\n *\n * See SkeletonData {@link SkeletonData#defaultSkin}, Skeleton {@link Skeleton#skin}, and\n * [Runtime skins](http://esotericsoftware.com/spine-runtime-skins) in the Spine Runtimes Guide. */",
      "meta": {
        "range": [
          2287,
          8735
        ],
        "filename": "Skin.js",
        "lineno": 42,
        "columnno": 0,
        "path": "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist",
        "code": {
          "id": "astnode100047494",
          "name": "exports.Skin",
          "type": "ClassDeclaration"
        }
      },
      "name": "Skin",
      "longname": "Skin",
      "kind": "class",
      "classdesc": "<p>Stores attachments by slot index and attachment name.</p>\n<p>See SkeletonData {@link SkeletonData#defaultSkin}, Skeleton {@link Skeleton#skin}, and\n<a href=\"http://esotericsoftware.com/spine-runtime-skins\">Runtime skins</a> in the Spine Runtimes Guide.</p>",
      "scope": "global",
      "memberof": "Skin"
    },
    {
      "comment": "/** Adds an attachment to the skin for the specified slot index and name. */",
      "meta": {
        "range": [
          2630,
          3030
        ],
        "filename": "Skin.js",
        "lineno": 52,
        "columnno": 4,
        "path": "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist",
        "code": {
          "id": "astnode100047537",
          "name": "Skin#setAttachment",
          "type": "MethodDefinition",
          "paramnames": [
            "slotIndex",
            "name",
            "attachment"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "<p>Adds an attachment to the skin for the specified slot index and name.</p>",
      "name": "setAttachment",
      "longname": "Skin#setAttachment",
      "kind": "function",
      "memberof": "Skin",
      "scope": "instance",
      "params": []
    },
    {
      "comment": "/** Adds all attachments, bones, and constraints from the specified skin to this skin. */",
      "meta": {
        "range": [
          3129,
          4267
        ],
        "filename": "Skin.js",
        "lineno": 63,
        "columnno": 4,
        "path": "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist",
        "code": {
          "id": "astnode100047590",
          "name": "Skin#addSkin",
          "type": "MethodDefinition",
          "paramnames": [
            "skin"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "<p>Adds all attachments, bones, and constraints from the specified skin to this skin.</p>",
      "name": "addSkin",
      "longname": "Skin#addSkin",
      "kind": "function",
      "memberof": "Skin",
      "scope": "instance",
      "params": []
    },
    {
      "comment": "/** Adds all bones and constraints and copies of all attachments from the specified skin to this skin. Mesh attachments are not\n     * copied, instead a new linked mesh is created. The attachment copies can be modified without affecting the originals. */",
      "meta": {
        "range": [
          4531,
          6101
        ],
        "filename": "Skin.js",
        "lineno": 96,
        "columnno": 4,
        "path": "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist",
        "code": {
          "id": "astnode100047769",
          "name": "Skin#copySkin",
          "type": "MethodDefinition",
          "paramnames": [
            "skin"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "<p>Adds all bones and constraints and copies of all attachments from the specified skin to this skin. Mesh attachments are not\ncopied, instead a new linked mesh is created. The attachment copies can be modified without affecting the originals.</p>",
      "name": "copySkin",
      "longname": "Skin#copySkin",
      "kind": "function",
      "memberof": "Skin",
      "scope": "instance",
      "params": []
    },
    {
      "comment": "/** Returns the attachment for the specified slot index and name, or null. */",
      "meta": {
        "range": [
          6188,
          6333
        ],
        "filename": "Skin.js",
        "lineno": 137,
        "columnno": 4,
        "path": "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist",
        "code": {
          "id": "astnode100047998",
          "name": "Skin#getAttachment",
          "type": "MethodDefinition",
          "paramnames": [
            "slotIndex",
            "name"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "<p>Returns the attachment for the specified slot index and name, or null.</p>",
      "name": "getAttachment",
      "longname": "Skin#getAttachment",
      "kind": "function",
      "memberof": "Skin",
      "scope": "instance",
      "params": []
    },
    {
      "comment": "/** Removes the attachment in the skin for the specified slot index and name, if any. */",
      "meta": {
        "range": [
          6431,
          6587
        ],
        "filename": "Skin.js",
        "lineno": 142,
        "columnno": 4,
        "path": "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist",
        "code": {
          "id": "astnode100048019",
          "name": "Skin#removeAttachment",
          "type": "MethodDefinition",
          "paramnames": [
            "slotIndex",
            "name"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "<p>Removes the attachment in the skin for the specified slot index and name, if any.</p>",
      "name": "removeAttachment",
      "longname": "Skin#removeAttachment",
      "kind": "function",
      "memberof": "Skin",
      "scope": "instance",
      "params": []
    },
    {
      "comment": "/** Returns all attachments in this skin. */",
      "meta": {
        "range": [
          6641,
          7138
        ],
        "filename": "Skin.js",
        "lineno": 148,
        "columnno": 4,
        "path": "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist",
        "code": {
          "id": "astnode100048040",
          "name": "Skin#getAttachments",
          "type": "MethodDefinition",
          "paramnames": []
        },
        "vars": {
          "": null
        }
      },
      "description": "<p>Returns all attachments in this skin.</p>",
      "name": "getAttachments",
      "longname": "Skin#getAttachments",
      "kind": "function",
      "memberof": "Skin",
      "scope": "instance",
      "params": []
    },
    {
      "comment": "/** Returns all attachments in this skin for the specified slot index. */",
      "meta": {
        "range": [
          7221,
          7606
        ],
        "filename": "Skin.js",
        "lineno": 163,
        "columnno": 4,
        "path": "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist",
        "code": {
          "id": "astnode100048101",
          "name": "Skin#getAttachmentsForSlot",
          "type": "MethodDefinition",
          "paramnames": [
            "slotIndex",
            "attachments"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "<p>Returns all attachments in this skin for the specified slot index.</p>",
      "name": "getAttachmentsForSlot",
      "longname": "Skin#getAttachmentsForSlot",
      "kind": "function",
      "memberof": "Skin",
      "scope": "instance",
      "params": []
    },
    {
      "comment": "/** Clears all attachments, bones, and constraints. */",
      "meta": {
        "range": [
          7670,
          7790
        ],
        "filename": "Skin.js",
        "lineno": 174,
        "columnno": 4,
        "path": "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist",
        "code": {
          "id": "astnode100048142",
          "name": "Skin#clear",
          "type": "MethodDefinition",
          "paramnames": []
        },
        "vars": {
          "": null
        }
      },
      "description": "<p>Clears all attachments, bones, and constraints.</p>",
      "name": "clear",
      "longname": "Skin#clear",
      "kind": "function",
      "memberof": "Skin",
      "scope": "instance",
      "params": []
    },
    {
      "comment": "/** Attach each attachment in this skin if the corresponding attachment in the old skin is currently attached. */",
      "meta": {
        "range": [
          7913,
          8733
        ],
        "filename": "Skin.js",
        "lineno": 180,
        "columnno": 4,
        "path": "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist",
        "code": {
          "id": "astnode100048170",
          "name": "Skin#attachAll",
          "type": "MethodDefinition",
          "paramnames": [
            "skeleton",
            "oldSkin"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "<p>Attach each attachment in this skin if the corresponding attachment in the old skin is currently attached.</p>",
      "name": "attachAll",
      "longname": "Skin#attachAll",
      "kind": "function",
      "memberof": "Skin",
      "scope": "instance",
      "params": []
    },
    {
      "comment": "/** Stores a slot's current pose. Slots organize attachments for {@link Skeleton#drawOrder} purposes and provide a place to store\n * state for an attachment. State cannot be stored in an attachment itself because attachments are stateless and may be shared\n * across multiple skeletons. */",
      "meta": {
        "range": [
          2086,
          4749
        ],
        "filename": "Slot.js",
        "lineno": 34,
        "columnno": 0,
        "path": "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist",
        "code": {
          "id": "astnode100048277",
          "name": "exports.Slot",
          "type": "ClassDeclaration"
        }
      },
      "name": "Slot",
      "longname": "Slot",
      "kind": "class",
      "classdesc": "<p>Stores a slot's current pose. Slots organize attachments for {@link Skeleton#drawOrder} purposes and provide a place to store\nstate for an attachment. State cannot be stored in an attachment itself because attachments are stateless and may be shared\nacross multiple skeletons.</p>",
      "scope": "global",
      "memberof": "Slot"
    },
    {
      "comment": "/** The dark color used to tint the slot's attachment for two color tinting, or null if two color tinting is not used. The dark\n         * color's alpha is not used. */",
      "meta": {
        "range": [
          2321,
          2342
        ],
        "filename": "Slot.js",
        "lineno": 38,
        "columnno": 8,
        "path": "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist",
        "code": {
          "id": "astnode100048288",
          "name": "this.darkColor",
          "type": "Literal",
          "value": null,
          "paramnames": []
        }
      },
      "description": "<p>The dark color used to tint the slot's attachment for two color tinting, or null if two color tinting is not used. The dark\ncolor's alpha is not used.</p>",
      "name": "darkColor",
      "longname": "Slot#darkColor",
      "kind": "member",
      "memberof": "Slot",
      "scope": "instance"
    },
    {
      "comment": "/** The index of the texture region to display when the slot's attachment has a {@link Sequence}. -1 represents the\n         * {@link Sequence#getSetupIndex()}. */",
      "meta": {
        "range": [
          2590,
          2613
        ],
        "filename": "Slot.js",
        "lineno": 43,
        "columnno": 8,
        "path": "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist",
        "code": {
          "id": "astnode100048306",
          "name": "this.sequenceIndex",
          "type": "UnaryExpression",
          "value": -1,
          "paramnames": []
        }
      },
      "description": "<p>The index of the texture region to display when the slot's attachment has a {@link Sequence}. -1 represents the\n{@link Sequence#getSetupIndex()}.</p>",
      "name": "sequenceIndex",
      "longname": "Slot#sequenceIndex",
      "kind": "member",
      "memberof": "Slot",
      "scope": "instance"
    },
    {
      "comment": "/** Values to deform the slot's attachment. For an unweighted mesh, the entries are local positions for each vertex. For a\n         * weighted mesh, the entries are an offset for each vertex which will be added to the mesh's local vertex positions.\n         *\n         * See {@link VertexAttachment#computeWorldVertices()} and {@link DeformTimeline}. */",
      "meta": {
        "range": [
          2985,
          3010
        ],
        "filename": "Slot.js",
        "lineno": 48,
        "columnno": 8,
        "path": "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist",
        "code": {
          "id": "astnode100048313",
          "name": "this.deform",
          "type": "NewExpression",
          "value": "",
          "paramnames": []
        }
      },
      "description": "<p>Values to deform the slot's attachment. For an unweighted mesh, the entries are local positions for each vertex. For a\nweighted mesh, the entries are an offset for each vertex which will be added to the mesh's local vertex positions.</p>\n<p>See {@link VertexAttachment#computeWorldVertices()} and {@link DeformTimeline}.</p>",
      "name": "deform",
      "longname": "Slot#deform",
      "kind": "member",
      "memberof": "Slot",
      "scope": "instance"
    },
    {
      "comment": "/** The skeleton this slot belongs to. */",
      "meta": {
        "range": [
          3392,
          3448
        ],
        "filename": "Slot.js",
        "lineno": 60,
        "columnno": 4,
        "path": "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist",
        "code": {
          "id": "astnode100048370",
          "name": "Slot#getSkeleton",
          "type": "MethodDefinition",
          "paramnames": []
        },
        "vars": {
          "": null
        }
      },
      "description": "<p>The skeleton this slot belongs to.</p>",
      "name": "getSkeleton",
      "longname": "Slot#getSkeleton",
      "kind": "function",
      "memberof": "Slot",
      "scope": "instance",
      "params": []
    },
    {
      "comment": "/** The current attachment for the slot, or null if the slot has no attachment. */",
      "meta": {
        "range": [
          3540,
          3595
        ],
        "filename": "Slot.js",
        "lineno": 64,
        "columnno": 4,
        "path": "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist",
        "code": {
          "id": "astnode100048380",
          "name": "Slot#getAttachment",
          "type": "MethodDefinition",
          "paramnames": []
        },
        "vars": {
          "": null
        }
      },
      "description": "<p>The current attachment for the slot, or null if the slot has no attachment.</p>",
      "name": "getAttachment",
      "longname": "Slot#getAttachment",
      "kind": "function",
      "memberof": "Slot",
      "scope": "instance",
      "params": []
    },
    {
      "comment": "/** Sets the slot's attachment and, if the attachment changed, resets {@link #sequenceIndex} and clears the {@link #deform}.\n     * The deform is not cleared if the old attachment has the same {@link VertexAttachment#getTimelineAttachment()} as the\n     * specified attachment. */",
      "meta": {
        "range": [
          3885,
          4288
        ],
        "filename": "Slot.js",
        "lineno": 70,
        "columnno": 4,
        "path": "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist",
        "code": {
          "id": "astnode100048388",
          "name": "Slot#setAttachment",
          "type": "MethodDefinition",
          "paramnames": [
            "attachment"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "<p>Sets the slot's attachment and, if the attachment changed, resets {@link #sequenceIndex} and clears the {@link #deform}.\nThe deform is not cleared if the old attachment has the same {@link VertexAttachment#getTimelineAttachment()} as the\nspecified attachment.</p>",
      "name": "setAttachment",
      "longname": "Slot#setAttachment",
      "kind": "function",
      "memberof": "Slot",
      "scope": "instance",
      "params": []
    },
    {
      "comment": "/** Sets this slot to the setup pose. */",
      "meta": {
        "range": [
          4338,
          4747
        ],
        "filename": "Slot.js",
        "lineno": 81,
        "columnno": 4,
        "path": "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist",
        "code": {
          "id": "astnode100048444",
          "name": "Slot#setToSetupPose",
          "type": "MethodDefinition",
          "paramnames": []
        },
        "vars": {
          "": null
        }
      },
      "description": "<p>Sets this slot to the setup pose.</p>",
      "name": "setToSetupPose",
      "longname": "Slot#setToSetupPose",
      "kind": "function",
      "memberof": "Slot",
      "scope": "instance",
      "params": []
    },
    {
      "comment": "/** Stores the setup pose for a {@link Slot}. */",
      "meta": {
        "range": [
          1784,
          2950
        ],
        "filename": "SlotData.js",
        "lineno": 31,
        "columnno": 0,
        "path": "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist",
        "code": {
          "id": "astnode100048525",
          "name": "exports.SlotData",
          "type": "ClassDeclaration"
        }
      },
      "name": "SlotData",
      "longname": "SlotData",
      "kind": "class",
      "classdesc": "<p>Stores the setup pose for a {@link Slot}.</p>",
      "scope": "global",
      "memberof": "SlotData"
    },
    {
      "comment": "/** The index of the slot in {@link Skeleton#getSlots()}. */",
      "meta": {
        "range": [
          1926,
          1940
        ],
        "filename": "SlotData.js",
        "lineno": 34,
        "columnno": 8,
        "path": "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist",
        "code": {
          "id": "astnode100048537",
          "name": "this.index",
          "type": "Literal",
          "value": 0,
          "paramnames": []
        }
      },
      "description": "<p>The index of the slot in {@link Skeleton#getSlots()}.</p>",
      "name": "index",
      "longname": "SlotData#index",
      "kind": "member",
      "memberof": "SlotData",
      "scope": "instance"
    },
    {
      "comment": "/** The color used to tint the slot's attachment. If {@link #getDarkColor()} is set, this is used as the light color for two\n         * color tinting. */",
      "meta": {
        "range": [
          2112,
          2146
        ],
        "filename": "SlotData.js",
        "lineno": 37,
        "columnno": 8,
        "path": "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist",
        "code": {
          "id": "astnode100048543",
          "name": "this.color",
          "type": "NewExpression",
          "value": "",
          "paramnames": []
        }
      },
      "description": "<p>The color used to tint the slot's attachment. If {@link #getDarkColor()} is set, this is used as the light color for two\ncolor tinting.</p>",
      "name": "color",
      "longname": "SlotData#color",
      "kind": "member",
      "memberof": "SlotData",
      "scope": "instance"
    },
    {
      "comment": "/** The dark color used to tint the slot's attachment for two color tinting, or null if two color tinting is not used. The dark\n         * color's alpha is not used. */",
      "meta": {
        "range": [
          2333,
          2354
        ],
        "filename": "SlotData.js",
        "lineno": 40,
        "columnno": 8,
        "path": "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist",
        "code": {
          "id": "astnode100048554",
          "name": "this.darkColor",
          "type": "Literal",
          "value": null,
          "paramnames": []
        }
      },
      "description": "<p>The dark color used to tint the slot's attachment for two color tinting, or null if two color tinting is not used. The dark\ncolor's alpha is not used.</p>",
      "name": "darkColor",
      "longname": "SlotData#darkColor",
      "kind": "member",
      "memberof": "SlotData",
      "scope": "instance"
    },
    {
      "comment": "/** The name of the attachment that is visible for this slot in the setup pose, or null if no attachment is visible. */",
      "meta": {
        "range": [
          2492,
          2518
        ],
        "filename": "SlotData.js",
        "lineno": 42,
        "columnno": 8,
        "path": "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist",
        "code": {
          "id": "astnode100048560",
          "name": "this.attachmentName",
          "type": "Literal",
          "value": null,
          "paramnames": []
        }
      },
      "description": "<p>The name of the attachment that is visible for this slot in the setup pose, or null if no attachment is visible.</p>",
      "name": "attachmentName",
      "longname": "SlotData#attachmentName",
      "kind": "member",
      "memberof": "SlotData",
      "scope": "instance"
    },
    {
      "comment": "/** The blend mode for drawing the slot's attachment. */",
      "meta": {
        "range": [
          2593,
          2626
        ],
        "filename": "SlotData.js",
        "lineno": 44,
        "columnno": 8,
        "path": "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist",
        "code": {
          "id": "astnode100048566",
          "name": "this.blendMode",
          "type": "MemberExpression",
          "value": "BlendMode.Normal",
          "paramnames": []
        }
      },
      "description": "<p>The blend mode for drawing the slot's attachment.</p>",
      "name": "blendMode",
      "longname": "SlotData#blendMode",
      "kind": "member",
      "memberof": "SlotData",
      "scope": "instance"
    },
    {
      "comment": "/** Determines how images are blended with existing pixels when drawn. */",
      "meta": {
        "range": [
          3025,
          3046
        ],
        "filename": "SlotData.js",
        "lineno": 57,
        "columnno": 0,
        "path": "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist",
        "code": {
          "id": "astnode100048613",
          "name": "exports.BlendMode",
          "type": "VariableDeclaration"
        }
      },
      "description": "<p>Determines how images are blended with existing pixels when drawn.</p>",
      "name": "BlendMode",
      "longname": "BlendMode",
      "kind": "member",
      "scope": "global"
    },
    {
      "comment": "/** Stores the current pose for a transform constraint. A transform constraint adjusts the world transform of the constrained\n * bones to match that of the target bone.\n *\n * See [Transform constraints](http://esotericsoftware.com/spine-transform-constraints) in the Spine User Guide. */",
      "meta": {
        "range": [
          2036,
          11803
        ],
        "filename": "TransformConstraint.js",
        "lineno": 34,
        "columnno": 0,
        "path": "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist",
        "code": {
          "id": "astnode100050303",
          "name": "exports.TransformConstraint",
          "type": "ClassDeclaration"
        }
      },
      "name": "TransformConstraint",
      "longname": "TransformConstraint",
      "kind": "class",
      "classdesc": "<p>Stores the current pose for a transform constraint. A transform constraint adjusts the world transform of the constrained\nbones to match that of the target bone.</p>\n<p>See <a href=\"http://esotericsoftware.com/spine-transform-constraints\">Transform constraints</a> in the Spine User Guide.</p>",
      "scope": "global",
      "memberof": "TransformConstraint"
    },
    {
      "comment": "/** Stores the setup pose for a {@link TransformConstraint}.\n *\n * See [Transform constraints](http://esotericsoftware.com/spine-transform-constraints) in the Spine User Guide. */",
      "meta": {
        "range": [
          1933,
          3282
        ],
        "filename": "TransformConstraintData.js",
        "lineno": 33,
        "columnno": 0,
        "path": "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist",
        "code": {
          "id": "astnode100052228",
          "name": "exports.TransformConstraintData",
          "type": "ClassDeclaration"
        }
      },
      "name": "TransformConstraintData",
      "longname": "TransformConstraintData",
      "kind": "class",
      "classdesc": "<p>Stores the setup pose for a {@link TransformConstraint}.</p>\n<p>See <a href=\"http://esotericsoftware.com/spine-transform-constraints\">Transform constraints</a> in the Spine User Guide.</p>",
      "scope": "global",
      "memberof": "TransformConstraintData"
    },
    {
      "comment": "/** The bones that will be modified by this transform constraint. */",
      "meta": {
        "range": [
          2337,
          2361
        ],
        "filename": "TransformConstraintData.js",
        "lineno": 44,
        "columnno": 8,
        "path": "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist",
        "code": {
          "id": "astnode100052273",
          "name": "this.bones",
          "type": "NewExpression",
          "value": "",
          "paramnames": []
        }
      },
      "description": "<p>The bones that will be modified by this transform constraint.</p>",
      "name": "bones",
      "longname": "TransformConstraintData#bones",
      "kind": "member",
      "memberof": "TransformConstraintData",
      "scope": "instance"
    },
    {
      "comment": "/** The target bone whose world transform will be copied to the constrained bones. */",
      "meta": {
        "range": [
          2465,
          2484
        ],
        "filename": "TransformConstraintData.js",
        "lineno": 46,
        "columnno": 8,
        "path": "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist",
        "code": {
          "id": "astnode100052280",
          "name": "this._target",
          "type": "Literal",
          "value": null,
          "paramnames": []
        }
      },
      "description": "<p>The target bone whose world transform will be copied to the constrained bones.</p>",
      "name": "_target",
      "longname": "TransformConstraintData#_target",
      "kind": "member",
      "memberof": "TransformConstraintData",
      "scope": "instance"
    },
    {
      "comment": "/** An offset added to the constrained bone rotation. */",
      "meta": {
        "range": [
          2717,
          2740
        ],
        "filename": "TransformConstraintData.js",
        "lineno": 54,
        "columnno": 8,
        "path": "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist",
        "code": {
          "id": "astnode100052322",
          "name": "this.offsetRotation",
          "type": "Literal",
          "value": 0,
          "paramnames": []
        }
      },
      "description": "<p>An offset added to the constrained bone rotation.</p>",
      "name": "offsetRotation",
      "longname": "TransformConstraintData#offsetRotation",
      "kind": "member",
      "memberof": "TransformConstraintData",
      "scope": "instance"
    },
    {
      "comment": "/** An offset added to the constrained bone X translation. */",
      "meta": {
        "range": [
          2820,
          2836
        ],
        "filename": "TransformConstraintData.js",
        "lineno": 56,
        "columnno": 8,
        "path": "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist",
        "code": {
          "id": "astnode100052328",
          "name": "this.offsetX",
          "type": "Literal",
          "value": 0,
          "paramnames": []
        }
      },
      "description": "<p>An offset added to the constrained bone X translation.</p>",
      "name": "offsetX",
      "longname": "TransformConstraintData#offsetX",
      "kind": "member",
      "memberof": "TransformConstraintData",
      "scope": "instance"
    },
    {
      "comment": "/** An offset added to the constrained bone Y translation. */",
      "meta": {
        "range": [
          2916,
          2932
        ],
        "filename": "TransformConstraintData.js",
        "lineno": 58,
        "columnno": 8,
        "path": "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist",
        "code": {
          "id": "astnode100052334",
          "name": "this.offsetY",
          "type": "Literal",
          "value": 0,
          "paramnames": []
        }
      },
      "description": "<p>An offset added to the constrained bone Y translation.</p>",
      "name": "offsetY",
      "longname": "TransformConstraintData#offsetY",
      "kind": "member",
      "memberof": "TransformConstraintData",
      "scope": "instance"
    },
    {
      "comment": "/** An offset added to the constrained bone scaleX. */",
      "meta": {
        "range": [
          3005,
          3026
        ],
        "filename": "TransformConstraintData.js",
        "lineno": 60,
        "columnno": 8,
        "path": "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist",
        "code": {
          "id": "astnode100052340",
          "name": "this.offsetScaleX",
          "type": "Literal",
          "value": 0,
          "paramnames": []
        }
      },
      "description": "<p>An offset added to the constrained bone scaleX.</p>",
      "name": "offsetScaleX",
      "longname": "TransformConstraintData#offsetScaleX",
      "kind": "member",
      "memberof": "TransformConstraintData",
      "scope": "instance"
    },
    {
      "comment": "/** An offset added to the constrained bone scaleY. */",
      "meta": {
        "range": [
          3099,
          3120
        ],
        "filename": "TransformConstraintData.js",
        "lineno": 62,
        "columnno": 8,
        "path": "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist",
        "code": {
          "id": "astnode100052346",
          "name": "this.offsetScaleY",
          "type": "Literal",
          "value": 0,
          "paramnames": []
        }
      },
      "description": "<p>An offset added to the constrained bone scaleY.</p>",
      "name": "offsetScaleY",
      "longname": "TransformConstraintData#offsetScaleY",
      "kind": "member",
      "memberof": "TransformConstraintData",
      "scope": "instance"
    },
    {
      "comment": "/** An offset added to the constrained bone shearY. */",
      "meta": {
        "range": [
          3193,
          3214
        ],
        "filename": "TransformConstraintData.js",
        "lineno": 64,
        "columnno": 8,
        "path": "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist",
        "code": {
          "id": "astnode100052352",
          "name": "this.offsetShearY",
          "type": "Literal",
          "value": 0,
          "paramnames": []
        }
      },
      "description": "<p>An offset added to the constrained bone shearY.</p>",
      "name": "offsetShearY",
      "longname": "TransformConstraintData#offsetShearY",
      "kind": "member",
      "memberof": "TransformConstraintData",
      "scope": "instance"
    },
    {
      "comment": "/** The base class for all attachments. */",
      "meta": {
        "range": [
          1779,
          1934
        ],
        "filename": "Attachment.js",
        "lineno": 31,
        "columnno": 0,
        "path": "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist/attachments",
        "code": {
          "id": "astnode100055893",
          "name": "exports.Attachment",
          "type": "ClassDeclaration"
        }
      },
      "name": "Attachment",
      "longname": "Attachment",
      "kind": "class",
      "classdesc": "<p>The base class for all attachments.</p>",
      "scope": "global",
      "memberof": "Attachment"
    },
    {
      "comment": "/** Base class for an attachment with vertices that are transformed by one or more bones and can be deformed by a slot's\n * {@link Slot#deform}. */",
      "meta": {
        "range": [
          2083,
          7306
        ],
        "filename": "Attachment.js",
        "lineno": 40,
        "columnno": 0,
        "path": "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist/attachments",
        "code": {
          "id": "astnode100055915",
          "name": "exports.VertexAttachment",
          "type": "ClassDeclaration"
        }
      },
      "name": "VertexAttachment",
      "longname": "VertexAttachment",
      "kind": "class",
      "classdesc": "<p>Base class for an attachment with vertices that are transformed by one or more bones and can be deformed by a slot's\n{@link Slot#deform}.</p>",
      "scope": "global",
      "memberof": "VertexAttachment"
    },
    {
      "comment": "/** The unique ID for this attachment. */",
      "meta": {
        "range": [
          2237,
          2272
        ],
        "filename": "Attachment.js",
        "lineno": 44,
        "columnno": 8,
        "path": "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist/attachments",
        "code": {
          "id": "astnode100055930",
          "name": "this.id",
          "type": "UpdateExpression",
          "value": "",
          "paramnames": []
        }
      },
      "description": "<p>The unique ID for this attachment.</p>",
      "name": "id",
      "longname": "VertexAttachment#id",
      "kind": "member",
      "memberof": "VertexAttachment",
      "scope": "instance"
    },
    {
      "comment": "/** The bones which affect the {@link #getVertices()}. The array entries are, for each vertex, the number of bones affecting\n         * the vertex followed by that many bone indices, which is the index of the bone in {@link Skeleton#bones}. Will be null\n         * if this attachment has no weights. */",
      "meta": {
        "range": [
          2593,
          2610
        ],
        "filename": "Attachment.js",
        "lineno": 48,
        "columnno": 8,
        "path": "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist/attachments",
        "code": {
          "id": "astnode100055939",
          "name": "this.bones",
          "type": "Literal",
          "value": null,
          "paramnames": []
        }
      },
      "description": "<p>The bones which affect the {@link #getVertices()}. The array entries are, for each vertex, the number of bones affecting\nthe vertex followed by that many bone indices, which is the index of the bone in {@link Skeleton#bones}. Will be null\nif this attachment has no weights.</p>",
      "name": "bones",
      "longname": "VertexAttachment#bones",
      "kind": "member",
      "memberof": "VertexAttachment",
      "scope": "instance"
    },
    {
      "comment": "/** The vertex positions in the bone's coordinate system. For a non-weighted attachment, the values are `x,y`\n         * entries for each vertex. For a weighted attachment, the values are `x,y,weight` entries for each bone affecting\n         * each vertex. */",
      "meta": {
        "range": [
          2888,
          2906
        ],
        "filename": "Attachment.js",
        "lineno": 52,
        "columnno": 8,
        "path": "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist/attachments",
        "code": {
          "id": "astnode100055945",
          "name": "this.vertices",
          "type": "ArrayExpression",
          "value": "[]",
          "paramnames": []
        }
      },
      "description": "<p>The vertex positions in the bone's coordinate system. For a non-weighted attachment, the values are <code>x,y</code>\nentries for each vertex. For a weighted attachment, the values are <code>x,y,weight</code> entries for each bone affecting\neach vertex.</p>",
      "name": "vertices",
      "longname": "VertexAttachment#vertices",
      "kind": "member",
      "memberof": "VertexAttachment",
      "scope": "instance"
    },
    {
      "comment": "/** The maximum number of world vertex values that can be output by\n         * {@link #computeWorldVertices()} using the `count` parameter. */",
      "meta": {
        "range": [
          3067,
          3095
        ],
        "filename": "Attachment.js",
        "lineno": 55,
        "columnno": 8,
        "path": "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist/attachments",
        "code": {
          "id": "astnode100055951",
          "name": "this.worldVerticesLength",
          "type": "Literal",
          "value": 0,
          "paramnames": []
        }
      },
      "description": "<p>The maximum number of world vertex values that can be output by\n{@link #computeWorldVertices()} using the <code>count</code> parameter.</p>",
      "name": "worldVerticesLength",
      "longname": "VertexAttachment#worldVerticesLength",
      "kind": "member",
      "memberof": "VertexAttachment",
      "scope": "instance"
    },
    {
      "comment": "/** Timelines for the timeline attachment are also applied to this attachment.\n         * May be null if no attachment-specific timelines should be applied. */",
      "meta": {
        "range": [
          3273,
          3303
        ],
        "filename": "Attachment.js",
        "lineno": 58,
        "columnno": 8,
        "path": "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist/attachments",
        "code": {
          "id": "astnode100055957",
          "name": "this.timelineAttachment",
          "type": "ThisExpression",
          "value": "this",
          "paramnames": []
        }
      },
      "description": "<p>Timelines for the timeline attachment are also applied to this attachment.\nMay be null if no attachment-specific timelines should be applied.</p>",
      "name": "timelineAttachment",
      "longname": "VertexAttachment#timelineAttachment",
      "kind": "member",
      "memberof": "VertexAttachment",
      "scope": "instance"
    },
    {
      "comment": "/** Transforms the attachment's local {@link #vertices} to world coordinates. If the slot's {@link Slot#deform} is\n     * not empty, it is used to deform the vertices.\n     *\n     * See [World transforms](http://esotericsoftware.com/spine-runtime-skeletons#World-transforms) in the Spine\n     * Runtimes Guide.\n     * @param start The index of the first {@link #vertices} value to transform. Each vertex has 2 values, x and y.\n     * @param count The number of world vertex values to output. Must be <= {@link #worldVerticesLength} - `start`.\n     * @param worldVertices The output world vertices. Must have a length >= `offset` + `count` *\n     *           `stride` / 2.\n     * @param offset The `worldVertices` index to begin writing values.\n     * @param stride The number of `worldVertices` entries between the value pairs written. */",
      "meta": {
        "range": [
          4158,
          6629
        ],
        "filename": "Attachment.js",
        "lineno": 71,
        "columnno": 4,
        "path": "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist/attachments",
        "code": {
          "id": "astnode100055962",
          "name": "VertexAttachment#computeWorldVertices",
          "type": "MethodDefinition",
          "paramnames": [
            "slot",
            "start",
            "count",
            "worldVertices",
            "offset",
            "stride"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "<p>Transforms the attachment's local {@link #vertices} to world coordinates. If the slot's {@link Slot#deform} is\nnot empty, it is used to deform the vertices.</p>\n<p>See <a href=\"http://esotericsoftware.com/spine-runtime-skeletons#World-transforms\">World transforms</a> in the Spine\nRuntimes Guide.</p>",
      "params": [
        {
          "description": "<p>The index of the first {@link #vertices} value to transform. Each vertex has 2 values, x and y.</p>",
          "name": "start"
        },
        {
          "description": "<p>The number of world vertex values to output. Must be &lt;= {@link #worldVerticesLength} - <code>start</code>.</p>",
          "name": "count"
        },
        {
          "description": "<p>The output world vertices. Must have a length &gt;= <code>offset</code> + <code>count</code> *\n<code>stride</code> / 2.</p>",
          "name": "worldVertices"
        },
        {
          "description": "<p>The <code>worldVertices</code> index to begin writing values.</p>",
          "name": "offset"
        },
        {
          "description": "<p>The number of <code>worldVertices</code> entries between the value pairs written.</p>",
          "name": "stride"
        }
      ],
      "name": "computeWorldVertices",
      "longname": "VertexAttachment#computeWorldVertices",
      "kind": "function",
      "memberof": "VertexAttachment",
      "scope": "instance"
    },
    {
      "comment": "/** Does not copy id (generated) or name (set on construction). **/",
      "meta": {
        "range": [
          6706,
          7304
        ],
        "filename": "Attachment.js",
        "lineno": 131,
        "columnno": 4,
        "path": "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist/attachments",
        "code": {
          "id": "astnode100056451",
          "name": "VertexAttachment#copyTo",
          "type": "MethodDefinition",
          "paramnames": [
            "attachment"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "<p>Does not copy id (generated) or name (set on construction).</p>",
      "name": "copyTo",
      "longname": "VertexAttachment#copyTo",
      "kind": "function",
      "memberof": "VertexAttachment",
      "scope": "instance",
      "params": []
    },
    {
      "comment": "/** An attachment with vertices that make up a polygon. Can be used for hit detection, creating physics bodies, spawning particle\n * effects, and more.\n *\n * See {@link SkeletonBounds} and [Bounding Boxes](http://esotericsoftware.com/spine-bounding-boxes) in the Spine User\n * Guide. */",
      "meta": {
        "range": [
          2072,
          2399
        ],
        "filename": "BoundingBoxAttachment.js",
        "lineno": 36,
        "columnno": 0,
        "path": "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist/attachments",
        "code": {
          "id": "astnode100056569",
          "name": "exports.BoundingBoxAttachment",
          "type": "ClassDeclaration"
        }
      },
      "name": "BoundingBoxAttachment",
      "longname": "BoundingBoxAttachment",
      "kind": "class",
      "classdesc": "<p>An attachment with vertices that make up a polygon. Can be used for hit detection, creating physics bodies, spawning particle\neffects, and more.</p>\n<p>See {@link SkeletonBounds} and <a href=\"http://esotericsoftware.com/spine-bounding-boxes\">Bounding Boxes</a> in the Spine User\nGuide.</p>",
      "scope": "global",
      "memberof": "BoundingBoxAttachment"
    },
    {
      "comment": "/** An attachment with vertices that make up a polygon used for clipping the rendering of other attachments. */",
      "meta": {
        "range": [
          1897,
          2701
        ],
        "filename": "ClippingAttachment.js",
        "lineno": 32,
        "columnno": 0,
        "path": "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist/attachments",
        "code": {
          "id": "astnode100056634",
          "name": "exports.ClippingAttachment",
          "type": "ClassDeclaration"
        }
      },
      "name": "ClippingAttachment",
      "longname": "ClippingAttachment",
      "kind": "class",
      "classdesc": "<p>An attachment with vertices that make up a polygon used for clipping the rendering of other attachments.</p>",
      "scope": "global",
      "memberof": "ClippingAttachment"
    },
    {
      "comment": "/** Clipping is performed between the clipping polygon's slot and the end slot. Returns null if clipping is done until the end of\n         * the skeleton's rendering. */",
      "meta": {
        "range": [
          2187,
          2206
        ],
        "filename": "ClippingAttachment.js",
        "lineno": 37,
        "columnno": 8,
        "path": "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist/attachments",
        "code": {
          "id": "astnode100056649",
          "name": "this.endSlot",
          "type": "Literal",
          "value": null,
          "paramnames": []
        }
      },
      "description": "<p>Clipping is performed between the clipping polygon's slot and the end slot. Returns null if clipping is done until the end of\nthe skeleton's rendering.</p>",
      "name": "endSlot",
      "longname": "ClippingAttachment#endSlot",
      "kind": "member",
      "memberof": "ClippingAttachment",
      "scope": "instance"
    },
    {
      "comment": "/** The color of the clipping polygon as it was in Spine. Available only when nonessential data was exported. Clipping polygons\n         * are not usually rendered at runtime. */",
      "meta": {
        "range": [
          2428,
          2477
        ],
        "filename": "ClippingAttachment.js",
        "lineno": 41,
        "columnno": 8,
        "path": "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist/attachments",
        "code": {
          "id": "astnode100056655",
          "name": "this.color",
          "type": "NewExpression",
          "value": "",
          "paramnames": []
        }
      },
      "description": "<p>The color of the clipping polygon as it was in Spine. Available only when nonessential data was exported. Clipping polygons\nare not usually rendered at runtime.</p>",
      "name": "color",
      "longname": "ClippingAttachment#color",
      "kind": "member",
      "memberof": "ClippingAttachment",
      "scope": "instance"
    },
    {
      "comment": "/** An attachment that displays a textured mesh. A mesh has hull vertices and internal vertices within the hull. Holes are not\n * supported. Each vertex has UVs (texture coordinates) and triangles are used to map an image on to the mesh.\n *\n * See [Mesh attachments](http://esotericsoftware.com/spine-meshes) in the Spine User Guide. */",
      "meta": {
        "range": [
          2183,
          9449
        ],
        "filename": "MeshAttachment.js",
        "lineno": 36,
        "columnno": 0,
        "path": "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist/attachments",
        "code": {
          "id": "astnode100056722",
          "name": "exports.MeshAttachment",
          "type": "ClassDeclaration"
        }
      },
      "name": "MeshAttachment",
      "longname": "MeshAttachment",
      "kind": "class",
      "classdesc": "<p>An attachment that displays a textured mesh. A mesh has hull vertices and internal vertices within the hull. Holes are not\nsupported. Each vertex has UVs (texture coordinates) and triangles are used to map an image on to the mesh.</p>\n<p>See <a href=\"http://esotericsoftware.com/spine-meshes\">Mesh attachments</a> in the Spine User Guide.</p>",
      "scope": "global",
      "memberof": "MeshAttachment"
    },
    {
      "comment": "/** The UV pair for each vertex, normalized within the texture region. */",
      "meta": {
        "range": [
          2407,
          2426
        ],
        "filename": "MeshAttachment.js",
        "lineno": 41,
        "columnno": 8,
        "path": "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist/attachments",
        "code": {
          "id": "astnode100056744",
          "name": "this.regionUVs",
          "type": "ArrayExpression",
          "value": "[]",
          "paramnames": []
        }
      },
      "description": "<p>The UV pair for each vertex, normalized within the texture region.</p>",
      "name": "regionUVs",
      "longname": "MeshAttachment#regionUVs",
      "kind": "member",
      "memberof": "MeshAttachment",
      "scope": "instance"
    },
    {
      "comment": "/** The UV pair for each vertex, normalized within the entire texture.\n         *\n         * See {@link #updateUVs}. */",
      "meta": {
        "range": [
          2564,
          2577
        ],
        "filename": "MeshAttachment.js",
        "lineno": 45,
        "columnno": 8,
        "path": "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist/attachments",
        "code": {
          "id": "astnode100056750",
          "name": "this.uvs",
          "type": "ArrayExpression",
          "value": "[]",
          "paramnames": []
        }
      },
      "description": "<p>The UV pair for each vertex, normalized within the entire texture.</p>\n<p>See {@link #updateUVs}.</p>",
      "name": "uvs",
      "longname": "MeshAttachment#uvs",
      "kind": "member",
      "memberof": "MeshAttachment",
      "scope": "instance"
    },
    {
      "comment": "/** Triplets of vertex indices which describe the mesh's triangulation. */",
      "meta": {
        "range": [
          2670,
          2689
        ],
        "filename": "MeshAttachment.js",
        "lineno": 47,
        "columnno": 8,
        "path": "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist/attachments",
        "code": {
          "id": "astnode100056756",
          "name": "this.triangles",
          "type": "ArrayExpression",
          "value": "[]",
          "paramnames": []
        }
      },
      "description": "<p>Triplets of vertex indices which describe the mesh's triangulation.</p>",
      "name": "triangles",
      "longname": "MeshAttachment#triangles",
      "kind": "member",
      "memberof": "MeshAttachment",
      "scope": "instance"
    },
    {
      "comment": "/** The color to tint the mesh. */",
      "meta": {
        "range": [
          2742,
          2776
        ],
        "filename": "MeshAttachment.js",
        "lineno": 49,
        "columnno": 8,
        "path": "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist/attachments",
        "code": {
          "id": "astnode100056762",
          "name": "this.color",
          "type": "NewExpression",
          "value": "",
          "paramnames": []
        }
      },
      "description": "<p>The color to tint the mesh.</p>",
      "name": "color",
      "longname": "MeshAttachment#color",
      "kind": "member",
      "memberof": "MeshAttachment",
      "scope": "instance"
    },
    {
      "comment": "/** The width of the mesh's image. Available only when nonessential data was exported. */",
      "meta": {
        "range": [
          2884,
          2898
        ],
        "filename": "MeshAttachment.js",
        "lineno": 51,
        "columnno": 8,
        "path": "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist/attachments",
        "code": {
          "id": "astnode100056773",
          "name": "this.width",
          "type": "Literal",
          "value": 0,
          "paramnames": []
        }
      },
      "description": "<p>The width of the mesh's image. Available only when nonessential data was exported.</p>",
      "name": "width",
      "longname": "MeshAttachment#width",
      "kind": "member",
      "memberof": "MeshAttachment",
      "scope": "instance"
    },
    {
      "comment": "/** The height of the mesh's image. Available only when nonessential data was exported. */",
      "meta": {
        "range": [
          3007,
          3022
        ],
        "filename": "MeshAttachment.js",
        "lineno": 53,
        "columnno": 8,
        "path": "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist/attachments",
        "code": {
          "id": "astnode100056779",
          "name": "this.height",
          "type": "Literal",
          "value": 0,
          "paramnames": []
        }
      },
      "description": "<p>The height of the mesh's image. Available only when nonessential data was exported.</p>",
      "name": "height",
      "longname": "MeshAttachment#height",
      "kind": "member",
      "memberof": "MeshAttachment",
      "scope": "instance"
    },
    {
      "comment": "/** The number of entries at the beginning of {@link #vertices} that make up the mesh hull. */",
      "meta": {
        "range": [
          3135,
          3154
        ],
        "filename": "MeshAttachment.js",
        "lineno": 55,
        "columnno": 8,
        "path": "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist/attachments",
        "code": {
          "id": "astnode100056785",
          "name": "this.hullLength",
          "type": "Literal",
          "value": 0,
          "paramnames": []
        }
      },
      "description": "<p>The number of entries at the beginning of {@link #vertices} that make up the mesh hull.</p>",
      "name": "hullLength",
      "longname": "MeshAttachment#hullLength",
      "kind": "member",
      "memberof": "MeshAttachment",
      "scope": "instance"
    },
    {
      "comment": "/** Vertex index pairs describing edges for controling triangulation. Mesh triangles will never cross edges. Only available if\n         * nonessential data was exported. Triangulation is not performed at runtime. */",
      "meta": {
        "range": [
          3388,
          3403
        ],
        "filename": "MeshAttachment.js",
        "lineno": 58,
        "columnno": 8,
        "path": "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist/attachments",
        "code": {
          "id": "astnode100056791",
          "name": "this.edges",
          "type": "ArrayExpression",
          "value": "[]",
          "paramnames": []
        }
      },
      "description": "<p>Vertex index pairs describing edges for controling triangulation. Mesh triangles will never cross edges. Only available if\nnonessential data was exported. Triangulation is not performed at runtime.</p>",
      "name": "edges",
      "longname": "MeshAttachment#edges",
      "kind": "member",
      "memberof": "MeshAttachment",
      "scope": "instance"
    },
    {
      "comment": "/** Calculates {@link #uvs} using the {@link #regionUVs} and region. Must be called if the region, the region's properties, or\n     * the {@link #regionUVs} are changed. */",
      "meta": {
        "range": [
          3728,
          6658
        ],
        "filename": "MeshAttachment.js",
        "lineno": 66,
        "columnno": 4,
        "path": "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist/attachments",
        "code": {
          "id": "astnode100056825",
          "name": "MeshAttachment#updateRegion",
          "type": "MethodDefinition",
          "paramnames": []
        },
        "vars": {
          "": null
        }
      },
      "description": "<p>Calculates {@link #uvs} using the {@link #regionUVs} and region. Must be called if the region, the region's properties, or\nthe {@link #regionUVs} are changed.</p>",
      "name": "updateRegion",
      "longname": "MeshAttachment#updateRegion",
      "kind": "function",
      "memberof": "MeshAttachment",
      "scope": "instance",
      "params": []
    },
    {
      "comment": "/** The parent mesh if this is a linked mesh, else null. A linked mesh shares the {@link #bones}, {@link #vertices},\n     * {@link #regionUVs}, {@link #triangles}, {@link #hullLength}, {@link #edges}, {@link #width}, and {@link #height} with the\n     * parent mesh, but may have a different {@link #name} or {@link #path} (and therefore a different texture). */",
      "meta": {
        "range": [
          7029,
          7084
        ],
        "filename": "MeshAttachment.js",
        "lineno": 131,
        "columnno": 4,
        "path": "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist/attachments",
        "code": {
          "id": "astnode100057320",
          "name": "MeshAttachment#getParentMesh",
          "type": "MethodDefinition",
          "paramnames": []
        },
        "vars": {
          "": null
        }
      },
      "description": "<p>The parent mesh if this is a linked mesh, else null. A linked mesh shares the {@link #bones}, {@link #vertices},\n{@link #regionUVs}, {@link #triangles}, {@link #hullLength}, {@link #edges}, {@link #width}, and {@link #height} with the\nparent mesh, but may have a different {@link #name} or {@link #path} (and therefore a different texture).</p>",
      "name": "getParentMesh",
      "longname": "MeshAttachment#getParentMesh",
      "kind": "function",
      "memberof": "MeshAttachment",
      "scope": "instance",
      "params": []
    },
    {
      "comment": "/** @param parentMesh May be null. */",
      "meta": {
        "range": [
          7131,
          7627
        ],
        "filename": "MeshAttachment.js",
        "lineno": 135,
        "columnno": 4,
        "path": "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist/attachments",
        "code": {
          "id": "astnode100057328",
          "name": "MeshAttachment#setParentMesh",
          "type": "MethodDefinition",
          "paramnames": [
            "parentMesh"
          ]
        },
        "vars": {
          "": null
        }
      },
      "params": [
        {
          "description": "<p>May be null.</p>",
          "name": "parentMesh"
        }
      ],
      "name": "setParentMesh",
      "longname": "MeshAttachment#setParentMesh",
      "kind": "function",
      "memberof": "MeshAttachment",
      "scope": "instance"
    },
    {
      "comment": "/** Returns a new mesh with the {@link #parentMesh} set to this mesh's parent mesh, if any, else to this mesh. **/",
      "meta": {
        "range": [
          9067,
          9447
        ],
        "filename": "MeshAttachment.js",
        "lineno": 177,
        "columnno": 4,
        "path": "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist/attachments",
        "code": {
          "id": "astnode100057651",
          "name": "MeshAttachment#newLinkedMesh",
          "type": "MethodDefinition",
          "paramnames": []
        },
        "vars": {
          "": null
        }
      },
      "description": "<p>Returns a new mesh with the {@link #parentMesh} set to this mesh's parent mesh, if any, else to this mesh.</p>",
      "name": "newLinkedMesh",
      "longname": "MeshAttachment#newLinkedMesh",
      "kind": "function",
      "memberof": "MeshAttachment",
      "scope": "instance",
      "params": []
    },
    {
      "comment": "/** An attachment whose vertices make up a composite Bezier curve.\n *\n * See {@link PathConstraint} and [Paths](http://esotericsoftware.com/spine-paths) in the Spine User Guide. */",
      "meta": {
        "range": [
          1973,
          3173
        ],
        "filename": "PathAttachment.js",
        "lineno": 34,
        "columnno": 0,
        "path": "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist/attachments",
        "code": {
          "id": "astnode100057730",
          "name": "exports.PathAttachment",
          "type": "ClassDeclaration"
        }
      },
      "name": "PathAttachment",
      "longname": "PathAttachment",
      "kind": "class",
      "classdesc": "<p>An attachment whose vertices make up a composite Bezier curve.</p>\n<p>See {@link PathConstraint} and <a href=\"http://esotericsoftware.com/spine-paths\">Paths</a> in the Spine User Guide.</p>",
      "scope": "global",
      "memberof": "PathAttachment"
    },
    {
      "comment": "/** The lengths along the path in the setup pose from the start of the path to the end of each Bezier curve. */",
      "meta": {
        "range": [
          2201,
          2218
        ],
        "filename": "PathAttachment.js",
        "lineno": 38,
        "columnno": 8,
        "path": "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist/attachments",
        "code": {
          "id": "astnode100057745",
          "name": "this.lengths",
          "type": "ArrayExpression",
          "value": "[]",
          "paramnames": []
        }
      },
      "description": "<p>The lengths along the path in the setup pose from the start of the path to the end of each Bezier curve.</p>",
      "name": "lengths",
      "longname": "PathAttachment#lengths",
      "kind": "member",
      "memberof": "PathAttachment",
      "scope": "instance"
    },
    {
      "comment": "/** If true, the start and end knots are connected. */",
      "meta": {
        "range": [
          2291,
          2310
        ],
        "filename": "PathAttachment.js",
        "lineno": 40,
        "columnno": 8,
        "path": "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist/attachments",
        "code": {
          "id": "astnode100057751",
          "name": "this.closed",
          "type": "Literal",
          "value": false,
          "paramnames": []
        }
      },
      "description": "<p>If true, the start and end knots are connected.</p>",
      "name": "closed",
      "longname": "PathAttachment#closed",
      "kind": "member",
      "memberof": "PathAttachment",
      "scope": "instance"
    },
    {
      "comment": "/** If true, additional calculations are performed to make calculating positions along the path more accurate. If false, fewer\n         * calculations are performed but calculating positions along the path is less accurate. */",
      "meta": {
        "range": [
          2555,
          2581
        ],
        "filename": "PathAttachment.js",
        "lineno": 43,
        "columnno": 8,
        "path": "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist/attachments",
        "code": {
          "id": "astnode100057757",
          "name": "this.constantSpeed",
          "type": "Literal",
          "value": false,
          "paramnames": []
        }
      },
      "description": "<p>If true, additional calculations are performed to make calculating positions along the path more accurate. If false, fewer\ncalculations are performed but calculating positions along the path is less accurate.</p>",
      "name": "constantSpeed",
      "longname": "PathAttachment#constantSpeed",
      "kind": "member",
      "memberof": "PathAttachment",
      "scope": "instance"
    },
    {
      "comment": "/** The color of the path as it was in Spine. Available only when nonessential data was exported. Paths are not usually\n         * rendered at runtime. */",
      "meta": {
        "range": [
          2754,
          2788
        ],
        "filename": "PathAttachment.js",
        "lineno": 46,
        "columnno": 8,
        "path": "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist/attachments",
        "code": {
          "id": "astnode100057763",
          "name": "this.color",
          "type": "NewExpression",
          "value": "",
          "paramnames": []
        }
      },
      "description": "<p>The color of the path as it was in Spine. Available only when nonessential data was exported. Paths are not usually\nrendered at runtime.</p>",
      "name": "color",
      "longname": "PathAttachment#color",
      "kind": "member",
      "memberof": "PathAttachment",
      "scope": "instance"
    },
    {
      "comment": "/** An attachment which is a single point and a rotation. This can be used to spawn projectiles, particles, etc. A bone can be\n * used in similar ways, but a PointAttachment is slightly less expensive to compute and can be hidden, shown, and placed in a\n * skin.\n *\n * See [Point Attachments](http://esotericsoftware.com/spine-point-attachments) in the Spine User Guide. */",
      "meta": {
        "range": [
          2170,
          3280
        ],
        "filename": "PointAttachment.js",
        "lineno": 36,
        "columnno": 0,
        "path": "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist/attachments",
        "code": {
          "id": "astnode100057859",
          "name": "exports.PointAttachment",
          "type": "ClassDeclaration"
        }
      },
      "name": "PointAttachment",
      "longname": "PointAttachment",
      "kind": "class",
      "classdesc": "<p>An attachment which is a single point and a rotation. This can be used to spawn projectiles, particles, etc. A bone can be\nused in similar ways, but a PointAttachment is slightly less expensive to compute and can be hidden, shown, and placed in a\nskin.</p>\n<p>See <a href=\"http://esotericsoftware.com/spine-point-attachments\">Point Attachments</a> in the Spine User Guide.</p>",
      "scope": "global",
      "memberof": "PointAttachment"
    },
    {
      "comment": "/** The color of the point attachment as it was in Spine. Available only when nonessential data was exported. Point attachments\n         * are not usually rendered at runtime. */",
      "meta": {
        "range": [
          2533,
          2573
        ],
        "filename": "PointAttachment.js",
        "lineno": 44,
        "columnno": 8,
        "path": "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist/attachments",
        "code": {
          "id": "astnode100057892",
          "name": "this.color",
          "type": "NewExpression",
          "value": "",
          "paramnames": []
        }
      },
      "description": "<p>The color of the point attachment as it was in Spine. Available only when nonessential data was exported. Point attachments\nare not usually rendered at runtime.</p>",
      "name": "color",
      "longname": "PointAttachment#color",
      "kind": "member",
      "memberof": "PointAttachment",
      "scope": "instance"
    },
    {
      "comment": "/** An attachment that displays a textured quadrilateral.\n *\n * See [Region attachments](http://esotericsoftware.com/spine-regions) in the Spine User Guide. */",
      "meta": {
        "range": [
          1946,
          7936
        ],
        "filename": "RegionAttachment.js",
        "lineno": 34,
        "columnno": 0,
        "path": "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist/attachments",
        "code": {
          "id": "astnode100058081",
          "name": "exports.RegionAttachment",
          "type": "ClassDeclaration"
        }
      },
      "name": "RegionAttachment",
      "longname": "RegionAttachment",
      "kind": "class",
      "classdesc": "<p>An attachment that displays a textured quadrilateral.</p>\n<p>See <a href=\"http://esotericsoftware.com/spine-regions\">Region attachments</a> in the Spine User Guide.</p>",
      "scope": "global",
      "memberof": "RegionAttachment"
    },
    {
      "comment": "/** The local x translation. */",
      "meta": {
        "range": [
          2096,
          2106
        ],
        "filename": "RegionAttachment.js",
        "lineno": 38,
        "columnno": 8,
        "path": "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist/attachments",
        "code": {
          "id": "astnode100058097",
          "name": "this.x",
          "type": "Literal",
          "value": 0,
          "paramnames": []
        }
      },
      "description": "<p>The local x translation.</p>",
      "name": "x",
      "longname": "RegionAttachment#x",
      "kind": "member",
      "memberof": "RegionAttachment",
      "scope": "instance"
    },
    {
      "comment": "/** The local y translation. */",
      "meta": {
        "range": [
          2156,
          2166
        ],
        "filename": "RegionAttachment.js",
        "lineno": 40,
        "columnno": 8,
        "path": "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist/attachments",
        "code": {
          "id": "astnode100058103",
          "name": "this.y",
          "type": "Literal",
          "value": 0,
          "paramnames": []
        }
      },
      "description": "<p>The local y translation.</p>",
      "name": "y",
      "longname": "RegionAttachment#y",
      "kind": "member",
      "memberof": "RegionAttachment",
      "scope": "instance"
    },
    {
      "comment": "/** The local scaleX. */",
      "meta": {
        "range": [
          2209,
          2224
        ],
        "filename": "RegionAttachment.js",
        "lineno": 42,
        "columnno": 8,
        "path": "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist/attachments",
        "code": {
          "id": "astnode100058109",
          "name": "this.scaleX",
          "type": "Literal",
          "value": 1,
          "paramnames": []
        }
      },
      "description": "<p>The local scaleX.</p>",
      "name": "scaleX",
      "longname": "RegionAttachment#scaleX",
      "kind": "member",
      "memberof": "RegionAttachment",
      "scope": "instance"
    },
    {
      "comment": "/** The local scaleY. */",
      "meta": {
        "range": [
          2267,
          2282
        ],
        "filename": "RegionAttachment.js",
        "lineno": 44,
        "columnno": 8,
        "path": "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist/attachments",
        "code": {
          "id": "astnode100058115",
          "name": "this.scaleY",
          "type": "Literal",
          "value": 1,
          "paramnames": []
        }
      },
      "description": "<p>The local scaleY.</p>",
      "name": "scaleY",
      "longname": "RegionAttachment#scaleY",
      "kind": "member",
      "memberof": "RegionAttachment",
      "scope": "instance"
    },
    {
      "comment": "/** The local rotation. */",
      "meta": {
        "range": [
          2327,
          2344
        ],
        "filename": "RegionAttachment.js",
        "lineno": 46,
        "columnno": 8,
        "path": "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist/attachments",
        "code": {
          "id": "astnode100058121",
          "name": "this.rotation",
          "type": "Literal",
          "value": 0,
          "paramnames": []
        }
      },
      "description": "<p>The local rotation.</p>",
      "name": "rotation",
      "longname": "RegionAttachment#rotation",
      "kind": "member",
      "memberof": "RegionAttachment",
      "scope": "instance"
    },
    {
      "comment": "/** The width of the region attachment in Spine. */",
      "meta": {
        "range": [
          2414,
          2428
        ],
        "filename": "RegionAttachment.js",
        "lineno": 48,
        "columnno": 8,
        "path": "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist/attachments",
        "code": {
          "id": "astnode100058127",
          "name": "this.width",
          "type": "Literal",
          "value": 0,
          "paramnames": []
        }
      },
      "description": "<p>The width of the region attachment in Spine.</p>",
      "name": "width",
      "longname": "RegionAttachment#width",
      "kind": "member",
      "memberof": "RegionAttachment",
      "scope": "instance"
    },
    {
      "comment": "/** The height of the region attachment in Spine. */",
      "meta": {
        "range": [
          2499,
          2514
        ],
        "filename": "RegionAttachment.js",
        "lineno": 50,
        "columnno": 8,
        "path": "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist/attachments",
        "code": {
          "id": "astnode100058133",
          "name": "this.height",
          "type": "Literal",
          "value": 0,
          "paramnames": []
        }
      },
      "description": "<p>The height of the region attachment in Spine.</p>",
      "name": "height",
      "longname": "RegionAttachment#height",
      "kind": "member",
      "memberof": "RegionAttachment",
      "scope": "instance"
    },
    {
      "comment": "/** The color to tint the region attachment. */",
      "meta": {
        "range": [
          2580,
          2614
        ],
        "filename": "RegionAttachment.js",
        "lineno": 52,
        "columnno": 8,
        "path": "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist/attachments",
        "code": {
          "id": "astnode100058139",
          "name": "this.color",
          "type": "NewExpression",
          "value": "",
          "paramnames": []
        }
      },
      "description": "<p>The color to tint the region attachment.</p>",
      "name": "color",
      "longname": "RegionAttachment#color",
      "kind": "member",
      "memberof": "RegionAttachment",
      "scope": "instance"
    },
    {
      "comment": "/** For each of the 4 vertices, a pair of <code>x,y</code> values that is the local position of the vertex.\n         *\n         * See {@link #updateOffset()}. */",
      "meta": {
        "range": [
          2852,
          2888
        ],
        "filename": "RegionAttachment.js",
        "lineno": 58,
        "columnno": 8,
        "path": "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist/attachments",
        "code": {
          "id": "astnode100058162",
          "name": "this.offset",
          "type": "CallExpression",
          "value": "",
          "paramnames": []
        }
      },
      "description": "<p>For each of the 4 vertices, a pair of <code>x,y</code> values that is the local position of the vertex.</p>\n<p>See {@link #updateOffset()}.</p>",
      "name": "offset",
      "longname": "RegionAttachment#offset",
      "kind": "member",
      "memberof": "RegionAttachment",
      "scope": "instance"
    },
    {
      "comment": "/** Calculates the {@link #offset} using the region settings. Must be called after changing region settings. */",
      "meta": {
        "range": [
          3133,
          5469
        ],
        "filename": "RegionAttachment.js",
        "lineno": 64,
        "columnno": 4,
        "path": "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist/attachments",
        "code": {
          "id": "astnode100058198",
          "name": "RegionAttachment#updateRegion",
          "type": "MethodDefinition",
          "paramnames": []
        },
        "vars": {
          "": null
        }
      },
      "description": "<p>Calculates the {@link #offset} using the region settings. Must be called after changing region settings.</p>",
      "name": "updateRegion",
      "longname": "RegionAttachment#updateRegion",
      "kind": "function",
      "memberof": "RegionAttachment",
      "scope": "instance",
      "params": []
    },
    {
      "comment": "/** Transforms the attachment's four vertices to world coordinates. If the attachment has a {@link #sequence}, the region may\n     * be changed.\n     * <p>\n     * See <a href=\"http://esotericsoftware.com/spine-runtime-skeletons#World-transforms\">World transforms</a> in the Spine\n     * Runtimes Guide.\n     * @param worldVertices The output world vertices. Must have a length >= <code>offset</code> + 8.\n     * @param offset The <code>worldVertices</code> index to begin writing values.\n     * @param stride The number of <code>worldVertices</code> entries between the value pairs written. */",
      "meta": {
        "range": [
          6072,
          7333
        ],
        "filename": "RegionAttachment.js",
        "lineno": 136,
        "columnno": 4,
        "path": "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist/attachments",
        "code": {
          "id": "astnode100058676",
          "name": "RegionAttachment#computeWorldVertices",
          "type": "MethodDefinition",
          "paramnames": [
            "slot",
            "worldVertices",
            "offset",
            "stride"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "<p>Transforms the attachment's four vertices to world coordinates. If the attachment has a {@link #sequence}, the region may\nbe changed.</p>\n<p>\nSee <a href=\"http://esotericsoftware.com/spine-runtime-skeletons#World-transforms\">World transforms</a> in the Spine\nRuntimes Guide.",
      "params": [
        {
          "description": "<p>The output world vertices. Must have a length &gt;= <code>offset</code> + 8.</p>",
          "name": "worldVertices"
        },
        {
          "description": "<p>The <code>worldVertices</code> index to begin writing values.</p>",
          "name": "offset"
        },
        {
          "description": "<p>The number of <code>worldVertices</code> entries between the value pairs written.</p>",
          "name": "stride"
        }
      ],
      "name": "computeWorldVertices",
      "longname": "RegionAttachment#computeWorldVertices",
      "kind": "function",
      "memberof": "RegionAttachment",
      "scope": "instance"
    },
    {
      "comment": "/** The index of the region to show for the setup pose. */",
      "meta": {
        "range": [
          1946,
          1965
        ],
        "filename": "Sequence.js",
        "lineno": 36,
        "columnno": 8,
        "path": "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist/attachments",
        "code": {
          "id": "astnode100059296",
          "name": "this.setupIndex",
          "type": "Literal",
          "value": 0,
          "paramnames": []
        }
      },
      "description": "<p>The index of the region to show for the setup pose.</p>",
      "name": "setupIndex",
      "longname": "Sequence#setupIndex",
      "kind": "member",
      "memberof": "Sequence",
      "scope": "instance"
    },
    {
      "comment": "/** A bounds provider that calculates the bounding box from the setup pose. */",
      "meta": {
        "range": [
          2216,
          2888
        ],
        "filename": "SpineGameObject.js",
        "lineno": 38,
        "columnno": 0,
        "path": "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-phaser/dist",
        "code": {
          "id": "astnode100059800",
          "name": "exports.SetupPoseBoundsProvider",
          "type": "ClassDeclaration"
        }
      },
      "classdesc": "<p>A bounds provider that calculates the bounding box from the setup pose.</p>",
      "name": "SetupPoseBoundsProvider",
      "longname": "SetupPoseBoundsProvider",
      "kind": "class",
      "scope": "global"
    },
    {
      "comment": "/** A bounds provider that calculates the bounding box by taking the maximumg bounding box for a combination of skins and specific animation. */",
      "meta": {
        "range": [
          3034,
          5956
        ],
        "filename": "SpineGameObject.js",
        "lineno": 53,
        "columnno": 0,
        "path": "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-phaser/dist",
        "code": {
          "id": "astnode100059870",
          "name": "exports.SkinsAndAnimationBoundsProvider",
          "type": "ClassDeclaration"
        }
      },
      "name": "SkinsAndAnimationBoundsProvider",
      "longname": "SkinsAndAnimationBoundsProvider",
      "kind": "class",
      "classdesc": "<p>A bounds provider that calculates the bounding box by taking the maximumg bounding box for a combination of skins and specific animation.</p>",
      "scope": "global",
      "memberof": "SkinsAndAnimationBoundsProvider",
      "params": [
        {
          "description": "<p>The animation to use for calculating the bounds. If null, the setup pose is used.</p>",
          "name": "animation"
        },
        {
          "description": "<p>The skins to use for calculating the bounds. If empty, the default skin is used.</p>",
          "name": "skins"
        },
        {
          "description": "<p>The time step to use for calculating the bounds. A smaller time step means more precision, but slower calculation.</p>",
          "name": "timeStep",
          "defaultvalue": 0.05
        }
      ]
    },
    {
      "comment": "/**\n * A SpineGameObject is a Phaser {@link GameObject} that can be added to a Phaser Scene and render a Spine skeleton.\n *\n * The Spine GameObject is a thin wrapper around a Spine {@link Skeleton}, {@link AnimationState} and {@link AnimationStateData}. It is responsible for:\n * - updating the animation state\n * - applying the animation state to the skeleton's bones, slots, attachments, and draw order.\n * - updating the skeleton's bone world transforms\n * - rendering the skeleton\n *\n * See the {@link SpinePlugin} class for more information on how to create a `SpineGameObject`.\n *\n * The skeleton, animation state, and animation state data can be accessed via the repsective fields. They can be manually updated via {@link updatePose}.\n *\n * To modify the bone hierarchy before the world transforms are computed, a callback can be set via the {@link beforeUpdateWorldTransforms} field.\n *\n * To modify the bone hierarchy after the world transforms are computed, a callback can be set via the {@link afterUpdateWorldTransforms} field.\n *\n * The class also features methods to convert between the skeleton coordinate system and the Phaser coordinate system.\n *\n * See {@link skeletonToPhaserWorldCoordinates}, {@link phaserWorldCoordinatesToSkeleton}, and {@link phaserWorldCoordinatesToBoneLocal.}\n */",
      "meta": {
        "range": [
          7264,
          12987
        ],
        "filename": "SpineGameObject.js",
        "lineno": 131,
        "columnno": 0,
        "path": "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-phaser/dist",
        "code": {
          "id": "astnode100060235",
          "name": "exports.SpineGameObject",
          "type": "ClassDeclaration"
        }
      },
      "name": "SpineGameObject",
      "longname": "SpineGameObject",
      "kind": "class",
      "classdesc": "<p>A SpineGameObject is a Phaser {@link GameObject} that can be added to a Phaser Scene and render a Spine skeleton.</p>\n<p>The Spine GameObject is a thin wrapper around a Spine {@link Skeleton}, {@link AnimationState} and {@link AnimationStateData}. It is responsible for:</p>\n<ul>\n<li>updating the animation state</li>\n<li>applying the animation state to the skeleton's bones, slots, attachments, and draw order.</li>\n<li>updating the skeleton's bone world transforms</li>\n<li>rendering the skeleton</li>\n</ul>\n<p>See the {@link SpinePlugin} class for more information on how to create a <code>SpineGameObject</code>.</p>\n<p>The skeleton, animation state, and animation state data can be accessed via the repsective fields. They can be manually updated via {@link updatePose}.</p>\n<p>To modify the bone hierarchy before the world transforms are computed, a callback can be set via the {@link beforeUpdateWorldTransforms} field.</p>\n<p>To modify the bone hierarchy after the world transforms are computed, a callback can be set via the {@link afterUpdateWorldTransforms} field.</p>\n<p>The class also features methods to convert between the skeleton coordinate system and the Phaser coordinate system.</p>\n<p>See {@link skeletonToPhaserWorldCoordinates}, {@link phaserWorldCoordinatesToSkeleton}, and {@link phaserWorldCoordinatesToBoneLocal.}</p>",
      "scope": "global",
      "memberof": "SpineGameObject"
    },
    {
      "comment": "/** Converts a point from the skeleton coordinate system to the Phaser world coordinate system. */",
      "meta": {
        "range": [
          8814,
          9161
        ],
        "filename": "SpineGameObject.js",
        "lineno": 161,
        "columnno": 4,
        "path": "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-phaser/dist",
        "code": {
          "id": "astnode100060438",
          "name": "SpineGameObject#skeletonToPhaserWorldCoordinates",
          "type": "MethodDefinition",
          "paramnames": [
            "point"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "<p>Converts a point from the skeleton coordinate system to the Phaser world coordinate system.</p>",
      "name": "skeletonToPhaserWorldCoordinates",
      "longname": "SpineGameObject#skeletonToPhaserWorldCoordinates",
      "kind": "function",
      "memberof": "SpineGameObject",
      "scope": "instance",
      "params": []
    },
    {
      "comment": "/** Converts a point from the Phaser world coordinate system to the skeleton coordinate system. */",
      "meta": {
        "range": [
          9269,
          9656
        ],
        "filename": "SpineGameObject.js",
        "lineno": 170,
        "columnno": 4,
        "path": "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-phaser/dist",
        "code": {
          "id": "astnode100060521",
          "name": "SpineGameObject#phaserWorldCoordinatesToSkeleton",
          "type": "MethodDefinition",
          "paramnames": [
            "point"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "<p>Converts a point from the Phaser world coordinate system to the skeleton coordinate system.</p>",
      "name": "phaserWorldCoordinatesToSkeleton",
      "longname": "SpineGameObject#phaserWorldCoordinatesToSkeleton",
      "kind": "function",
      "memberof": "SpineGameObject",
      "scope": "instance",
      "params": []
    },
    {
      "comment": "/** Converts a point from the Phaser world coordinate system to the bone's local coordinate system. */",
      "meta": {
        "range": [
          9768,
          10016
        ],
        "filename": "SpineGameObject.js",
        "lineno": 180,
        "columnno": 4,
        "path": "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-phaser/dist",
        "code": {
          "id": "astnode100060611",
          "name": "SpineGameObject#phaserWorldCoordinatesToBone",
          "type": "MethodDefinition",
          "paramnames": [
            "point",
            "bone"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "<p>Converts a point from the Phaser world coordinate system to the bone's local coordinate system.</p>",
      "name": "phaserWorldCoordinatesToBone",
      "longname": "SpineGameObject#phaserWorldCoordinatesToBone",
      "kind": "function",
      "memberof": "SpineGameObject",
      "scope": "instance",
      "params": []
    },
    {
      "comment": "/**\n     * Updates the {@link AnimationState}, applies it to the {@link Skeleton}, then updates the world transforms of all bones.\n     * @param delta The time delta in milliseconds\n     */",
      "meta": {
        "range": [
          10215,
          10481
        ],
        "filename": "SpineGameObject.js",
        "lineno": 193,
        "columnno": 4,
        "path": "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-phaser/dist",
        "code": {
          "id": "astnode100060643",
          "name": "SpineGameObject#updatePose",
          "type": "MethodDefinition",
          "paramnames": [
            "delta"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "<p>Updates the {@link AnimationState}, applies it to the {@link Skeleton}, then updates the world transforms of all bones.</p>",
      "params": [
        {
          "description": "<p>The time delta in milliseconds</p>",
          "name": "delta"
        }
      ],
      "name": "updatePose",
      "longname": "SpineGameObject#updatePose",
      "kind": "function",
      "memberof": "SpineGameObject",
      "scope": "instance"
    },
    {
      "comment": "/**\n * {@link ScenePlugin} implementation adding Spine Runtime capabilities to a scene.\n *\n * The scene's {@link LoaderPlugin} (`Scene.load`) gets these additional functions:\n * * `spineBinary(key: string, url: string, xhrSettings?: XHRSettingsObject)`: loads a skeleton binary `.skel` file from the `url`.\n * * `spineJson(key: string, url: string, xhrSettings?: XHRSettingsObject)`: loads a skeleton binary `.skel` file from the `url`.\n * * `spineAtlas(key: string, url: string, premultipliedAlpha: boolean = true, xhrSettings?: XHRSettingsObject)`: loads a texture atlas `.atlas` file from the `url` as well as its correponding texture atlas page images.\n *\n * The scene's {@link GameObjectFactory} (`Scene.add`) gets these additional functions:\n * * `spine(x: number, y: number, dataKey: string, atlasKey: string, boundsProvider: SpineGameObjectBoundsProvider = SetupPoseBoundsProvider())`:\n *    creates a new {@link SpineGameObject} from the data and atlas at position `(x, y)`, using the {@link BoundsProvider} to calculate its bounding box. The object is automatically added to the scene.\n *\n * The scene's {@link GameObjectCreator} (`Scene.make`) gets these additional functions:\n * * `spine(config: SpineGameObjectConfig)`: creates a new {@link SpineGameObject} from the given configuration object.\n *\n * The plugin has additional public methods to work with Spine Runtime core API objects:\n * * `getAtlas(atlasKey: string)`: returns the {@link TextureAtlas} instance for the given atlas key.\n * * `getSkeletonData(skeletonDataKey: string)`: returns the {@link SkeletonData} instance for the given skeleton data key.\n * * `createSkeleton(skeletonDataKey: string, atlasKey: string, premultipliedAlpha: boolean = true)`: creates a new {@link Skeleton} instance from the given skeleton data and atlas key.\n * * `isPremultipliedAlpha(atlasKey: string)`: returns `true` if the atlas with the given key has premultiplied alpha.\n */",
      "meta": {
        "range": [
          4164,
          11188
        ],
        "filename": "SpinePlugin.js",
        "lineno": 55,
        "columnno": 0,
        "path": "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-phaser/dist",
        "code": {
          "id": "astnode100061149",
          "name": "exports.SpinePlugin",
          "type": "ClassDeclaration"
        }
      },
      "name": "SpinePlugin",
      "longname": "SpinePlugin",
      "kind": "class",
      "classdesc": "<p>{@link ScenePlugin} implementation adding Spine Runtime capabilities to a scene.</p>\n<p>The scene's {@link LoaderPlugin} (<code>Scene.load</code>) gets these additional functions:</p>\n<ul>\n<li><code>spineBinary(key: string, url: string, xhrSettings?: XHRSettingsObject)</code>: loads a skeleton binary <code>.skel</code> file from the <code>url</code>.</li>\n<li><code>spineJson(key: string, url: string, xhrSettings?: XHRSettingsObject)</code>: loads a skeleton binary <code>.skel</code> file from the <code>url</code>.</li>\n<li><code>spineAtlas(key: string, url: string, premultipliedAlpha: boolean = true, xhrSettings?: XHRSettingsObject)</code>: loads a texture atlas <code>.atlas</code> file from the <code>url</code> as well as its correponding texture atlas page images.</li>\n</ul>\n<p>The scene's {@link GameObjectFactory} (<code>Scene.add</code>) gets these additional functions:</p>\n<ul>\n<li><code>spine(x: number, y: number, dataKey: string, atlasKey: string, boundsProvider: SpineGameObjectBoundsProvider = SetupPoseBoundsProvider())</code>:\ncreates a new {@link SpineGameObject} from the data and atlas at position <code>(x, y)</code>, using the {@link BoundsProvider} to calculate its bounding box. The object is automatically added to the scene.</li>\n</ul>\n<p>The scene's {@link GameObjectCreator} (<code>Scene.make</code>) gets these additional functions:</p>\n<ul>\n<li><code>spine(config: SpineGameObjectConfig)</code>: creates a new {@link SpineGameObject} from the given configuration object.</li>\n</ul>\n<p>The plugin has additional public methods to work with Spine Runtime core API objects:</p>\n<ul>\n<li><code>getAtlas(atlasKey: string)</code>: returns the {@link TextureAtlas} instance for the given atlas key.</li>\n<li><code>getSkeletonData(skeletonDataKey: string)</code>: returns the {@link SkeletonData} instance for the given skeleton data key.</li>\n<li><code>createSkeleton(skeletonDataKey: string, atlasKey: string, premultipliedAlpha: boolean = true)</code>: creates a new {@link Skeleton} instance from the given skeleton data and atlas key.</li>\n<li><code>isPremultipliedAlpha(atlasKey: string)</code>: returns <code>true</code> if the atlas with the given key has premultiplied alpha.</li>\n</ul>",
      "scope": "global",
      "memberof": "SpinePlugin"
    },
    {
      "comment": "/** Returns the TextureAtlas instance for the given key */",
      "meta": {
        "range": [
          8708,
          9683
        ],
        "filename": "SpinePlugin.js",
        "lineno": 150,
        "columnno": 4,
        "path": "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-phaser/dist",
        "code": {
          "id": "astnode100061801",
          "name": "SpinePlugin#getAtlas",
          "type": "MethodDefinition",
          "paramnames": [
            "atlasKey"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "<p>Returns the TextureAtlas instance for the given key</p>",
      "name": "getAtlas",
      "longname": "SpinePlugin#getAtlas",
      "kind": "function",
      "memberof": "SpinePlugin",
      "scope": "instance",
      "params": []
    },
    {
      "comment": "/** Returns whether the TextureAtlas uses premultiplied alpha */",
      "meta": {
        "range": [
          9757,
          9950
        ],
        "filename": "SpinePlugin.js",
        "lineno": 175,
        "columnno": 4,
        "path": "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-phaser/dist",
        "code": {
          "id": "astnode100061951",
          "name": "SpinePlugin#isAtlasPremultiplied",
          "type": "MethodDefinition",
          "paramnames": [
            "atlasKey"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "<p>Returns whether the TextureAtlas uses premultiplied alpha</p>",
      "name": "isAtlasPremultiplied",
      "longname": "SpinePlugin#isAtlasPremultiplied",
      "kind": "function",
      "memberof": "SpinePlugin",
      "scope": "instance",
      "params": []
    },
    {
      "comment": "/** Returns the SkeletonData instance for the given data and atlas key */",
      "meta": {
        "range": [
          10033,
          11002
        ],
        "filename": "SpinePlugin.js",
        "lineno": 182,
        "columnno": 4,
        "path": "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-phaser/dist",
        "code": {
          "id": "astnode100061979",
          "name": "SpinePlugin#getSkeletonData",
          "type": "MethodDefinition",
          "paramnames": [
            "dataKey",
            "atlasKey"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "<p>Returns the SkeletonData instance for the given data and atlas key</p>",
      "name": "getSkeletonData",
      "longname": "SpinePlugin#getSkeletonData",
      "kind": "function",
      "memberof": "SpinePlugin",
      "scope": "instance",
      "params": []
    },
    {
      "comment": "/** Creates a new Skeleton instance from the data and atlas. */",
      "meta": {
        "range": [
          11075,
          11186
        ],
        "filename": "SpinePlugin.js",
        "lineno": 205,
        "columnno": 4,
        "path": "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-phaser/dist",
        "code": {
          "id": "astnode100062109",
          "name": "SpinePlugin#createSkeleton",
          "type": "MethodDefinition",
          "paramnames": [
            "dataKey",
            "atlasKey"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "<p>Creates a new Skeleton instance from the data and atlas.</p>",
      "name": "createSkeleton",
      "longname": "SpinePlugin#createSkeleton",
      "kind": "function",
      "memberof": "SpinePlugin",
      "scope": "instance",
      "params": []
    },
    {
      "kind": "package",
      "longname": "package:undefined",
      "files": [
        "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist/Animation.js",
        "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist/AnimationState.js",
        "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist/AnimationStateData.js",
        "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist/AssetManagerBase.js",
        "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist/AtlasAttachmentLoader.js",
        "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist/Bone.js",
        "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist/BoneData.js",
        "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist/ConstraintData.js",
        "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist/Event.js",
        "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist/EventData.js",
        "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist/IkConstraint.js",
        "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist/IkConstraintData.js",
        "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist/PathConstraint.js",
        "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist/PathConstraintData.js",
        "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist/Skeleton.js",
        "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist/SkeletonBinary.js",
        "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist/SkeletonBounds.js",
        "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist/SkeletonClipping.js",
        "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist/SkeletonData.js",
        "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist/SkeletonJson.js",
        "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist/Skin.js",
        "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist/Slot.js",
        "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist/SlotData.js",
        "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist/Texture.js",
        "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist/TextureAtlas.js",
        "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist/TransformConstraint.js",
        "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist/TransformConstraintData.js",
        "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist/Triangulator.js",
        "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist/Updatable.js",
        "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist/Utils.js",
        "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist/attachments/Attachment.js",
        "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist/attachments/AttachmentLoader.js",
        "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist/attachments/BoundingBoxAttachment.js",
        "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist/attachments/ClippingAttachment.js",
        "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist/attachments/HasTextureRegion.js",
        "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist/attachments/MeshAttachment.js",
        "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist/attachments/PathAttachment.js",
        "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist/attachments/PointAttachment.js",
        "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist/attachments/RegionAttachment.js",
        "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist/attachments/Sequence.js",
        "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist/attachments/index.js",
        "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist/index.js",
        "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-core/dist/polyfills.js",
        "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-phaser/dist/SpineGameObject.js",
        "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-phaser/dist/SpinePlugin.js",
        "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-phaser/dist/index.js",
        "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-phaser/dist/keys.js",
        "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-phaser/dist/mixins.js",
        "/Users/arian/Documents/Phaser/spine-phaser-docs/spine-phaser/dist/require-shim.js"
      ]
    }
  ]
}